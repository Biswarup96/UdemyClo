"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@effect";
exports.ids = ["vendor-chunks/@effect"];
exports.modules = {

/***/ "(rsc)/./node_modules/@effect/schema/dist/esm/AST.js":
/*!*****************************************************!*\
  !*** ./node_modules/@effect/schema/dist/esm/AST.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AnyKeyword: () => (/* binding */ AnyKeyword),\n/* harmony export */   BatchingAnnotationId: () => (/* binding */ BatchingAnnotationId),\n/* harmony export */   BigIntKeyword: () => (/* binding */ BigIntKeyword),\n/* harmony export */   BooleanKeyword: () => (/* binding */ BooleanKeyword),\n/* harmony export */   BrandAnnotationId: () => (/* binding */ BrandAnnotationId),\n/* harmony export */   ComposeTransformation: () => (/* binding */ ComposeTransformation),\n/* harmony export */   ConcurrencyAnnotationId: () => (/* binding */ ConcurrencyAnnotationId),\n/* harmony export */   Declaration: () => (/* binding */ Declaration),\n/* harmony export */   DefaultAnnotationId: () => (/* binding */ DefaultAnnotationId),\n/* harmony export */   DescriptionAnnotationId: () => (/* binding */ DescriptionAnnotationId),\n/* harmony export */   DocumentationAnnotationId: () => (/* binding */ DocumentationAnnotationId),\n/* harmony export */   Element: () => (/* binding */ Element),\n/* harmony export */   Enums: () => (/* binding */ Enums),\n/* harmony export */   ExamplesAnnotationId: () => (/* binding */ ExamplesAnnotationId),\n/* harmony export */   FinalTransformation: () => (/* binding */ FinalTransformation),\n/* harmony export */   IdentifierAnnotationId: () => (/* binding */ IdentifierAnnotationId),\n/* harmony export */   IndexSignature: () => (/* binding */ IndexSignature),\n/* harmony export */   JSONSchemaAnnotationId: () => (/* binding */ JSONSchemaAnnotationId),\n/* harmony export */   Literal: () => (/* binding */ Literal),\n/* harmony export */   MessageAnnotationId: () => (/* binding */ MessageAnnotationId),\n/* harmony export */   NeverKeyword: () => (/* binding */ NeverKeyword),\n/* harmony export */   NumberKeyword: () => (/* binding */ NumberKeyword),\n/* harmony export */   ObjectKeyword: () => (/* binding */ ObjectKeyword),\n/* harmony export */   ParseIssueTitleAnnotationId: () => (/* binding */ ParseIssueTitleAnnotationId),\n/* harmony export */   PropertySignature: () => (/* binding */ PropertySignature),\n/* harmony export */   PropertySignatureTransformation: () => (/* binding */ PropertySignatureTransformation),\n/* harmony export */   Refinement: () => (/* binding */ Refinement),\n/* harmony export */   StringKeyword: () => (/* binding */ StringKeyword),\n/* harmony export */   SurrogateAnnotationId: () => (/* binding */ SurrogateAnnotationId),\n/* harmony export */   Suspend: () => (/* binding */ Suspend),\n/* harmony export */   SymbolKeyword: () => (/* binding */ SymbolKeyword),\n/* harmony export */   TemplateLiteral: () => (/* binding */ TemplateLiteral),\n/* harmony export */   TemplateLiteralSpan: () => (/* binding */ TemplateLiteralSpan),\n/* harmony export */   TitleAnnotationId: () => (/* binding */ TitleAnnotationId),\n/* harmony export */   Transformation: () => (/* binding */ Transformation),\n/* harmony export */   TupleType: () => (/* binding */ TupleType),\n/* harmony export */   TypeAnnotationId: () => (/* binding */ TypeAnnotationId),\n/* harmony export */   TypeLiteral: () => (/* binding */ TypeLiteral),\n/* harmony export */   TypeLiteralTransformation: () => (/* binding */ TypeLiteralTransformation),\n/* harmony export */   UndefinedKeyword: () => (/* binding */ UndefinedKeyword),\n/* harmony export */   Union: () => (/* binding */ Union),\n/* harmony export */   UniqueSymbol: () => (/* binding */ UniqueSymbol),\n/* harmony export */   UnknownKeyword: () => (/* binding */ UnknownKeyword),\n/* harmony export */   VoidKeyword: () => (/* binding */ VoidKeyword),\n/* harmony export */   annotations: () => (/* binding */ annotations),\n/* harmony export */   anyKeyword: () => (/* binding */ anyKeyword),\n/* harmony export */   bigIntKeyword: () => (/* binding */ bigIntKeyword),\n/* harmony export */   booleanKeyword: () => (/* binding */ booleanKeyword),\n/* harmony export */   compose: () => (/* binding */ compose),\n/* harmony export */   composeTransformation: () => (/* binding */ composeTransformation),\n/* harmony export */   defaultParseOption: () => (/* binding */ defaultParseOption),\n/* harmony export */   encodedAST: () => (/* binding */ encodedAST),\n/* harmony export */   flatten: () => (/* binding */ flatten),\n/* harmony export */   getAnnotation: () => (/* binding */ getAnnotation),\n/* harmony export */   getBatchingAnnotation: () => (/* binding */ getBatchingAnnotation),\n/* harmony export */   getBrandAnnotation: () => (/* binding */ getBrandAnnotation),\n/* harmony export */   getCardinality: () => (/* binding */ getCardinality),\n/* harmony export */   getCompiler: () => (/* binding */ getCompiler),\n/* harmony export */   getConcurrencyAnnotation: () => (/* binding */ getConcurrencyAnnotation),\n/* harmony export */   getDefaultAnnotation: () => (/* binding */ getDefaultAnnotation),\n/* harmony export */   getDescriptionAnnotation: () => (/* binding */ getDescriptionAnnotation),\n/* harmony export */   getDocumentationAnnotation: () => (/* binding */ getDocumentationAnnotation),\n/* harmony export */   getExamplesAnnotation: () => (/* binding */ getExamplesAnnotation),\n/* harmony export */   getIdentifierAnnotation: () => (/* binding */ getIdentifierAnnotation),\n/* harmony export */   getJSONIdentifier: () => (/* binding */ getJSONIdentifier),\n/* harmony export */   getJSONIdentifierAnnotation: () => (/* binding */ getJSONIdentifierAnnotation),\n/* harmony export */   getJSONSchemaAnnotation: () => (/* binding */ getJSONSchemaAnnotation),\n/* harmony export */   getMessageAnnotation: () => (/* binding */ getMessageAnnotation),\n/* harmony export */   getNumberIndexedAccess: () => (/* binding */ getNumberIndexedAccess),\n/* harmony export */   getParameterBase: () => (/* binding */ getParameterBase),\n/* harmony export */   getParseIssueTitleAnnotation: () => (/* binding */ getParseIssueTitleAnnotation),\n/* harmony export */   getPropertyKeyIndexedAccess: () => (/* binding */ getPropertyKeyIndexedAccess),\n/* harmony export */   getPropertySignatures: () => (/* binding */ getPropertySignatures),\n/* harmony export */   getSurrogateAnnotation: () => (/* binding */ getSurrogateAnnotation),\n/* harmony export */   getTemplateLiteralRegExp: () => (/* binding */ getTemplateLiteralRegExp),\n/* harmony export */   getTitleAnnotation: () => (/* binding */ getTitleAnnotation),\n/* harmony export */   getToIndexSignatures: () => (/* binding */ getToIndexSignatures),\n/* harmony export */   getToPropertySignatures: () => (/* binding */ getToPropertySignatures),\n/* harmony export */   getWeight: () => (/* binding */ getWeight),\n/* harmony export */   hash: () => (/* binding */ hash),\n/* harmony export */   isAnyKeyword: () => (/* binding */ isAnyKeyword),\n/* harmony export */   isBigIntKeyword: () => (/* binding */ isBigIntKeyword),\n/* harmony export */   isBooleanKeyword: () => (/* binding */ isBooleanKeyword),\n/* harmony export */   isComposeTransformation: () => (/* binding */ isComposeTransformation),\n/* harmony export */   isDeclaration: () => (/* binding */ isDeclaration),\n/* harmony export */   isEnums: () => (/* binding */ isEnums),\n/* harmony export */   isFinalTransformation: () => (/* binding */ isFinalTransformation),\n/* harmony export */   isLiteral: () => (/* binding */ isLiteral),\n/* harmony export */   isMembers: () => (/* binding */ isMembers),\n/* harmony export */   isNeverKeyword: () => (/* binding */ isNeverKeyword),\n/* harmony export */   isNumberKeyword: () => (/* binding */ isNumberKeyword),\n/* harmony export */   isObjectKeyword: () => (/* binding */ isObjectKeyword),\n/* harmony export */   isParameter: () => (/* binding */ isParameter),\n/* harmony export */   isRefinement: () => (/* binding */ isRefinement),\n/* harmony export */   isStringKeyword: () => (/* binding */ isStringKeyword),\n/* harmony export */   isSuspend: () => (/* binding */ isSuspend),\n/* harmony export */   isSymbolKeyword: () => (/* binding */ isSymbolKeyword),\n/* harmony export */   isTemplateLiteral: () => (/* binding */ isTemplateLiteral),\n/* harmony export */   isTransformation: () => (/* binding */ isTransformation),\n/* harmony export */   isTupleType: () => (/* binding */ isTupleType),\n/* harmony export */   isTypeLiteral: () => (/* binding */ isTypeLiteral),\n/* harmony export */   isTypeLiteralTransformation: () => (/* binding */ isTypeLiteralTransformation),\n/* harmony export */   isUndefinedKeyword: () => (/* binding */ isUndefinedKeyword),\n/* harmony export */   isUnion: () => (/* binding */ isUnion),\n/* harmony export */   isUniqueSymbol: () => (/* binding */ isUniqueSymbol),\n/* harmony export */   isUnknownKeyword: () => (/* binding */ isUnknownKeyword),\n/* harmony export */   isVoidKeyword: () => (/* binding */ isVoidKeyword),\n/* harmony export */   keyof: () => (/* binding */ keyof),\n/* harmony export */   mapMembers: () => (/* binding */ mapMembers),\n/* harmony export */   mutable: () => (/* binding */ mutable),\n/* harmony export */   neverKeyword: () => (/* binding */ neverKeyword),\n/* harmony export */   \"null\": () => (/* binding */ $null),\n/* harmony export */   numberKeyword: () => (/* binding */ numberKeyword),\n/* harmony export */   objectKeyword: () => (/* binding */ objectKeyword),\n/* harmony export */   omit: () => (/* binding */ omit),\n/* harmony export */   orUndefined: () => (/* binding */ orUndefined),\n/* harmony export */   partial: () => (/* binding */ partial),\n/* harmony export */   pick: () => (/* binding */ pick),\n/* harmony export */   record: () => (/* binding */ record),\n/* harmony export */   rename: () => (/* binding */ rename),\n/* harmony export */   required: () => (/* binding */ required),\n/* harmony export */   stringKeyword: () => (/* binding */ stringKeyword),\n/* harmony export */   symbolKeyword: () => (/* binding */ symbolKeyword),\n/* harmony export */   typeAST: () => (/* binding */ typeAST),\n/* harmony export */   undefinedKeyword: () => (/* binding */ undefinedKeyword),\n/* harmony export */   unify: () => (/* binding */ unify),\n/* harmony export */   unknownKeyword: () => (/* binding */ unknownKeyword),\n/* harmony export */   voidKeyword: () => (/* binding */ voidKeyword)\n/* harmony export */ });\n/* harmony import */ var effect_Array__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! effect/Array */ \"(rsc)/./node_modules/effect/dist/esm/Array.js\");\n/* harmony import */ var effect_Function__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! effect/Function */ \"(rsc)/./node_modules/effect/dist/esm/Function.js\");\n/* harmony import */ var effect_GlobalValue__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! effect/GlobalValue */ \"(rsc)/./node_modules/effect/dist/esm/GlobalValue.js\");\n/* harmony import */ var effect_Hash__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! effect/Hash */ \"(rsc)/./node_modules/effect/dist/esm/Hash.js\");\n/* harmony import */ var effect_Number__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! effect/Number */ \"(rsc)/./node_modules/effect/dist/esm/Number.js\");\n/* harmony import */ var effect_Option__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! effect/Option */ \"(rsc)/./node_modules/effect/dist/esm/Option.js\");\n/* harmony import */ var effect_Order__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! effect/Order */ \"(rsc)/./node_modules/effect/dist/esm/Order.js\");\n/* harmony import */ var effect_Predicate__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! effect/Predicate */ \"(rsc)/./node_modules/effect/dist/esm/Predicate.js\");\n/* harmony import */ var effect_RegExp__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! effect/RegExp */ \"(rsc)/./node_modules/effect/dist/esm/RegExp.js\");\n/* harmony import */ var _internal_errors_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./internal/errors.js */ \"(rsc)/./node_modules/@effect/schema/dist/esm/internal/errors.js\");\n/* harmony import */ var _internal_util_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./internal/util.js */ \"(rsc)/./node_modules/@effect/schema/dist/esm/internal/util.js\");\n/**\n * @since 1.0.0\n */\n\n\n\n\n\n\n\n\n\n\n\n/**\n * @category annotations\n * @since 1.0.0\n */\nconst BrandAnnotationId = /*#__PURE__*/Symbol.for(\"@effect/schema/annotation/Brand\");\n/**\n * @category annotations\n * @since 1.0.0\n */\nconst TypeAnnotationId = /*#__PURE__*/Symbol.for(\"@effect/schema/annotation/Type\");\n/**\n * @category annotations\n * @since 1.0.0\n */\nconst MessageAnnotationId = /*#__PURE__*/Symbol.for(\"@effect/schema/annotation/Message\");\n/**\n * @category annotations\n * @since 1.0.0\n */\nconst IdentifierAnnotationId = /*#__PURE__*/Symbol.for(\"@effect/schema/annotation/Identifier\");\n/**\n * @category annotations\n * @since 1.0.0\n */\nconst TitleAnnotationId = /*#__PURE__*/Symbol.for(\"@effect/schema/annotation/Title\");\n/**\n * @category annotations\n * @since 1.0.0\n */\nconst DescriptionAnnotationId = /*#__PURE__*/Symbol.for(\"@effect/schema/annotation/Description\");\n/**\n * @category annotations\n * @since 1.0.0\n */\nconst ExamplesAnnotationId = /*#__PURE__*/Symbol.for(\"@effect/schema/annotation/Examples\");\n/**\n * @category annotations\n * @since 1.0.0\n */\nconst DefaultAnnotationId = /*#__PURE__*/Symbol.for(\"@effect/schema/annotation/Default\");\n/**\n * @category annotations\n * @since 1.0.0\n */\nconst JSONSchemaAnnotationId = /*#__PURE__*/Symbol.for(\"@effect/schema/annotation/JSONSchema\");\n/**\n * @category annotations\n * @since 1.0.0\n */\nconst DocumentationAnnotationId = /*#__PURE__*/Symbol.for(\"@effect/schema/annotation/Documentation\");\n/**\n * @category annotations\n * @since 1.0.0\n */\nconst ConcurrencyAnnotationId = /*#__PURE__*/Symbol.for(\"@effect/schema/annotation/Concurrency\");\n/**\n * @category annotations\n * @since 1.0.0\n */\nconst BatchingAnnotationId = /*#__PURE__*/Symbol.for(\"@effect/schema/annotation/Batching\");\n/** @internal */\nconst SurrogateAnnotationId = /*#__PURE__*/Symbol.for(\"@effect/schema/annotation/Surrogate\");\n/**\n * @category annotations\n * @since 1.0.0\n */\nconst ParseIssueTitleAnnotationId = /*#__PURE__*/Symbol.for(\"@effect/schema/annotation/ParseIssueTitle\");\n/**\n * @category annotations\n * @since 1.0.0\n */\nconst getAnnotation = /*#__PURE__*/(0,effect_Function__WEBPACK_IMPORTED_MODULE_0__.dual)(2, (annotated, key) => Object.prototype.hasOwnProperty.call(annotated.annotations, key) ? effect_Option__WEBPACK_IMPORTED_MODULE_1__.some(annotated.annotations[key]) : effect_Option__WEBPACK_IMPORTED_MODULE_1__.none());\n/**\n * @category annotations\n * @since 1.0.0\n */\nconst getBrandAnnotation = /*#__PURE__*/getAnnotation(BrandAnnotationId);\n/**\n * @category annotations\n * @since 1.0.0\n */\nconst getMessageAnnotation = /*#__PURE__*/getAnnotation(MessageAnnotationId);\n/**\n * @category annotations\n * @since 1.0.0\n */\nconst getTitleAnnotation = /*#__PURE__*/getAnnotation(TitleAnnotationId);\n/**\n * @category annotations\n * @since 1.0.0\n */\nconst getIdentifierAnnotation = /*#__PURE__*/getAnnotation(IdentifierAnnotationId);\n/**\n * @category annotations\n * @since 1.0.0\n */\nconst getDescriptionAnnotation = /*#__PURE__*/getAnnotation(DescriptionAnnotationId);\n/**\n * @category annotations\n * @since 1.0.0\n */\nconst getExamplesAnnotation = /*#__PURE__*/getAnnotation(ExamplesAnnotationId);\n/**\n * @category annotations\n * @since 1.0.0\n */\nconst getDefaultAnnotation = /*#__PURE__*/getAnnotation(DefaultAnnotationId);\n/**\n * @category annotations\n * @since 1.0.0\n */\nconst getJSONSchemaAnnotation = /*#__PURE__*/getAnnotation(JSONSchemaAnnotationId);\n/**\n * @category annotations\n * @since 1.0.0\n */\nconst getDocumentationAnnotation = /*#__PURE__*/getAnnotation(DocumentationAnnotationId);\n/**\n * @category annotations\n * @since 1.0.0\n */\nconst getConcurrencyAnnotation = /*#__PURE__*/getAnnotation(ConcurrencyAnnotationId);\n/**\n * @category annotations\n * @since 1.0.0\n */\nconst getBatchingAnnotation = /*#__PURE__*/getAnnotation(BatchingAnnotationId);\n/**\n * @category annotations\n * @since 1.0.0\n */\nconst getParseIssueTitleAnnotation = /*#__PURE__*/getAnnotation(ParseIssueTitleAnnotationId);\n/** @internal */\nconst getSurrogateAnnotation = /*#__PURE__*/getAnnotation(SurrogateAnnotationId);\nconst JSONIdentifierAnnotationId = /*#__PURE__*/Symbol.for(\"@effect/schema/annotation/JSONIdentifier\");\n/** @internal */\nconst getJSONIdentifierAnnotation = /*#__PURE__*/getAnnotation(JSONIdentifierAnnotationId);\n/**\n * @category model\n * @since 1.0.0\n */\nclass Declaration {\n  typeParameters;\n  decodeUnknown;\n  encodeUnknown;\n  annotations;\n  /**\n   * @since 1.0.0\n   */\n  _tag = \"Declaration\";\n  constructor(typeParameters, decodeUnknown, encodeUnknown, annotations = {}) {\n    this.typeParameters = typeParameters;\n    this.decodeUnknown = decodeUnknown;\n    this.encodeUnknown = encodeUnknown;\n    this.annotations = annotations;\n  }\n  /**\n   * @since 1.0.0\n   */\n  toString(verbose = false) {\n    return effect_Option__WEBPACK_IMPORTED_MODULE_1__.getOrElse(getExpected(this, verbose), () => \"<declaration schema>\");\n  }\n  /**\n   * @since 1.0.0\n   */\n  toJSON() {\n    return {\n      _tag: this._tag,\n      typeParameters: this.typeParameters.map(ast => ast.toJSON()),\n      annotations: toJSONAnnotations(this.annotations)\n    };\n  }\n}\nconst createASTGuard = tag => ast => ast._tag === tag;\n/**\n * @category guards\n * @since 1.0.0\n */\nconst isDeclaration = /*#__PURE__*/createASTGuard(\"Declaration\");\n/**\n * @category model\n * @since 1.0.0\n */\nclass Literal {\n  literal;\n  annotations;\n  /**\n   * @since 1.0.0\n   */\n  _tag = \"Literal\";\n  constructor(literal, annotations = {}) {\n    this.literal = literal;\n    this.annotations = annotations;\n  }\n  /**\n   * @since 1.0.0\n   */\n  toString(verbose = false) {\n    return effect_Option__WEBPACK_IMPORTED_MODULE_1__.getOrElse(getExpected(this, verbose), () => _internal_util_js__WEBPACK_IMPORTED_MODULE_2__.formatUnknown(this.literal));\n  }\n  /**\n   * @since 1.0.0\n   */\n  toJSON() {\n    return {\n      _tag: this._tag,\n      literal: effect_Predicate__WEBPACK_IMPORTED_MODULE_3__.isBigInt(this.literal) ? String(this.literal) : this.literal,\n      annotations: toJSONAnnotations(this.annotations)\n    };\n  }\n}\n/**\n * @category guards\n * @since 1.0.0\n */\nconst isLiteral = /*#__PURE__*/createASTGuard(\"Literal\");\nconst $null = /*#__PURE__*/new Literal(null, {\n  [IdentifierAnnotationId]: \"null\"\n});\n\n/**\n * @category model\n * @since 1.0.0\n */\nclass UniqueSymbol {\n  symbol;\n  annotations;\n  /**\n   * @since 1.0.0\n   */\n  _tag = \"UniqueSymbol\";\n  constructor(symbol, annotations = {}) {\n    this.symbol = symbol;\n    this.annotations = annotations;\n  }\n  /**\n   * @since 1.0.0\n   */\n  toString(verbose = false) {\n    return effect_Option__WEBPACK_IMPORTED_MODULE_1__.getOrElse(getExpected(this, verbose), () => _internal_util_js__WEBPACK_IMPORTED_MODULE_2__.formatUnknown(this.symbol));\n  }\n  /**\n   * @since 1.0.0\n   */\n  toJSON() {\n    return {\n      _tag: this._tag,\n      symbol: String(this.symbol),\n      annotations: toJSONAnnotations(this.annotations)\n    };\n  }\n}\n/**\n * @category guards\n * @since 1.0.0\n */\nconst isUniqueSymbol = /*#__PURE__*/createASTGuard(\"UniqueSymbol\");\n/**\n * @category model\n * @since 1.0.0\n */\nclass UndefinedKeyword {\n  annotations;\n  /**\n   * @since 1.0.0\n   */\n  _tag = \"UndefinedKeyword\";\n  constructor(annotations = {}) {\n    this.annotations = annotations;\n  }\n  /**\n   * @since 1.0.0\n   */\n  toString(verbose = false) {\n    return formatKeyword(this, verbose);\n  }\n  /**\n   * @since 1.0.0\n   */\n  toJSON() {\n    return {\n      _tag: this._tag,\n      annotations: toJSONAnnotations(this.annotations)\n    };\n  }\n}\n/**\n * @category constructors\n * @since 1.0.0\n */\nconst undefinedKeyword = /*#__PURE__*/new UndefinedKeyword({\n  [TitleAnnotationId]: \"undefined\"\n});\n/**\n * @category guards\n * @since 1.0.0\n */\nconst isUndefinedKeyword = /*#__PURE__*/createASTGuard(\"UndefinedKeyword\");\n/**\n * @category model\n * @since 1.0.0\n */\nclass VoidKeyword {\n  annotations;\n  /**\n   * @since 1.0.0\n   */\n  _tag = \"VoidKeyword\";\n  constructor(annotations = {}) {\n    this.annotations = annotations;\n  }\n  /**\n   * @since 1.0.0\n   */\n  toString(verbose = false) {\n    return formatKeyword(this, verbose);\n  }\n  /**\n   * @since 1.0.0\n   */\n  toJSON() {\n    return {\n      _tag: this._tag,\n      annotations: toJSONAnnotations(this.annotations)\n    };\n  }\n}\n/**\n * @category constructors\n * @since 1.0.0\n */\nconst voidKeyword = /*#__PURE__*/new VoidKeyword({\n  [TitleAnnotationId]: \"void\"\n});\n/**\n * @category guards\n * @since 1.0.0\n */\nconst isVoidKeyword = /*#__PURE__*/createASTGuard(\"VoidKeyword\");\n/**\n * @category model\n * @since 1.0.0\n */\nclass NeverKeyword {\n  annotations;\n  /**\n   * @since 1.0.0\n   */\n  _tag = \"NeverKeyword\";\n  constructor(annotations = {}) {\n    this.annotations = annotations;\n  }\n  /**\n   * @since 1.0.0\n   */\n  toString(verbose = false) {\n    return formatKeyword(this, verbose);\n  }\n  /**\n   * @since 1.0.0\n   */\n  toJSON() {\n    return {\n      _tag: this._tag,\n      annotations: toJSONAnnotations(this.annotations)\n    };\n  }\n}\n/**\n * @category constructors\n * @since 1.0.0\n */\nconst neverKeyword = /*#__PURE__*/new NeverKeyword({\n  [TitleAnnotationId]: \"never\"\n});\n/**\n * @category guards\n * @since 1.0.0\n */\nconst isNeverKeyword = /*#__PURE__*/createASTGuard(\"NeverKeyword\");\n/**\n * @category model\n * @since 1.0.0\n */\nclass UnknownKeyword {\n  annotations;\n  /**\n   * @since 1.0.0\n   */\n  _tag = \"UnknownKeyword\";\n  constructor(annotations = {}) {\n    this.annotations = annotations;\n  }\n  /**\n   * @since 1.0.0\n   */\n  toString(verbose = false) {\n    return formatKeyword(this, verbose);\n  }\n  /**\n   * @since 1.0.0\n   */\n  toJSON() {\n    return {\n      _tag: this._tag,\n      annotations: toJSONAnnotations(this.annotations)\n    };\n  }\n}\n/**\n * @category constructors\n * @since 1.0.0\n */\nconst unknownKeyword = /*#__PURE__*/new UnknownKeyword({\n  [TitleAnnotationId]: \"unknown\"\n});\n/**\n * @category guards\n * @since 1.0.0\n */\nconst isUnknownKeyword = /*#__PURE__*/createASTGuard(\"UnknownKeyword\");\n/**\n * @category model\n * @since 1.0.0\n */\nclass AnyKeyword {\n  annotations;\n  /**\n   * @since 1.0.0\n   */\n  _tag = \"AnyKeyword\";\n  constructor(annotations = {}) {\n    this.annotations = annotations;\n  }\n  /**\n   * @since 1.0.0\n   */\n  toString(verbose = false) {\n    return formatKeyword(this, verbose);\n  }\n  /**\n   * @since 1.0.0\n   */\n  toJSON() {\n    return {\n      _tag: this._tag,\n      annotations: toJSONAnnotations(this.annotations)\n    };\n  }\n}\n/**\n * @category constructors\n * @since 1.0.0\n */\nconst anyKeyword = /*#__PURE__*/new AnyKeyword({\n  [TitleAnnotationId]: \"any\"\n});\n/**\n * @category guards\n * @since 1.0.0\n */\nconst isAnyKeyword = /*#__PURE__*/createASTGuard(\"AnyKeyword\");\n/**\n * @category model\n * @since 1.0.0\n */\nclass StringKeyword {\n  annotations;\n  /**\n   * @since 1.0.0\n   */\n  _tag = \"StringKeyword\";\n  constructor(annotations = {}) {\n    this.annotations = annotations;\n  }\n  /**\n   * @since 1.0.0\n   */\n  toString(verbose = false) {\n    return formatKeyword(this, verbose);\n  }\n  /**\n   * @since 1.0.0\n   */\n  toJSON() {\n    return {\n      _tag: this._tag,\n      annotations: toJSONAnnotations(this.annotations)\n    };\n  }\n}\n/**\n * @category constructors\n * @since 1.0.0\n */\nconst stringKeyword = /*#__PURE__*/new StringKeyword({\n  [TitleAnnotationId]: \"string\",\n  [DescriptionAnnotationId]: \"a string\"\n});\n/**\n * @category guards\n * @since 1.0.0\n */\nconst isStringKeyword = /*#__PURE__*/createASTGuard(\"StringKeyword\");\n/**\n * @category model\n * @since 1.0.0\n */\nclass NumberKeyword {\n  annotations;\n  /**\n   * @since 1.0.0\n   */\n  _tag = \"NumberKeyword\";\n  constructor(annotations = {}) {\n    this.annotations = annotations;\n  }\n  /**\n   * @since 1.0.0\n   */\n  toString(verbose = false) {\n    return formatKeyword(this, verbose);\n  }\n  /**\n   * @since 1.0.0\n   */\n  toJSON() {\n    return {\n      _tag: this._tag,\n      annotations: toJSONAnnotations(this.annotations)\n    };\n  }\n}\n/**\n * @category constructors\n * @since 1.0.0\n */\nconst numberKeyword = /*#__PURE__*/new NumberKeyword({\n  [TitleAnnotationId]: \"number\",\n  [DescriptionAnnotationId]: \"a number\"\n});\n/**\n * @category guards\n * @since 1.0.0\n */\nconst isNumberKeyword = /*#__PURE__*/createASTGuard(\"NumberKeyword\");\n/**\n * @category model\n * @since 1.0.0\n */\nclass BooleanKeyword {\n  annotations;\n  /**\n   * @since 1.0.0\n   */\n  _tag = \"BooleanKeyword\";\n  constructor(annotations = {}) {\n    this.annotations = annotations;\n  }\n  /**\n   * @since 1.0.0\n   */\n  toString(verbose = false) {\n    return formatKeyword(this, verbose);\n  }\n  /**\n   * @since 1.0.0\n   */\n  toJSON() {\n    return {\n      _tag: this._tag,\n      annotations: toJSONAnnotations(this.annotations)\n    };\n  }\n}\n/**\n * @category constructors\n * @since 1.0.0\n */\nconst booleanKeyword = /*#__PURE__*/new BooleanKeyword({\n  [TitleAnnotationId]: \"boolean\",\n  [DescriptionAnnotationId]: \"a boolean\"\n});\n/**\n * @category guards\n * @since 1.0.0\n */\nconst isBooleanKeyword = /*#__PURE__*/createASTGuard(\"BooleanKeyword\");\n/**\n * @category model\n * @since 1.0.0\n */\nclass BigIntKeyword {\n  annotations;\n  /**\n   * @since 1.0.0\n   */\n  _tag = \"BigIntKeyword\";\n  constructor(annotations = {}) {\n    this.annotations = annotations;\n  }\n  /**\n   * @since 1.0.0\n   */\n  toString(verbose = false) {\n    return formatKeyword(this, verbose);\n  }\n  /**\n   * @since 1.0.0\n   */\n  toJSON() {\n    return {\n      _tag: this._tag,\n      annotations: toJSONAnnotations(this.annotations)\n    };\n  }\n}\n/**\n * @category constructors\n * @since 1.0.0\n */\nconst bigIntKeyword = /*#__PURE__*/new BigIntKeyword({\n  [TitleAnnotationId]: \"bigint\",\n  [DescriptionAnnotationId]: \"a bigint\"\n});\n/**\n * @category guards\n * @since 1.0.0\n */\nconst isBigIntKeyword = /*#__PURE__*/createASTGuard(\"BigIntKeyword\");\n/**\n * @category model\n * @since 1.0.0\n */\nclass SymbolKeyword {\n  annotations;\n  /**\n   * @since 1.0.0\n   */\n  _tag = \"SymbolKeyword\";\n  constructor(annotations = {}) {\n    this.annotations = annotations;\n  }\n  /**\n   * @since 1.0.0\n   */\n  toString(verbose = false) {\n    return formatKeyword(this, verbose);\n  }\n  /**\n   * @since 1.0.0\n   */\n  toJSON() {\n    return {\n      _tag: this._tag,\n      annotations: toJSONAnnotations(this.annotations)\n    };\n  }\n}\n/**\n * @category constructors\n * @since 1.0.0\n */\nconst symbolKeyword = /*#__PURE__*/new SymbolKeyword({\n  [TitleAnnotationId]: \"symbol\",\n  [DescriptionAnnotationId]: \"a symbol\"\n});\n/**\n * @category guards\n * @since 1.0.0\n */\nconst isSymbolKeyword = /*#__PURE__*/createASTGuard(\"SymbolKeyword\");\n/**\n * @category model\n * @since 1.0.0\n */\nclass ObjectKeyword {\n  annotations;\n  /**\n   * @since 1.0.0\n   */\n  _tag = \"ObjectKeyword\";\n  constructor(annotations = {}) {\n    this.annotations = annotations;\n  }\n  /**\n   * @since 1.0.0\n   */\n  toString(verbose = false) {\n    return formatKeyword(this, verbose);\n  }\n  /**\n   * @since 1.0.0\n   */\n  toJSON() {\n    return {\n      _tag: this._tag,\n      annotations: toJSONAnnotations(this.annotations)\n    };\n  }\n}\n/**\n * @category constructors\n * @since 1.0.0\n */\nconst objectKeyword = /*#__PURE__*/new ObjectKeyword({\n  [IdentifierAnnotationId]: \"object\",\n  [TitleAnnotationId]: \"object\",\n  [DescriptionAnnotationId]: \"an object in the TypeScript meaning, i.e. the `object` type\"\n});\n/**\n * @category guards\n * @since 1.0.0\n */\nconst isObjectKeyword = /*#__PURE__*/createASTGuard(\"ObjectKeyword\");\n/**\n * @category model\n * @since 1.0.0\n */\nclass Enums {\n  enums;\n  annotations;\n  /**\n   * @since 1.0.0\n   */\n  _tag = \"Enums\";\n  constructor(enums, annotations = {}) {\n    this.enums = enums;\n    this.annotations = annotations;\n  }\n  /**\n   * @since 1.0.0\n   */\n  toString(verbose = false) {\n    return effect_Option__WEBPACK_IMPORTED_MODULE_1__.getOrElse(getExpected(this, verbose), () => `<enum ${this.enums.length} value(s): ${this.enums.map((_, value) => JSON.stringify(value)).join(\" | \")}>`);\n  }\n  /**\n   * @since 1.0.0\n   */\n  toJSON() {\n    return {\n      _tag: this._tag,\n      enums: this.enums,\n      annotations: toJSONAnnotations(this.annotations)\n    };\n  }\n}\n/**\n * @category guards\n * @since 1.0.0\n */\nconst isEnums = /*#__PURE__*/createASTGuard(\"Enums\");\n/**\n * @category model\n * @since 1.0.0\n */\nclass TemplateLiteralSpan {\n  type;\n  literal;\n  constructor(type, literal) {\n    this.type = type;\n    this.literal = literal;\n  }\n  /**\n   * @since 1.0.0\n   */\n  toString() {\n    switch (this.type._tag) {\n      case \"StringKeyword\":\n        return \"${string}\";\n      case \"NumberKeyword\":\n        return \"${number}\";\n    }\n  }\n  /**\n   * @since 1.0.0\n   */\n  toJSON() {\n    return {\n      type: this.type.toJSON(),\n      literal: this.literal\n    };\n  }\n}\n/**\n * @category model\n * @since 1.0.0\n */\nclass TemplateLiteral {\n  head;\n  spans;\n  annotations;\n  static make = (head, spans, annotations = {}) => effect_Array__WEBPACK_IMPORTED_MODULE_4__.isNonEmptyReadonlyArray(spans) ? new TemplateLiteral(head, spans, annotations) : new Literal(head);\n  /**\n   * @since 1.0.0\n   */\n  _tag = \"TemplateLiteral\";\n  constructor(head, spans, annotations = {}) {\n    this.head = head;\n    this.spans = spans;\n    this.annotations = annotations;\n  }\n  /**\n   * @since 1.0.0\n   */\n  toString(verbose = false) {\n    return effect_Option__WEBPACK_IMPORTED_MODULE_1__.getOrElse(getExpected(this, verbose), () => formatTemplateLiteral(this));\n  }\n  /**\n   * @since 1.0.0\n   */\n  toJSON() {\n    return {\n      _tag: this._tag,\n      head: this.head,\n      spans: this.spans.map(span => span.toJSON()),\n      annotations: toJSONAnnotations(this.annotations)\n    };\n  }\n}\nconst formatTemplateLiteral = ast => \"`\" + ast.head + ast.spans.map(span => String(span) + span.literal).join(\"\") + \"`\";\n/**\n * @category guards\n * @since 1.0.0\n */\nconst isTemplateLiteral = /*#__PURE__*/createASTGuard(\"TemplateLiteral\");\n/**\n * @category model\n * @since 1.0.0\n */\nclass Element {\n  type;\n  isOptional;\n  constructor(type, isOptional) {\n    this.type = type;\n    this.isOptional = isOptional;\n  }\n  /**\n   * @since 1.0.0\n   */\n  toJSON() {\n    return {\n      type: this.type.toJSON(),\n      isOptional: this.isOptional\n    };\n  }\n  /**\n   * @since 1.0.0\n   */\n  toString() {\n    return String(this.type) + (this.isOptional ? \"?\" : \"\");\n  }\n}\n/**\n * @category model\n * @since 1.0.0\n */\nclass TupleType {\n  elements;\n  rest;\n  isReadonly;\n  annotations;\n  /**\n   * @since 1.0.0\n   */\n  _tag = \"TupleType\";\n  constructor(elements, rest, isReadonly, annotations = {}) {\n    this.elements = elements;\n    this.rest = rest;\n    this.isReadonly = isReadonly;\n    this.annotations = annotations;\n    let hasOptionalElement = false;\n    let hasIllegalRequiredElement = false;\n    for (const e of elements) {\n      if (e.isOptional) {\n        hasOptionalElement = true;\n      } else if (hasOptionalElement) {\n        hasIllegalRequiredElement = true;\n        break;\n      }\n    }\n    if (hasIllegalRequiredElement || hasOptionalElement && rest.length > 1) {\n      throw new Error(_internal_errors_js__WEBPACK_IMPORTED_MODULE_5__.getRequiredElementFollowinAnOptionalElementErrorMessage);\n    }\n  }\n  /**\n   * @since 1.0.0\n   */\n  toString(verbose = false) {\n    return effect_Option__WEBPACK_IMPORTED_MODULE_1__.getOrElse(getExpected(this, verbose), () => formatTuple(this));\n  }\n  /**\n   * @since 1.0.0\n   */\n  toJSON() {\n    return {\n      _tag: this._tag,\n      elements: this.elements.map(e => e.toJSON()),\n      rest: this.rest.map(ast => ast.toJSON()),\n      isReadonly: this.isReadonly,\n      annotations: toJSONAnnotations(this.annotations)\n    };\n  }\n}\nconst formatTuple = ast => {\n  const formattedElements = ast.elements.map(String).join(\", \");\n  return effect_Array__WEBPACK_IMPORTED_MODULE_4__.matchLeft(ast.rest, {\n    onEmpty: () => `readonly [${formattedElements}]`,\n    onNonEmpty: (head, tail) => {\n      const formattedHead = String(head);\n      const wrappedHead = formattedHead.includes(\" | \") ? `(${formattedHead})` : formattedHead;\n      if (tail.length > 0) {\n        const formattedTail = tail.map(String).join(\", \");\n        if (ast.elements.length > 0) {\n          return `readonly [${formattedElements}, ...${wrappedHead}[], ${formattedTail}]`;\n        } else {\n          return `readonly [...${wrappedHead}[], ${formattedTail}]`;\n        }\n      } else {\n        if (ast.elements.length > 0) {\n          return `readonly [${formattedElements}, ...${wrappedHead}[]]`;\n        } else {\n          return `ReadonlyArray<${formattedHead}>`;\n        }\n      }\n    }\n  });\n};\n/**\n * @category guards\n * @since 1.0.0\n */\nconst isTupleType = /*#__PURE__*/createASTGuard(\"TupleType\");\n/**\n * @category model\n * @since 1.0.0\n */\nclass PropertySignature {\n  name;\n  type;\n  isOptional;\n  isReadonly;\n  annotations;\n  constructor(name, type, isOptional, isReadonly, annotations = {}) {\n    this.name = name;\n    this.type = type;\n    this.isOptional = isOptional;\n    this.isReadonly = isReadonly;\n    this.annotations = annotations;\n  }\n  /**\n   * @since 1.0.0\n   */\n  toJSON() {\n    return {\n      name: String(this.name),\n      type: this.type.toJSON(),\n      isOptional: this.isOptional,\n      isReadonly: this.isReadonly,\n      annotations: toJSONAnnotations(this.annotations)\n    };\n  }\n}\n/**\n * @since 1.0.0\n */\nconst isParameter = ast => {\n  switch (ast._tag) {\n    case \"StringKeyword\":\n    case \"SymbolKeyword\":\n    case \"TemplateLiteral\":\n      return true;\n    case \"Refinement\":\n      return isParameter(ast.from);\n  }\n  return false;\n};\n/**\n * @category model\n * @since 1.0.0\n */\nclass IndexSignature {\n  type;\n  isReadonly;\n  /**\n   * @since 1.0.0\n   */\n  parameter;\n  constructor(parameter, type, isReadonly) {\n    this.type = type;\n    this.isReadonly = isReadonly;\n    if (isParameter(parameter)) {\n      this.parameter = parameter;\n    } else {\n      throw new Error(_internal_errors_js__WEBPACK_IMPORTED_MODULE_5__.getIndexSignatureParameterErrorMessage);\n    }\n  }\n  /**\n   * @since 1.0.0\n   */\n  toJSON() {\n    return {\n      parameter: this.parameter.toJSON(),\n      type: this.type.toJSON(),\n      isReadonly: this.isReadonly\n    };\n  }\n}\n/**\n * @category model\n * @since 1.0.0\n */\nclass TypeLiteral {\n  annotations;\n  /**\n   * @since 1.0.0\n   */\n  _tag = \"TypeLiteral\";\n  /**\n   * @since 1.0.0\n   */\n  propertySignatures;\n  /**\n   * @since 1.0.0\n   */\n  indexSignatures;\n  constructor(propertySignatures, indexSignatures, annotations = {}) {\n    this.annotations = annotations;\n    // check for duplicate property signatures\n    const keys = {};\n    for (let i = 0; i < propertySignatures.length; i++) {\n      const name = propertySignatures[i].name;\n      if (Object.prototype.hasOwnProperty.call(keys, name)) {\n        throw new Error(_internal_errors_js__WEBPACK_IMPORTED_MODULE_5__.getDuplicatePropertySignatureErrorMessage(name));\n      }\n      keys[name] = null;\n    }\n    // check for duplicate index signatures\n    const parameters = {\n      string: false,\n      symbol: false\n    };\n    for (let i = 0; i < indexSignatures.length; i++) {\n      const parameter = getParameterBase(indexSignatures[i].parameter);\n      if (isStringKeyword(parameter)) {\n        if (parameters.string) {\n          throw new Error(_internal_errors_js__WEBPACK_IMPORTED_MODULE_5__.getDuplicateIndexSignatureErrorMessage(\"string\"));\n        }\n        parameters.string = true;\n      } else if (isSymbolKeyword(parameter)) {\n        if (parameters.symbol) {\n          throw new Error(_internal_errors_js__WEBPACK_IMPORTED_MODULE_5__.getDuplicateIndexSignatureErrorMessage(\"symbol\"));\n        }\n        parameters.symbol = true;\n      }\n    }\n    this.propertySignatures = sortPropertySignatures(propertySignatures);\n    this.indexSignatures = sortIndexSignatures(indexSignatures);\n  }\n  /**\n   * @since 1.0.0\n   */\n  toString(verbose = false) {\n    return effect_Option__WEBPACK_IMPORTED_MODULE_1__.getOrElse(getExpected(this, verbose), () => formatTypeLiteral(this));\n  }\n  /**\n   * @since 1.0.0\n   */\n  toJSON() {\n    return {\n      _tag: this._tag,\n      propertySignatures: this.propertySignatures.map(ps => ps.toJSON()),\n      indexSignatures: this.indexSignatures.map(ps => ps.toJSON()),\n      annotations: toJSONAnnotations(this.annotations)\n    };\n  }\n}\nconst formatTypeLiteral = ast => {\n  const formattedPropertySignatures = ast.propertySignatures.map(ps => String(ps.name) + (ps.isOptional ? \"?\" : \"\") + \": \" + ps.type).join(\"; \");\n  if (ast.indexSignatures.length > 0) {\n    const formattedIndexSignatures = ast.indexSignatures.map(is => `[x: ${getParameterBase(is.parameter)}]: ${is.type}`).join(\"; \");\n    if (ast.propertySignatures.length > 0) {\n      return `{ ${formattedPropertySignatures}; ${formattedIndexSignatures} }`;\n    } else {\n      return `{ ${formattedIndexSignatures} }`;\n    }\n  } else {\n    if (ast.propertySignatures.length > 0) {\n      return `{ ${formattedPropertySignatures} }`;\n    } else {\n      return \"{}\";\n    }\n  }\n};\n/**\n * @category guards\n * @since 1.0.0\n */\nconst isTypeLiteral = /*#__PURE__*/createASTGuard(\"TypeLiteral\");\nconst removeNevers = candidates => candidates.filter(ast => !(ast === neverKeyword));\nconst sortCandidates = /*#__PURE__*/effect_Array__WEBPACK_IMPORTED_MODULE_4__.sort( /*#__PURE__*/effect_Order__WEBPACK_IMPORTED_MODULE_6__.mapInput(effect_Number__WEBPACK_IMPORTED_MODULE_7__.Order, ast => {\n  switch (ast._tag) {\n    case \"AnyKeyword\":\n      return 0;\n    case \"UnknownKeyword\":\n      return 1;\n    case \"ObjectKeyword\":\n      return 2;\n    case \"StringKeyword\":\n    case \"NumberKeyword\":\n    case \"BooleanKeyword\":\n    case \"BigIntKeyword\":\n    case \"SymbolKeyword\":\n      return 3;\n  }\n  return 4;\n}));\nconst literalMap = {\n  string: \"StringKeyword\",\n  number: \"NumberKeyword\",\n  boolean: \"BooleanKeyword\",\n  bigint: \"BigIntKeyword\"\n};\n/** @internal */\nconst flatten = candidates => effect_Array__WEBPACK_IMPORTED_MODULE_4__.flatMap(candidates, ast => isUnion(ast) ? flatten(ast.types) : [ast]);\n/** @internal */\nconst unify = candidates => {\n  const cs = sortCandidates(candidates);\n  const out = [];\n  const uniques = {};\n  const literals = [];\n  for (const ast of cs) {\n    switch (ast._tag) {\n      case \"NeverKeyword\":\n        break;\n      case \"AnyKeyword\":\n        return [anyKeyword];\n      case \"UnknownKeyword\":\n        return [unknownKeyword];\n      // uniques\n      case \"ObjectKeyword\":\n      case \"UndefinedKeyword\":\n      case \"VoidKeyword\":\n      case \"StringKeyword\":\n      case \"NumberKeyword\":\n      case \"BooleanKeyword\":\n      case \"BigIntKeyword\":\n      case \"SymbolKeyword\":\n        {\n          if (!uniques[ast._tag]) {\n            uniques[ast._tag] = ast;\n            out.push(ast);\n          }\n          break;\n        }\n      case \"Literal\":\n        {\n          const type = typeof ast.literal;\n          switch (type) {\n            case \"string\":\n            case \"number\":\n            case \"bigint\":\n            case \"boolean\":\n              {\n                const _tag = literalMap[type];\n                if (!uniques[_tag] && !literals.includes(ast.literal)) {\n                  literals.push(ast.literal);\n                  out.push(ast);\n                }\n                break;\n              }\n            // null\n            case \"object\":\n              {\n                if (!literals.includes(ast.literal)) {\n                  literals.push(ast.literal);\n                  out.push(ast);\n                }\n                break;\n              }\n          }\n          break;\n        }\n      case \"UniqueSymbol\":\n        {\n          if (!uniques[\"SymbolKeyword\"] && !literals.includes(ast.symbol)) {\n            literals.push(ast.symbol);\n            out.push(ast);\n          }\n          break;\n        }\n      case \"TupleType\":\n        {\n          if (!uniques[\"ObjectKeyword\"]) {\n            out.push(ast);\n          }\n          break;\n        }\n      case \"TypeLiteral\":\n        {\n          if (ast.propertySignatures.length === 0 && ast.indexSignatures.length === 0) {\n            if (!uniques[\"{}\"]) {\n              uniques[\"{}\"] = ast;\n              out.push(ast);\n            }\n          } else if (!uniques[\"ObjectKeyword\"]) {\n            out.push(ast);\n          }\n          break;\n        }\n      default:\n        out.push(ast);\n    }\n  }\n  return out;\n};\n/**\n * @category model\n * @since 1.0.0\n */\nclass Union {\n  types;\n  annotations;\n  static make = (candidates, annotations) => {\n    const types = [];\n    const memo = new Set();\n    for (let i = 0; i < candidates.length; i++) {\n      const ast = candidates[i];\n      if (ast === neverKeyword || memo.has(ast)) {\n        continue;\n      }\n      memo.add(ast);\n      types.push(ast);\n    }\n    return Union.union(types, annotations);\n  };\n  /** @internal */\n  static members = (candidates, annotations) => {\n    return Union.union(removeNevers(candidates), annotations);\n  };\n  /** @internal */\n  static unify = (candidates, annotations) => {\n    return Union.union(unify(flatten(candidates)), annotations);\n  };\n  /** @internal */\n  static union = (types, annotations) => {\n    return isMembers(types) ? new Union(types, annotations) : types.length === 1 ? types[0] : neverKeyword;\n  };\n  /**\n   * @since 1.0.0\n   */\n  _tag = \"Union\";\n  constructor(types, annotations = {}) {\n    this.types = types;\n    this.annotations = annotations;\n  }\n  /**\n   * @since 1.0.0\n   */\n  toString(verbose = false) {\n    return effect_Option__WEBPACK_IMPORTED_MODULE_1__.getOrElse(getExpected(this, verbose), () => this.types.map(String).join(\" | \"));\n  }\n  /**\n   * @since 1.0.0\n   */\n  toJSON() {\n    return {\n      _tag: this._tag,\n      types: this.types.map(ast => ast.toJSON()),\n      annotations: toJSONAnnotations(this.annotations)\n    };\n  }\n}\n/** @internal */\nconst mapMembers = (members, f) => members.map(f);\n/** @internal */\nconst isMembers = as => as.length > 1;\n/**\n * @category guards\n * @since 1.0.0\n */\nconst isUnion = /*#__PURE__*/createASTGuard(\"Union\");\nconst toJSONMemoMap = /*#__PURE__*/(0,effect_GlobalValue__WEBPACK_IMPORTED_MODULE_8__.globalValue)( /*#__PURE__*/Symbol.for(\"@effect/schema/AST/toJSONMemoMap\"), () => new WeakMap());\n/**\n * @category model\n * @since 1.0.0\n */\nclass Suspend {\n  f;\n  annotations;\n  /**\n   * @since 1.0.0\n   */\n  _tag = \"Suspend\";\n  constructor(f, annotations = {}) {\n    this.f = f;\n    this.annotations = annotations;\n    this.f = _internal_util_js__WEBPACK_IMPORTED_MODULE_2__.memoizeThunk(f);\n  }\n  /**\n   * @since 1.0.0\n   */\n  toString(verbose = false) {\n    return getExpected(this, verbose).pipe(effect_Option__WEBPACK_IMPORTED_MODULE_1__.orElse(() => effect_Option__WEBPACK_IMPORTED_MODULE_1__.flatMap(effect_Option__WEBPACK_IMPORTED_MODULE_1__.liftThrowable(this.f)(), ast => getExpected(ast, verbose))), effect_Option__WEBPACK_IMPORTED_MODULE_1__.getOrElse(() => \"<suspended schema>\"));\n  }\n  /**\n   * @since 1.0.0\n   */\n  toJSON() {\n    const ast = this.f();\n    let out = toJSONMemoMap.get(ast);\n    if (out) {\n      return out;\n    }\n    toJSONMemoMap.set(ast, {\n      _tag: this._tag\n    });\n    out = {\n      _tag: this._tag,\n      ast: ast.toJSON(),\n      annotations: toJSONAnnotations(this.annotations)\n    };\n    toJSONMemoMap.set(ast, out);\n    return out;\n  }\n}\n/**\n * @category guards\n * @since 1.0.0\n */\nconst isSuspend = /*#__PURE__*/createASTGuard(\"Suspend\");\n/**\n * @category model\n * @since 1.0.0\n */\nclass Refinement {\n  from;\n  filter;\n  annotations;\n  /**\n   * @since 1.0.0\n   */\n  _tag = \"Refinement\";\n  constructor(from, filter, annotations = {}) {\n    this.from = from;\n    this.filter = filter;\n    this.annotations = annotations;\n  }\n  /**\n   * @since 1.0.0\n   */\n  toString(verbose = false) {\n    return effect_Option__WEBPACK_IMPORTED_MODULE_1__.getOrElse(getExpected(this, verbose), () => \"<refinement schema>\");\n  }\n  /**\n   * @since 1.0.0\n   */\n  toJSON() {\n    return {\n      _tag: this._tag,\n      from: this.from.toJSON(),\n      annotations: toJSONAnnotations(this.annotations)\n    };\n  }\n}\n/**\n * @category guards\n * @since 1.0.0\n */\nconst isRefinement = /*#__PURE__*/createASTGuard(\"Refinement\");\n/**\n * @since 1.0.0\n */\nconst defaultParseOption = {};\n/**\n * @category model\n * @since 1.0.0\n */\nclass Transformation {\n  from;\n  to;\n  transformation;\n  annotations;\n  /**\n   * @since 1.0.0\n   */\n  _tag = \"Transformation\";\n  constructor(from, to, transformation, annotations = {}) {\n    this.from = from;\n    this.to = to;\n    this.transformation = transformation;\n    this.annotations = annotations;\n  }\n  /**\n   * @since 1.0.0\n   */\n  toString(verbose = false) {\n    return effect_Option__WEBPACK_IMPORTED_MODULE_1__.getOrElse(getExpected(this, verbose), () => `(${String(this.from)} <-> ${String(this.to)})`);\n  }\n  /**\n   * @since 1.0.0\n   */\n  toJSON() {\n    return {\n      _tag: this._tag,\n      from: this.from.toJSON(),\n      to: this.to.toJSON(),\n      annotations: toJSONAnnotations(this.annotations)\n    };\n  }\n}\n/**\n * @category guards\n * @since 1.0.0\n */\nconst isTransformation = /*#__PURE__*/createASTGuard(\"Transformation\");\n/**\n * @category model\n * @since 1.0.0\n */\nclass FinalTransformation {\n  decode;\n  encode;\n  /**\n   * @since 1.0.0\n   */\n  _tag = \"FinalTransformation\";\n  constructor(decode, encode) {\n    this.decode = decode;\n    this.encode = encode;\n  }\n}\nconst createTransformationGuard = tag => ast => ast._tag === tag;\n/**\n * @category guards\n * @since 1.0.0\n */\nconst isFinalTransformation = /*#__PURE__*/createTransformationGuard(\"FinalTransformation\");\n/**\n * @category model\n * @since 1.0.0\n */\nclass ComposeTransformation {\n  /**\n   * @since 1.0.0\n   */\n  _tag = \"ComposeTransformation\";\n}\n/**\n * @category constructors\n * @since 1.0.0\n */\nconst composeTransformation = /*#__PURE__*/new ComposeTransformation();\n/**\n * @category guards\n * @since 1.0.0\n */\nconst isComposeTransformation = /*#__PURE__*/createTransformationGuard(\"ComposeTransformation\");\n/**\n * Represents a `PropertySignature -> PropertySignature` transformation\n *\n * The semantic of `decode` is:\n * - `none()` represents the absence of the key/value pair\n * - `some(value)` represents the presence of the key/value pair\n *\n * The semantic of `encode` is:\n * - `none()` you don't want to output the key/value pair\n * - `some(value)` you want to output the key/value pair\n *\n * @category model\n * @since 1.0.0\n */\nclass PropertySignatureTransformation {\n  from;\n  to;\n  decode;\n  encode;\n  constructor(from, to, decode, encode) {\n    this.from = from;\n    this.to = to;\n    this.decode = decode;\n    this.encode = encode;\n  }\n}\nconst isRenamingPropertySignatureTransformation = t => t.decode === effect_Function__WEBPACK_IMPORTED_MODULE_0__.identity && t.encode === effect_Function__WEBPACK_IMPORTED_MODULE_0__.identity;\n/**\n * @category model\n * @since 1.0.0\n */\nclass TypeLiteralTransformation {\n  propertySignatureTransformations;\n  /**\n   * @since 1.0.0\n   */\n  _tag = \"TypeLiteralTransformation\";\n  constructor(propertySignatureTransformations) {\n    this.propertySignatureTransformations = propertySignatureTransformations;\n    // check for duplicate property signature transformations\n    const fromKeys = {};\n    const toKeys = {};\n    for (const pst of propertySignatureTransformations) {\n      const from = pst.from;\n      if (fromKeys[from]) {\n        throw new Error(_internal_errors_js__WEBPACK_IMPORTED_MODULE_5__.getDuplicatePropertySignatureTransformationErrorMessage(from));\n      }\n      fromKeys[from] = true;\n      const to = pst.to;\n      if (toKeys[to]) {\n        throw new Error(_internal_errors_js__WEBPACK_IMPORTED_MODULE_5__.getDuplicatePropertySignatureTransformationErrorMessage(to));\n      }\n      toKeys[to] = true;\n    }\n  }\n}\n/**\n * @category guards\n * @since 1.0.0\n */\nconst isTypeLiteralTransformation = /*#__PURE__*/createTransformationGuard(\"TypeLiteralTransformation\");\n// -------------------------------------------------------------------------------------\n// API\n// -------------------------------------------------------------------------------------\n/**\n * Adds a group of annotations, potentially overwriting existing annotations.\n *\n * @since 1.0.0\n */\nconst annotations = (ast, annotations) => {\n  const d = Object.getOwnPropertyDescriptors(ast);\n  d.annotations.value = {\n    ...ast.annotations,\n    ...annotations\n  };\n  return Object.create(Object.getPrototypeOf(ast), d);\n};\n/**\n * Equivalent at runtime to the TypeScript type-level `keyof` operator.\n *\n * @since 1.0.0\n */\nconst keyof = ast => Union.unify(_keyof(ast));\nconst STRING_KEYWORD_PATTERN = \".*\";\nconst NUMBER_KEYWORD_PATTERN = \"[+-]?\\\\d*\\\\.?\\\\d+(?:[Ee][+-]?\\\\d+)?\";\n/**\n * @since 1.0.0\n */\nconst getTemplateLiteralRegExp = ast => {\n  let pattern = `^${effect_RegExp__WEBPACK_IMPORTED_MODULE_9__.escape(ast.head)}`;\n  for (const span of ast.spans) {\n    if (isStringKeyword(span.type)) {\n      pattern += STRING_KEYWORD_PATTERN;\n    } else if (isNumberKeyword(span.type)) {\n      pattern += NUMBER_KEYWORD_PATTERN;\n    }\n    pattern += effect_RegExp__WEBPACK_IMPORTED_MODULE_9__.escape(span.literal);\n  }\n  pattern += \"$\";\n  return new RegExp(pattern);\n};\n/**\n * @since 1.0.0\n */\nconst getPropertySignatures = ast => {\n  switch (ast._tag) {\n    case \"Declaration\":\n      {\n        const annotation = getSurrogateAnnotation(ast);\n        if (effect_Option__WEBPACK_IMPORTED_MODULE_1__.isSome(annotation)) {\n          return getPropertySignatures(annotation.value);\n        }\n        break;\n      }\n    case \"TypeLiteral\":\n      return ast.propertySignatures.slice();\n    case \"Suspend\":\n      return getPropertySignatures(ast.f());\n  }\n  return getPropertyKeys(ast).map(name => getPropertyKeyIndexedAccess(ast, name));\n};\n/** @internal */\nconst getNumberIndexedAccess = ast => {\n  switch (ast._tag) {\n    case \"TupleType\":\n      {\n        let hasOptional = false;\n        let out = [];\n        for (const e of ast.elements) {\n          if (e.isOptional) {\n            hasOptional = true;\n          }\n          out.push(e.type);\n        }\n        if (hasOptional) {\n          out.push(undefinedKeyword);\n        }\n        out = out.concat(ast.rest);\n        return Union.make(out);\n      }\n    case \"Refinement\":\n      return getNumberIndexedAccess(ast.from);\n    case \"Union\":\n      return Union.make(ast.types.map(getNumberIndexedAccess));\n    case \"Suspend\":\n      return getNumberIndexedAccess(ast.f());\n  }\n  throw new Error(_internal_errors_js__WEBPACK_IMPORTED_MODULE_5__.getAPIErrorMessage(\"NumberIndexedAccess\", `unsupported schema (${ast})`));\n};\n/** @internal */\nconst getPropertyKeyIndexedAccess = (ast, name) => {\n  switch (ast._tag) {\n    case \"Declaration\":\n      {\n        const annotation = getSurrogateAnnotation(ast);\n        if (effect_Option__WEBPACK_IMPORTED_MODULE_1__.isSome(annotation)) {\n          return getPropertyKeyIndexedAccess(annotation.value, name);\n        }\n        break;\n      }\n    case \"TypeLiteral\":\n      {\n        const ops = effect_Array__WEBPACK_IMPORTED_MODULE_4__.findFirst(ast.propertySignatures, ps => ps.name === name);\n        if (effect_Option__WEBPACK_IMPORTED_MODULE_1__.isSome(ops)) {\n          return ops.value;\n        } else {\n          if (effect_Predicate__WEBPACK_IMPORTED_MODULE_3__.isString(name)) {\n            for (const is of ast.indexSignatures) {\n              const parameterBase = getParameterBase(is.parameter);\n              switch (parameterBase._tag) {\n                case \"TemplateLiteral\":\n                  {\n                    const regex = getTemplateLiteralRegExp(parameterBase);\n                    if (regex.test(name)) {\n                      return new PropertySignature(name, is.type, false, false);\n                    }\n                    break;\n                  }\n                case \"StringKeyword\":\n                  return new PropertySignature(name, is.type, false, false);\n              }\n            }\n          } else if (effect_Predicate__WEBPACK_IMPORTED_MODULE_3__.isSymbol(name)) {\n            for (const is of ast.indexSignatures) {\n              const parameterBase = getParameterBase(is.parameter);\n              if (isSymbolKeyword(parameterBase)) {\n                return new PropertySignature(name, is.type, false, false);\n              }\n            }\n          }\n        }\n        break;\n      }\n    case \"Union\":\n      return new PropertySignature(name, Union.make(ast.types.map(ast => getPropertyKeyIndexedAccess(ast, name).type)), false, true);\n    case \"Suspend\":\n      return getPropertyKeyIndexedAccess(ast.f(), name);\n  }\n  return new PropertySignature(name, neverKeyword, false, true);\n};\nconst getPropertyKeys = ast => {\n  switch (ast._tag) {\n    case \"Declaration\":\n      {\n        const annotation = getSurrogateAnnotation(ast);\n        if (effect_Option__WEBPACK_IMPORTED_MODULE_1__.isSome(annotation)) {\n          return getPropertyKeys(annotation.value);\n        }\n        break;\n      }\n    case \"TypeLiteral\":\n      return ast.propertySignatures.map(ps => ps.name);\n    case \"Suspend\":\n      return getPropertyKeys(ast.f());\n    case \"Union\":\n      return ast.types.slice(1).reduce((out, ast) => effect_Array__WEBPACK_IMPORTED_MODULE_4__.intersection(out, getPropertyKeys(ast)), getPropertyKeys(ast.types[0]));\n    case \"Transformation\":\n      return getPropertyKeys(ast.to);\n  }\n  return [];\n};\n/** @internal */\nconst record = (key, value) => {\n  const propertySignatures = [];\n  const indexSignatures = [];\n  const go = key => {\n    switch (key._tag) {\n      case \"NeverKeyword\":\n        break;\n      case \"StringKeyword\":\n      case \"SymbolKeyword\":\n      case \"TemplateLiteral\":\n      case \"Refinement\":\n        indexSignatures.push(new IndexSignature(key, value, true));\n        break;\n      case \"Literal\":\n        if (effect_Predicate__WEBPACK_IMPORTED_MODULE_3__.isString(key.literal) || effect_Predicate__WEBPACK_IMPORTED_MODULE_3__.isNumber(key.literal)) {\n          propertySignatures.push(new PropertySignature(key.literal, value, false, true));\n        } else {\n          throw new Error(_internal_errors_js__WEBPACK_IMPORTED_MODULE_5__.getAPIErrorMessage(\"Record\", `unsupported literal (${_internal_util_js__WEBPACK_IMPORTED_MODULE_2__.formatUnknown(key.literal)})`));\n        }\n        break;\n      case \"UniqueSymbol\":\n        propertySignatures.push(new PropertySignature(key.symbol, value, false, true));\n        break;\n      case \"Union\":\n        key.types.forEach(go);\n        break;\n      default:\n        throw new Error(_internal_errors_js__WEBPACK_IMPORTED_MODULE_5__.getAPIErrorMessage(\"Record\", `unsupported key schema (${key})`));\n    }\n  };\n  go(key);\n  return {\n    propertySignatures,\n    indexSignatures\n  };\n};\n/**\n * Equivalent at runtime to the built-in TypeScript utility type `Pick`.\n *\n * @since 1.0.0\n */\nconst pick = (ast, keys) => {\n  if (isTransformation(ast)) {\n    switch (ast.transformation._tag) {\n      case \"ComposeTransformation\":\n        return new Transformation(pick(ast.from, keys), pick(ast.to, keys), composeTransformation);\n      case \"TypeLiteralTransformation\":\n        {\n          const ts = [];\n          const fromKeys = [];\n          for (const k of keys) {\n            const t = ast.transformation.propertySignatureTransformations.find(t => t.to === k);\n            if (t) {\n              ts.push(t);\n              fromKeys.push(t.from);\n            } else {\n              fromKeys.push(k);\n            }\n          }\n          return new Transformation(pick(ast.from, fromKeys), pick(ast.to, keys), effect_Array__WEBPACK_IMPORTED_MODULE_4__.isNonEmptyReadonlyArray(ts) ? new TypeLiteralTransformation(ts) : composeTransformation);\n        }\n      case \"FinalTransformation\":\n        {\n          const annotation = getSurrogateAnnotation(ast);\n          if (effect_Option__WEBPACK_IMPORTED_MODULE_1__.isSome(annotation)) {\n            return pick(annotation.value, keys);\n          }\n          throw new Error(_internal_errors_js__WEBPACK_IMPORTED_MODULE_5__.getAPIErrorMessage(\"Pick\", \"cannot handle this kind of transformation\"));\n        }\n    }\n  }\n  return new TypeLiteral(keys.map(key => getPropertyKeyIndexedAccess(ast, key)), []);\n};\n/**\n * Equivalent at runtime to the built-in TypeScript utility type `Omit`.\n *\n * @since 1.0.0\n */\nconst omit = (ast, keys) => pick(ast, getPropertyKeys(ast).filter(name => !keys.includes(name)));\n/** @internal */\nconst orUndefined = ast => Union.make([ast, undefinedKeyword]);\n/**\n * Equivalent at runtime to the built-in TypeScript utility type `Partial`.\n *\n * @since 1.0.0\n */\nconst partial = (ast, options) => {\n  const exact = options?.exact === true;\n  switch (ast._tag) {\n    case \"TupleType\":\n      return new TupleType(ast.elements.map(e => new Element(exact ? e.type : orUndefined(e.type), true)), effect_Array__WEBPACK_IMPORTED_MODULE_4__.match(ast.rest, {\n        onEmpty: () => ast.rest,\n        onNonEmpty: rest => [Union.make([...rest, undefinedKeyword])]\n      }), ast.isReadonly);\n    case \"TypeLiteral\":\n      return new TypeLiteral(ast.propertySignatures.map(ps => new PropertySignature(ps.name, exact ? ps.type : orUndefined(ps.type), true, ps.isReadonly, ps.annotations)), ast.indexSignatures.map(is => new IndexSignature(is.parameter, orUndefined(is.type), is.isReadonly)));\n    case \"Union\":\n      return Union.make(ast.types.map(member => partial(member, options)));\n    case \"Suspend\":\n      return new Suspend(() => partial(ast.f(), options));\n    case \"Declaration\":\n      throw new Error(_internal_errors_js__WEBPACK_IMPORTED_MODULE_5__.getAPIErrorMessage(\"partial\", \"cannot handle declarations\"));\n    case \"Refinement\":\n      throw new Error(_internal_errors_js__WEBPACK_IMPORTED_MODULE_5__.getAPIErrorMessage(\"partial\", \"cannot handle refinements\"));\n    case \"Transformation\":\n      {\n        if (isTypeLiteralTransformation(ast.transformation) && ast.transformation.propertySignatureTransformations.every(isRenamingPropertySignatureTransformation)) {\n          return new Transformation(partial(ast.from, options), partial(ast.to, options), ast.transformation);\n        }\n        throw new Error(_internal_errors_js__WEBPACK_IMPORTED_MODULE_5__.getAPIErrorMessage(\"partial\", \"cannot handle transformations\"));\n      }\n  }\n  return ast;\n};\n/**\n * Equivalent at runtime to the built-in TypeScript utility type `Required`.\n *\n * @since 1.0.0\n */\nconst required = ast => {\n  switch (ast._tag) {\n    case \"TupleType\":\n      return new TupleType(ast.elements.map(e => new Element(e.type, false)), ast.rest, ast.isReadonly);\n    case \"TypeLiteral\":\n      return new TypeLiteral(ast.propertySignatures.map(f => new PropertySignature(f.name, f.type, false, f.isReadonly, f.annotations)), ast.indexSignatures);\n    case \"Union\":\n      return Union.make(ast.types.map(member => required(member)));\n    case \"Suspend\":\n      return new Suspend(() => required(ast.f()));\n    case \"Declaration\":\n      throw new Error(_internal_errors_js__WEBPACK_IMPORTED_MODULE_5__.getAPIErrorMessage(\"required\", \"cannot handle declarations\"));\n    case \"Refinement\":\n      throw new Error(_internal_errors_js__WEBPACK_IMPORTED_MODULE_5__.getAPIErrorMessage(\"required\", \"cannot handle refinements\"));\n    case \"Transformation\":\n      {\n        if (isTypeLiteralTransformation(ast.transformation) && ast.transformation.propertySignatureTransformations.every(isRenamingPropertySignatureTransformation)) {\n          return new Transformation(required(ast.from), required(ast.to), ast.transformation);\n        }\n        throw new Error(_internal_errors_js__WEBPACK_IMPORTED_MODULE_5__.getAPIErrorMessage(\"required\", \"cannot handle transformations\"));\n      }\n  }\n  return ast;\n};\n/**\n * Creates a new AST with shallow mutability applied to its properties.\n *\n * @param ast - The original AST to make properties mutable (shallowly).\n *\n * @since 1.0.0\n */\nconst mutable = ast => {\n  switch (ast._tag) {\n    case \"TupleType\":\n      return ast.isReadonly === false ? ast : new TupleType(ast.elements, ast.rest, false, ast.annotations);\n    case \"TypeLiteral\":\n      {\n        const propertySignatures = changeMap(ast.propertySignatures, ps => ps.isReadonly === false ? ps : new PropertySignature(ps.name, ps.type, ps.isOptional, false, ps.annotations));\n        const indexSignatures = changeMap(ast.indexSignatures, is => is.isReadonly === false ? is : new IndexSignature(is.parameter, is.type, false));\n        return propertySignatures === ast.propertySignatures && indexSignatures === ast.indexSignatures ? ast : new TypeLiteral(propertySignatures, indexSignatures, ast.annotations);\n      }\n    case \"Union\":\n      {\n        const types = changeMap(ast.types, mutable);\n        return types === ast.types ? ast : Union.make(types, ast.annotations);\n      }\n    case \"Suspend\":\n      return new Suspend(() => mutable(ast.f()), ast.annotations);\n    case \"Refinement\":\n      {\n        const from = mutable(ast.from);\n        return from === ast.from ? ast : new Refinement(from, ast.filter, ast.annotations);\n      }\n    case \"Transformation\":\n      {\n        const from = mutable(ast.from);\n        const to = mutable(ast.to);\n        return from === ast.from && to === ast.to ? ast : new Transformation(from, to, ast.transformation, ast.annotations);\n      }\n  }\n  return ast;\n};\n/**\n * @since 1.0.0\n */\nconst getCompiler = match => {\n  const compile = ast => match[ast._tag](ast, compile);\n  return compile;\n};\n/** @internal */\nconst getToPropertySignatures = ps => ps.map(p => new PropertySignature(p.name, typeAST(p.type), p.isOptional, p.isReadonly, p.annotations));\n/** @internal */\nconst getToIndexSignatures = ps => ps.map(is => new IndexSignature(is.parameter, typeAST(is.type), is.isReadonly));\n/**\n * @since 1.0.0\n */\nconst typeAST = ast => {\n  switch (ast._tag) {\n    case \"Declaration\":\n      {\n        const typeParameters = changeMap(ast.typeParameters, typeAST);\n        return typeParameters === ast.typeParameters ? ast : new Declaration(typeParameters, ast.decodeUnknown, ast.encodeUnknown, ast.annotations);\n      }\n    case \"TupleType\":\n      {\n        const elements = changeMap(ast.elements, e => {\n          const type = typeAST(e.type);\n          return type === e.type ? e : new Element(type, e.isOptional);\n        });\n        const rest = changeMap(ast.rest, typeAST);\n        return elements === ast.elements && rest === ast.rest ? ast : new TupleType(elements, rest, ast.isReadonly, ast.annotations);\n      }\n    case \"TypeLiteral\":\n      {\n        const propertySignatures = changeMap(ast.propertySignatures, p => {\n          const type = typeAST(p.type);\n          return type === p.type ? p : new PropertySignature(p.name, type, p.isOptional, p.isReadonly);\n        });\n        const indexSignatures = changeMap(ast.indexSignatures, is => {\n          const type = typeAST(is.type);\n          return type === is.type ? is : new IndexSignature(is.parameter, type, is.isReadonly);\n        });\n        return propertySignatures === ast.propertySignatures && indexSignatures === ast.indexSignatures ? ast : new TypeLiteral(propertySignatures, indexSignatures, ast.annotations);\n      }\n    case \"Union\":\n      {\n        const types = changeMap(ast.types, typeAST);\n        return types === ast.types ? ast : Union.make(types, ast.annotations);\n      }\n    case \"Suspend\":\n      return new Suspend(() => typeAST(ast.f()), ast.annotations);\n    case \"Refinement\":\n      {\n        const from = typeAST(ast.from);\n        return from === ast.from ? ast : new Refinement(from, ast.filter, ast.annotations);\n      }\n    case \"Transformation\":\n      return typeAST(ast.to);\n  }\n  return ast;\n};\n/** @internal */\nconst getJSONIdentifier = annotated => effect_Option__WEBPACK_IMPORTED_MODULE_1__.orElse(getJSONIdentifierAnnotation(annotated), () => getIdentifierAnnotation(annotated));\nconst createJSONIdentifierAnnotation = annotated => effect_Option__WEBPACK_IMPORTED_MODULE_1__.match(getJSONIdentifier(annotated), {\n  onNone: () => undefined,\n  onSome: identifier => ({\n    [JSONIdentifierAnnotationId]: identifier\n  })\n});\nfunction changeMap(as, f) {\n  let changed = false;\n  const out = effect_Array__WEBPACK_IMPORTED_MODULE_4__.allocate(as.length);\n  for (let i = 0; i < as.length; i++) {\n    const a = as[i];\n    const fa = f(a);\n    if (fa !== a) {\n      changed = true;\n    }\n    out[i] = fa;\n  }\n  return changed ? out : as;\n}\n/**\n * @since 1.0.0\n */\nconst encodedAST = ast => {\n  switch (ast._tag) {\n    case \"Declaration\":\n      {\n        const typeParameters = changeMap(ast.typeParameters, encodedAST);\n        return typeParameters === ast.typeParameters ? ast : new Declaration(typeParameters, ast.decodeUnknown, ast.encodeUnknown, ast.annotations);\n      }\n    case \"TupleType\":\n      {\n        const elements = changeMap(ast.elements, e => {\n          const type = encodedAST(e.type);\n          return type === e.type ? e : new Element(type, e.isOptional);\n        });\n        const rest = changeMap(ast.rest, encodedAST);\n        return elements === ast.elements && rest === ast.rest ? ast : new TupleType(elements, rest, ast.isReadonly, createJSONIdentifierAnnotation(ast));\n      }\n    case \"TypeLiteral\":\n      {\n        const propertySignatures = changeMap(ast.propertySignatures, ps => {\n          const type = encodedAST(ps.type);\n          return type === ps.type ? ps : new PropertySignature(ps.name, type, ps.isOptional, ps.isReadonly);\n        });\n        const indexSignatures = changeMap(ast.indexSignatures, is => {\n          const type = encodedAST(is.type);\n          return type === is.type ? is : new IndexSignature(is.parameter, type, is.isReadonly);\n        });\n        return propertySignatures === ast.propertySignatures && indexSignatures === ast.indexSignatures ? ast : new TypeLiteral(propertySignatures, indexSignatures, createJSONIdentifierAnnotation(ast));\n      }\n    case \"Union\":\n      {\n        const types = changeMap(ast.types, encodedAST);\n        return types === ast.types ? ast : Union.make(types, createJSONIdentifierAnnotation(ast));\n      }\n    case \"Suspend\":\n      return new Suspend(() => encodedAST(ast.f()), createJSONIdentifierAnnotation(ast));\n    case \"Refinement\":\n    case \"Transformation\":\n      return encodedAST(ast.from);\n  }\n  return ast;\n};\nconst toJSONAnnotations = annotations => {\n  const out = {};\n  for (const k of Object.getOwnPropertySymbols(annotations)) {\n    out[String(k)] = annotations[k];\n  }\n  return out;\n};\n/**\n * @since 1.0.0\n */\nconst hash = ast => effect_Hash__WEBPACK_IMPORTED_MODULE_10__.string(JSON.stringify(ast, null, 2));\n/** @internal */\nconst getCardinality = ast => {\n  switch (ast._tag) {\n    case \"NeverKeyword\":\n      return 0;\n    case \"Literal\":\n    case \"UndefinedKeyword\":\n    case \"VoidKeyword\":\n    case \"UniqueSymbol\":\n      return 1;\n    case \"BooleanKeyword\":\n      return 2;\n    case \"StringKeyword\":\n    case \"NumberKeyword\":\n    case \"BigIntKeyword\":\n    case \"SymbolKeyword\":\n      return 3;\n    case \"ObjectKeyword\":\n      return 5;\n    case \"UnknownKeyword\":\n    case \"AnyKeyword\":\n      return 6;\n    default:\n      return 4;\n  }\n};\nconst sortPropertySignatures = /*#__PURE__*/effect_Array__WEBPACK_IMPORTED_MODULE_4__.sort( /*#__PURE__*/effect_Order__WEBPACK_IMPORTED_MODULE_6__.mapInput(effect_Number__WEBPACK_IMPORTED_MODULE_7__.Order, ps => getCardinality(ps.type)));\nconst sortIndexSignatures = /*#__PURE__*/effect_Array__WEBPACK_IMPORTED_MODULE_4__.sort( /*#__PURE__*/effect_Order__WEBPACK_IMPORTED_MODULE_6__.mapInput(effect_Number__WEBPACK_IMPORTED_MODULE_7__.Order, is => {\n  switch (getParameterBase(is.parameter)._tag) {\n    case \"StringKeyword\":\n      return 2;\n    case \"SymbolKeyword\":\n      return 3;\n    case \"TemplateLiteral\":\n      return 1;\n  }\n}));\nconst WeightOrder = /*#__PURE__*/effect_Order__WEBPACK_IMPORTED_MODULE_6__.tuple(effect_Number__WEBPACK_IMPORTED_MODULE_7__.Order, effect_Number__WEBPACK_IMPORTED_MODULE_7__.Order, effect_Number__WEBPACK_IMPORTED_MODULE_7__.Order);\nconst maxWeight = /*#__PURE__*/effect_Order__WEBPACK_IMPORTED_MODULE_6__.max(WeightOrder);\nconst emptyWeight = [0, 0, 0];\nconst maxWeightAll = weights => weights.reduce(maxWeight, emptyWeight);\n/** @internal */\nconst getWeight = ast => {\n  switch (ast._tag) {\n    case \"TupleType\":\n      {\n        return [2, ast.elements.length, ast.rest.length];\n      }\n    case \"TypeLiteral\":\n      {\n        const y = ast.propertySignatures.length;\n        const z = ast.indexSignatures.length;\n        return y + z === 0 ? [-4, 0, 0] : [4, y, z];\n      }\n    case \"Declaration\":\n      {\n        const annotation = getSurrogateAnnotation(ast);\n        if (effect_Option__WEBPACK_IMPORTED_MODULE_1__.isSome(annotation)) {\n          const [_, y, z] = getWeight(annotation.value);\n          return [6, y, z];\n        }\n        return [6, 0, 0];\n      }\n    case \"Suspend\":\n      return [8, 0, 0];\n    case \"Union\":\n      return maxWeightAll(ast.types.map(getWeight));\n    case \"Refinement\":\n      {\n        const [x, y, z] = getWeight(ast.from);\n        return [x + 1, y, z];\n      }\n    case \"Transformation\":\n      return getWeight(ast.from);\n    case \"ObjectKeyword\":\n      return [-2, 0, 0];\n    case \"UnknownKeyword\":\n    case \"AnyKeyword\":\n      return [-4, 0, 0];\n    default:\n      return emptyWeight;\n  }\n};\n/** @internal */\nconst getParameterBase = ast => {\n  switch (ast._tag) {\n    case \"StringKeyword\":\n    case \"SymbolKeyword\":\n    case \"TemplateLiteral\":\n      return ast;\n    case \"Refinement\":\n      return getParameterBase(ast.from);\n  }\n};\nconst equalsTemplateLiteralSpan = /*#__PURE__*/effect_Array__WEBPACK_IMPORTED_MODULE_4__.getEquivalence((self, that) => self.type._tag === that.type._tag && self.literal === that.literal);\nconst equalsEnums = /*#__PURE__*/effect_Array__WEBPACK_IMPORTED_MODULE_4__.getEquivalence((self, that) => that[0] === self[0] && that[1] === self[1]);\nconst equals = (self, that) => {\n  switch (self._tag) {\n    case \"Literal\":\n      return isLiteral(that) && that.literal === self.literal;\n    case \"UniqueSymbol\":\n      return isUniqueSymbol(that) && that.symbol === self.symbol;\n    case \"UndefinedKeyword\":\n    case \"VoidKeyword\":\n    case \"NeverKeyword\":\n    case \"UnknownKeyword\":\n    case \"AnyKeyword\":\n    case \"StringKeyword\":\n    case \"NumberKeyword\":\n    case \"BooleanKeyword\":\n    case \"BigIntKeyword\":\n    case \"SymbolKeyword\":\n    case \"ObjectKeyword\":\n      return that._tag === self._tag;\n    case \"TemplateLiteral\":\n      return isTemplateLiteral(that) && that.head === self.head && equalsTemplateLiteralSpan(that.spans, self.spans);\n    case \"Enums\":\n      return isEnums(that) && equalsEnums(that.enums, self.enums);\n    case \"Refinement\":\n    case \"TupleType\":\n    case \"TypeLiteral\":\n    case \"Union\":\n    case \"Suspend\":\n    case \"Transformation\":\n    case \"Declaration\":\n      return self === that;\n  }\n};\nconst intersection = /*#__PURE__*/effect_Array__WEBPACK_IMPORTED_MODULE_4__.intersectionWith(equals);\nconst _keyof = ast => {\n  switch (ast._tag) {\n    case \"Declaration\":\n      {\n        const annotation = getSurrogateAnnotation(ast);\n        if (effect_Option__WEBPACK_IMPORTED_MODULE_1__.isSome(annotation)) {\n          return _keyof(annotation.value);\n        }\n        break;\n      }\n    case \"TypeLiteral\":\n      return ast.propertySignatures.map(p => effect_Predicate__WEBPACK_IMPORTED_MODULE_3__.isSymbol(p.name) ? new UniqueSymbol(p.name) : new Literal(p.name)).concat(ast.indexSignatures.map(is => getParameterBase(is.parameter)));\n    case \"Suspend\":\n      return _keyof(ast.f());\n    case \"Union\":\n      return ast.types.slice(1).reduce((out, ast) => intersection(out, _keyof(ast)), _keyof(ast.types[0]));\n    case \"Transformation\":\n      return _keyof(ast.to);\n  }\n  throw new Error(_internal_errors_js__WEBPACK_IMPORTED_MODULE_5__.getAPIErrorMessage(\"KeyOf\", `unsupported schema (${ast})`));\n};\n/** @internal */\nconst compose = (ab, cd) => new Transformation(ab, cd, composeTransformation);\n/** @internal */\nconst rename = (ast, mapping) => {\n  switch (ast._tag) {\n    case \"TypeLiteral\":\n      {\n        const propertySignatureTransformations = [];\n        for (const key of _internal_util_js__WEBPACK_IMPORTED_MODULE_2__.ownKeys(mapping)) {\n          const name = mapping[key];\n          if (name !== undefined) {\n            propertySignatureTransformations.push(new PropertySignatureTransformation(key, name, effect_Function__WEBPACK_IMPORTED_MODULE_0__.identity, effect_Function__WEBPACK_IMPORTED_MODULE_0__.identity));\n          }\n        }\n        if (propertySignatureTransformations.length === 0) {\n          return ast;\n        }\n        return new Transformation(ast, new TypeLiteral(ast.propertySignatures.map(ps => {\n          const name = mapping[ps.name];\n          return new PropertySignature(name === undefined ? ps.name : name, typeAST(ps.type), ps.isOptional, ps.isReadonly, ps.annotations);\n        }), ast.indexSignatures), new TypeLiteralTransformation(propertySignatureTransformations));\n      }\n    case \"Suspend\":\n      return new Suspend(() => rename(ast.f(), mapping));\n    case \"Transformation\":\n      return compose(ast, rename(typeAST(ast), mapping));\n  }\n  throw new Error(`rename: cannot rename (${ast})`);\n};\nconst formatKeyword = (ast, verbose = false) => effect_Option__WEBPACK_IMPORTED_MODULE_1__.getOrElse(getExpected(ast, verbose), () => ast._tag);\nconst getExpected = (ast, verbose) => {\n  if (verbose) {\n    const description = getDescriptionAnnotation(ast).pipe(effect_Option__WEBPACK_IMPORTED_MODULE_1__.orElse(() => getTitleAnnotation(ast)));\n    return effect_Option__WEBPACK_IMPORTED_MODULE_1__.match(getIdentifierAnnotation(ast), {\n      onNone: () => description,\n      onSome: identifier => effect_Option__WEBPACK_IMPORTED_MODULE_1__.match(description, {\n        onNone: () => effect_Option__WEBPACK_IMPORTED_MODULE_1__.some(identifier),\n        onSome: description => effect_Option__WEBPACK_IMPORTED_MODULE_1__.some(`${identifier} (${description})`)\n      })\n    });\n  } else {\n    return getIdentifierAnnotation(ast).pipe(effect_Option__WEBPACK_IMPORTED_MODULE_1__.orElse(() => getTitleAnnotation(ast)), effect_Option__WEBPACK_IMPORTED_MODULE_1__.orElse(() => getDescriptionAnnotation(ast)));\n  }\n};\n//# sourceMappingURL=AST.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@effect/schema/dist/esm/AST.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@effect/schema/dist/esm/Arbitrary.js":
/*!***********************************************************!*\
  !*** ./node_modules/@effect/schema/dist/esm/Arbitrary.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ArbitraryHookId: () => (/* binding */ ArbitraryHookId),\n/* harmony export */   ArrayConstraints: () => (/* binding */ ArrayConstraints),\n/* harmony export */   BigIntConstraints: () => (/* binding */ BigIntConstraints),\n/* harmony export */   IntegerConstraints: () => (/* binding */ IntegerConstraints),\n/* harmony export */   NumberConstraints: () => (/* binding */ NumberConstraints),\n/* harmony export */   StringConstraints: () => (/* binding */ StringConstraints),\n/* harmony export */   arbitrary: () => (/* binding */ arbitrary),\n/* harmony export */   combineConstraints: () => (/* binding */ combineConstraints),\n/* harmony export */   getConstraints: () => (/* binding */ getConstraints),\n/* harmony export */   make: () => (/* binding */ make),\n/* harmony export */   makeLazy: () => (/* binding */ makeLazy)\n/* harmony export */ });\n/* harmony import */ var effect_Array__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! effect/Array */ \"(rsc)/./node_modules/effect/dist/esm/Array.js\");\n/* harmony import */ var effect_Option__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! effect/Option */ \"(rsc)/./node_modules/effect/dist/esm/Option.js\");\n/* harmony import */ var effect_Predicate__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! effect/Predicate */ \"(rsc)/./node_modules/effect/dist/esm/Predicate.js\");\n/* harmony import */ var _AST_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./AST.js */ \"(rsc)/./node_modules/@effect/schema/dist/esm/AST.js\");\n/* harmony import */ var _FastCheck_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./FastCheck.js */ \"(rsc)/./node_modules/@effect/schema/dist/esm/FastCheck.js\");\n/* harmony import */ var _internal_errors_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./internal/errors.js */ \"(rsc)/./node_modules/@effect/schema/dist/esm/internal/errors.js\");\n/* harmony import */ var _internal_filters_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./internal/filters.js */ \"(rsc)/./node_modules/@effect/schema/dist/esm/internal/filters.js\");\n/* harmony import */ var _internal_util_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./internal/util.js */ \"(rsc)/./node_modules/@effect/schema/dist/esm/internal/util.js\");\n/**\n * @since 1.0.0\n */\n\n\n\n\n\n\n\n\n/**\n * @category hooks\n * @since 1.0.0\n */\nconst ArbitraryHookId = /*#__PURE__*/Symbol.for(\"@effect/schema/ArbitraryHookId\");\n/**\n * @category annotations\n * @since 1.0.0\n */\nconst arbitrary = handler => self => self.annotations({\n  [ArbitraryHookId]: handler\n});\n/**\n * Returns a LazyArbitrary for the `A` type of the provided schema.\n *\n * @category arbitrary\n * @since 1.0.0\n */\nconst makeLazy = schema => go(schema.ast, {});\n/**\n * Returns a fast-check Arbitrary for the `A` type of the provided schema.\n *\n * @category arbitrary\n * @since 1.0.0\n */\nconst make = schema => makeLazy(schema)(_FastCheck_js__WEBPACK_IMPORTED_MODULE_0__);\nconst depthSize = 1;\nconst record = (fc, key, value, options) => {\n  return (options.isSuspend ? fc.oneof({\n    depthSize\n  }, fc.constant([]), fc.array(fc.tuple(key, value), {\n    minLength: 1,\n    maxLength: 2\n  })) : fc.array(fc.tuple(key, value))).map(tuples => {\n    const out = {};\n    for (const [k, v] of tuples) {\n      out[k] = v;\n    }\n    return out;\n  });\n};\nconst getHook = /*#__PURE__*/_AST_js__WEBPACK_IMPORTED_MODULE_1__.getAnnotation(ArbitraryHookId);\nconst getRefinementFromArbitrary = (ast, options) => {\n  const constraints = combineConstraints(options.constraints, getConstraints(ast));\n  return go(ast.from, constraints ? {\n    ...options,\n    constraints\n  } : options);\n};\nconst go = (ast, options) => {\n  const hook = getHook(ast);\n  if (effect_Option__WEBPACK_IMPORTED_MODULE_2__.isSome(hook)) {\n    switch (ast._tag) {\n      case \"Declaration\":\n        return hook.value(...ast.typeParameters.map(p => go(p, options)));\n      case \"Refinement\":\n        return hook.value(getRefinementFromArbitrary(ast, options));\n      default:\n        return hook.value();\n    }\n  }\n  switch (ast._tag) {\n    case \"Declaration\":\n      {\n        throw new Error(_internal_errors_js__WEBPACK_IMPORTED_MODULE_3__.getArbitraryErrorMessage(`a declaration without annotations (${ast})`));\n      }\n    case \"Literal\":\n      return fc => fc.constant(ast.literal);\n    case \"UniqueSymbol\":\n      return fc => fc.constant(ast.symbol);\n    case \"UndefinedKeyword\":\n    case \"VoidKeyword\":\n      return fc => fc.constant(undefined);\n    case \"NeverKeyword\":\n      return () => {\n        throw new Error(_internal_errors_js__WEBPACK_IMPORTED_MODULE_3__.getArbitraryErrorMessage(\"`never`\"));\n      };\n    case \"UnknownKeyword\":\n    case \"AnyKeyword\":\n      return fc => fc.anything();\n    case \"StringKeyword\":\n      return fc => {\n        if (options.constraints) {\n          switch (options.constraints._tag) {\n            case \"StringConstraints\":\n              return fc.string(options.constraints.constraints);\n          }\n        }\n        return fc.string();\n      };\n    case \"NumberKeyword\":\n      return fc => {\n        if (options.constraints) {\n          switch (options.constraints._tag) {\n            case \"NumberConstraints\":\n              return fc.float(options.constraints.constraints);\n            case \"IntegerConstraints\":\n              return fc.integer(options.constraints.constraints);\n          }\n        }\n        return fc.float();\n      };\n    case \"BooleanKeyword\":\n      return fc => fc.boolean();\n    case \"BigIntKeyword\":\n      return fc => {\n        if (options.constraints) {\n          switch (options.constraints._tag) {\n            case \"BigIntConstraints\":\n              return fc.bigInt(options.constraints.constraints);\n          }\n        }\n        return fc.bigInt();\n      };\n    case \"SymbolKeyword\":\n      return fc => fc.string().map(s => Symbol.for(s));\n    case \"ObjectKeyword\":\n      return fc => fc.oneof(fc.object(), fc.array(fc.anything()));\n    case \"TemplateLiteral\":\n      {\n        return fc => {\n          const string = fc.string({\n            maxLength: 5\n          });\n          const number = fc.float({\n            noDefaultInfinity: true\n          }).filter(n => !Number.isNaN(n));\n          const components = [fc.constant(ast.head)];\n          for (const span of ast.spans) {\n            if (_AST_js__WEBPACK_IMPORTED_MODULE_1__.isStringKeyword(span.type)) {\n              components.push(string);\n            } else {\n              components.push(number);\n            }\n            components.push(fc.constant(span.literal));\n          }\n          return fc.tuple(...components).map(spans => spans.join(\"\"));\n        };\n      }\n    case \"TupleType\":\n      {\n        const elements = [];\n        let hasOptionals = false;\n        for (const element of ast.elements) {\n          elements.push(go(element.type, options));\n          if (element.isOptional) {\n            hasOptionals = true;\n          }\n        }\n        const rest = ast.rest.map(e => go(e, options));\n        return fc => {\n          // ---------------------------------------------\n          // handle elements\n          // ---------------------------------------------\n          let output = fc.tuple(...elements.map(arb => arb(fc)));\n          if (hasOptionals) {\n            const indexes = fc.tuple(...ast.elements.map(element => element.isOptional ? fc.boolean() : fc.constant(true)));\n            output = output.chain(tuple => indexes.map(booleans => {\n              for (const [i, b] of booleans.reverse().entries()) {\n                if (!b) {\n                  tuple.splice(booleans.length - i, 1);\n                }\n              }\n              return tuple;\n            }));\n          }\n          // ---------------------------------------------\n          // handle rest element\n          // ---------------------------------------------\n          if (effect_Array__WEBPACK_IMPORTED_MODULE_4__.isNonEmptyReadonlyArray(rest)) {\n            const [head, ...tail] = rest;\n            const arb = head(fc);\n            const constraints = options.constraints;\n            output = output.chain(as => {\n              let out = fc.array(arb);\n              if (options.isSuspend) {\n                out = fc.oneof({\n                  depthSize\n                }, fc.constant([]), fc.array(arb, {\n                  minLength: 1,\n                  maxLength: 2\n                }));\n              } else if (constraints && constraints._tag === \"ArrayConstraints\") {\n                out = fc.array(arb, constraints.constraints);\n              }\n              return out.map(rest => [...as, ...rest]);\n            });\n            // ---------------------------------------------\n            // handle post rest elements\n            // ---------------------------------------------\n            for (let j = 0; j < tail.length; j++) {\n              output = output.chain(as => tail[j](fc).map(a => [...as, a]));\n            }\n          }\n          return output;\n        };\n      }\n    case \"TypeLiteral\":\n      {\n        const propertySignaturesTypes = ast.propertySignatures.map(f => go(f.type, options));\n        const indexSignatures = ast.indexSignatures.map(is => [go(is.parameter, options), go(is.type, options)]);\n        return fc => {\n          const arbs = {};\n          const requiredKeys = [];\n          // ---------------------------------------------\n          // handle property signatures\n          // ---------------------------------------------\n          for (let i = 0; i < propertySignaturesTypes.length; i++) {\n            const ps = ast.propertySignatures[i];\n            const name = ps.name;\n            if (!ps.isOptional) {\n              requiredKeys.push(name);\n            }\n            arbs[name] = propertySignaturesTypes[i](fc);\n          }\n          let output = fc.record(arbs, {\n            requiredKeys\n          });\n          // ---------------------------------------------\n          // handle index signatures\n          // ---------------------------------------------\n          for (let i = 0; i < indexSignatures.length; i++) {\n            const parameter = indexSignatures[i][0](fc);\n            const type = indexSignatures[i][1](fc);\n            output = output.chain(o => {\n              return record(fc, parameter, type, options).map(d => ({\n                ...d,\n                ...o\n              }));\n            });\n          }\n          return output;\n        };\n      }\n    case \"Union\":\n      {\n        const types = ast.types.map(t => go(t, options));\n        return fc => fc.oneof({\n          depthSize\n        }, ...types.map(arb => arb(fc)));\n      }\n    case \"Enums\":\n      {\n        if (ast.enums.length === 0) {\n          throw new Error(_internal_errors_js__WEBPACK_IMPORTED_MODULE_3__.getArbitraryErrorMessage(\"an empty enum\"));\n        }\n        return fc => fc.oneof(...ast.enums.map(([_, value]) => fc.constant(value)));\n      }\n    case \"Refinement\":\n      {\n        const from = getRefinementFromArbitrary(ast, options);\n        return fc => from(fc).filter(a => effect_Option__WEBPACK_IMPORTED_MODULE_2__.isNone(ast.filter(a, _AST_js__WEBPACK_IMPORTED_MODULE_1__.defaultParseOption, ast)));\n      }\n    case \"Suspend\":\n      {\n        const get = _internal_util_js__WEBPACK_IMPORTED_MODULE_5__.memoizeThunk(() => go(ast.f(), {\n          ...options,\n          isSuspend: true\n        }));\n        return fc => fc.constant(null).chain(() => get()(fc));\n      }\n    case \"Transformation\":\n      return go(ast.to, options);\n  }\n};\n/** @internal */\nclass NumberConstraints {\n  _tag = \"NumberConstraints\";\n  constraints;\n  constructor(options) {\n    this.constraints = {};\n    if (effect_Predicate__WEBPACK_IMPORTED_MODULE_6__.isNumber(options.min)) {\n      this.constraints.min = Math.fround(options.min);\n    }\n    if (effect_Predicate__WEBPACK_IMPORTED_MODULE_6__.isNumber(options.max)) {\n      this.constraints.max = Math.fround(options.max);\n    }\n    if (effect_Predicate__WEBPACK_IMPORTED_MODULE_6__.isBoolean(options.noNaN)) {\n      this.constraints.noNaN = options.noNaN;\n    }\n    if (effect_Predicate__WEBPACK_IMPORTED_MODULE_6__.isBoolean(options.noDefaultInfinity)) {\n      this.constraints.noDefaultInfinity = options.noDefaultInfinity;\n    }\n  }\n}\n/** @internal */\nclass StringConstraints {\n  _tag = \"StringConstraints\";\n  constraints;\n  constructor(options) {\n    this.constraints = {};\n    if (effect_Predicate__WEBPACK_IMPORTED_MODULE_6__.isNumber(options.minLength)) {\n      this.constraints.minLength = options.minLength;\n    }\n    if (effect_Predicate__WEBPACK_IMPORTED_MODULE_6__.isNumber(options.maxLength)) {\n      this.constraints.maxLength = options.maxLength;\n    }\n  }\n}\n/** @internal */\nclass IntegerConstraints {\n  _tag = \"IntegerConstraints\";\n  constraints;\n  constructor(options) {\n    this.constraints = {};\n    if (effect_Predicate__WEBPACK_IMPORTED_MODULE_6__.isNumber(options.min)) {\n      this.constraints.min = options.min;\n    }\n    if (effect_Predicate__WEBPACK_IMPORTED_MODULE_6__.isNumber(options.max)) {\n      this.constraints.max = options.max;\n    }\n  }\n}\n/** @internal */\nclass ArrayConstraints {\n  _tag = \"ArrayConstraints\";\n  constraints;\n  constructor(options) {\n    this.constraints = {};\n    if (effect_Predicate__WEBPACK_IMPORTED_MODULE_6__.isNumber(options.minLength)) {\n      this.constraints.minLength = options.minLength;\n    }\n    if (effect_Predicate__WEBPACK_IMPORTED_MODULE_6__.isNumber(options.maxLength)) {\n      this.constraints.maxLength = options.maxLength;\n    }\n  }\n}\n/** @internal */\nclass BigIntConstraints {\n  _tag = \"BigIntConstraints\";\n  constraints;\n  constructor(options) {\n    this.constraints = {};\n    if (effect_Predicate__WEBPACK_IMPORTED_MODULE_6__.isBigInt(options.min)) {\n      this.constraints.min = options.min;\n    }\n    if (effect_Predicate__WEBPACK_IMPORTED_MODULE_6__.isBigInt(options.max)) {\n      this.constraints.max = options.max;\n    }\n  }\n}\n/** @internal */\nconst getConstraints = ast => {\n  const TypeAnnotationId = ast.annotations[_AST_js__WEBPACK_IMPORTED_MODULE_1__.TypeAnnotationId];\n  const jsonSchema = ast.annotations[_AST_js__WEBPACK_IMPORTED_MODULE_1__.JSONSchemaAnnotationId];\n  switch (TypeAnnotationId) {\n    // int\n    case _internal_filters_js__WEBPACK_IMPORTED_MODULE_7__.IntTypeId:\n      return new IntegerConstraints({});\n    // number\n    case _internal_filters_js__WEBPACK_IMPORTED_MODULE_7__.GreaterThanTypeId:\n    case _internal_filters_js__WEBPACK_IMPORTED_MODULE_7__.GreaterThanOrEqualToTypeId:\n    case _internal_filters_js__WEBPACK_IMPORTED_MODULE_7__.LessThanTypeId:\n    case _internal_filters_js__WEBPACK_IMPORTED_MODULE_7__.LessThanOrEqualToTypeId:\n    case _internal_filters_js__WEBPACK_IMPORTED_MODULE_7__.BetweenTypeId:\n      return new NumberConstraints({\n        min: jsonSchema.exclusiveMinimum ?? jsonSchema.minimum,\n        max: jsonSchema.exclusiveMaximum ?? jsonSchema.maximum\n      });\n    // bigint\n    case _internal_filters_js__WEBPACK_IMPORTED_MODULE_7__.GreaterThanBigintTypeId:\n    case _internal_filters_js__WEBPACK_IMPORTED_MODULE_7__.GreaterThanOrEqualToBigIntTypeId:\n    case _internal_filters_js__WEBPACK_IMPORTED_MODULE_7__.LessThanBigIntTypeId:\n    case _internal_filters_js__WEBPACK_IMPORTED_MODULE_7__.LessThanOrEqualToBigIntTypeId:\n    case _internal_filters_js__WEBPACK_IMPORTED_MODULE_7__.BetweenBigintTypeId:\n      {\n        const constraints = ast.annotations[TypeAnnotationId];\n        return new BigIntConstraints(constraints);\n      }\n    // string\n    case _internal_filters_js__WEBPACK_IMPORTED_MODULE_7__.MinLengthTypeId:\n    case _internal_filters_js__WEBPACK_IMPORTED_MODULE_7__.MaxLengthTypeId:\n    case _internal_filters_js__WEBPACK_IMPORTED_MODULE_7__.LengthTypeId:\n      return new StringConstraints(jsonSchema);\n    // array\n    case _internal_filters_js__WEBPACK_IMPORTED_MODULE_7__.MinItemsTypeId:\n    case _internal_filters_js__WEBPACK_IMPORTED_MODULE_7__.MaxItemsTypeId:\n    case _internal_filters_js__WEBPACK_IMPORTED_MODULE_7__.ItemsCountTypeId:\n      return new ArrayConstraints({\n        minLength: jsonSchema.minItems,\n        maxLength: jsonSchema.maxItems\n      });\n  }\n};\n/** @internal */\nconst combineConstraints = (c1, c2) => {\n  if (c1 === undefined) {\n    return c2;\n  }\n  if (c2 === undefined) {\n    return c1;\n  }\n  switch (c1._tag) {\n    case \"ArrayConstraints\":\n      {\n        switch (c2._tag) {\n          case \"ArrayConstraints\":\n            return new ArrayConstraints({\n              minLength: getMax(c1.constraints.minLength, c2.constraints.minLength),\n              maxLength: getMin(c1.constraints.maxLength, c2.constraints.maxLength)\n            });\n        }\n        break;\n      }\n    case \"NumberConstraints\":\n      {\n        switch (c2._tag) {\n          case \"NumberConstraints\":\n            return new NumberConstraints({\n              min: getMax(c1.constraints.min, c2.constraints.min),\n              max: getMin(c1.constraints.max, c2.constraints.max),\n              noNaN: getOr(c1.constraints.noNaN, c2.constraints.noNaN),\n              noDefaultInfinity: getOr(c1.constraints.noDefaultInfinity, c2.constraints.noDefaultInfinity)\n            });\n          case \"IntegerConstraints\":\n            return new IntegerConstraints({\n              min: getMax(c1.constraints.min, c2.constraints.min),\n              max: getMin(c1.constraints.max, c2.constraints.max)\n            });\n        }\n        break;\n      }\n    case \"BigIntConstraints\":\n      {\n        switch (c2._tag) {\n          case \"BigIntConstraints\":\n            return new BigIntConstraints({\n              min: getMax(c1.constraints.min, c2.constraints.min),\n              max: getMin(c1.constraints.max, c2.constraints.max)\n            });\n        }\n        break;\n      }\n    case \"StringConstraints\":\n      {\n        switch (c2._tag) {\n          case \"StringConstraints\":\n            return new StringConstraints({\n              minLength: getMax(c1.constraints.minLength, c2.constraints.minLength),\n              maxLength: getMin(c1.constraints.maxLength, c2.constraints.maxLength)\n            });\n        }\n        break;\n      }\n    case \"IntegerConstraints\":\n      {\n        switch (c2._tag) {\n          case \"NumberConstraints\":\n          case \"IntegerConstraints\":\n            {\n              return new IntegerConstraints({\n                min: getMax(c1.constraints.min, c2.constraints.min),\n                max: getMin(c1.constraints.max, c2.constraints.max)\n              });\n            }\n        }\n        break;\n      }\n  }\n};\nconst getOr = (a, b) => {\n  return a === undefined ? b : b === undefined ? a : a || b;\n};\nfunction getMax(n1, n2) {\n  return n1 === undefined ? n2 : n2 === undefined ? n1 : n1 <= n2 ? n2 : n1;\n}\nfunction getMin(n1, n2) {\n  return n1 === undefined ? n2 : n2 === undefined ? n1 : n1 <= n2 ? n1 : n2;\n}\n//# sourceMappingURL=Arbitrary.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@effect/schema/dist/esm/Arbitrary.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@effect/schema/dist/esm/Equivalence.js":
/*!*************************************************************!*\
  !*** ./node_modules/@effect/schema/dist/esm/Equivalence.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EquivalenceHookId: () => (/* binding */ EquivalenceHookId),\n/* harmony export */   equivalence: () => (/* binding */ equivalence),\n/* harmony export */   make: () => (/* binding */ make)\n/* harmony export */ });\n/* harmony import */ var effect_Array__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! effect/Array */ \"(rsc)/./node_modules/effect/dist/esm/Array.js\");\n/* harmony import */ var effect_Equal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! effect/Equal */ \"(rsc)/./node_modules/effect/dist/esm/Equal.js\");\n/* harmony import */ var effect_Equivalence__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! effect/Equivalence */ \"(rsc)/./node_modules/effect/dist/esm/Equivalence.js\");\n/* harmony import */ var effect_Option__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! effect/Option */ \"(rsc)/./node_modules/effect/dist/esm/Option.js\");\n/* harmony import */ var effect_Predicate__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! effect/Predicate */ \"(rsc)/./node_modules/effect/dist/esm/Predicate.js\");\n/* harmony import */ var _AST_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AST.js */ \"(rsc)/./node_modules/@effect/schema/dist/esm/AST.js\");\n/* harmony import */ var _internal_errors_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./internal/errors.js */ \"(rsc)/./node_modules/@effect/schema/dist/esm/internal/errors.js\");\n/* harmony import */ var _internal_util_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./internal/util.js */ \"(rsc)/./node_modules/@effect/schema/dist/esm/internal/util.js\");\n/* harmony import */ var _ParseResult_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./ParseResult.js */ \"(rsc)/./node_modules/@effect/schema/dist/esm/ParseResult.js\");\n/**\n * @since 1.0.0\n */\n\n\n\n\n\n\n\n\n\n/**\n * @category hooks\n * @since 1.0.0\n */\nconst EquivalenceHookId = /*#__PURE__*/Symbol.for(\"@effect/schema/EquivalenceHookId\");\n/**\n * @category annotations\n * @since 1.0.0\n */\nconst equivalence = handler => self => self.annotations({\n  [EquivalenceHookId]: handler\n});\n/**\n * @category Equivalence\n * @since 1.0.0\n */\nconst make = schema => go(schema.ast);\nconst getHook = /*#__PURE__*/_AST_js__WEBPACK_IMPORTED_MODULE_0__.getAnnotation(EquivalenceHookId);\nconst go = ast => {\n  const hook = getHook(ast);\n  if (effect_Option__WEBPACK_IMPORTED_MODULE_1__.isSome(hook)) {\n    switch (ast._tag) {\n      case \"Declaration\":\n        return hook.value(...ast.typeParameters.map(go));\n      case \"Refinement\":\n        return hook.value(go(ast.from));\n      default:\n        return hook.value();\n    }\n  }\n  switch (ast._tag) {\n    case \"NeverKeyword\":\n      throw new Error(_internal_errors_js__WEBPACK_IMPORTED_MODULE_2__.getEquivalenceErrorMessage(\"`never`\"));\n    case \"Transformation\":\n      return go(ast.to);\n    case \"Declaration\":\n    case \"Literal\":\n    case \"StringKeyword\":\n    case \"TemplateLiteral\":\n    case \"UniqueSymbol\":\n    case \"SymbolKeyword\":\n    case \"UnknownKeyword\":\n    case \"AnyKeyword\":\n    case \"NumberKeyword\":\n    case \"BooleanKeyword\":\n    case \"BigIntKeyword\":\n    case \"UndefinedKeyword\":\n    case \"VoidKeyword\":\n    case \"Enums\":\n    case \"ObjectKeyword\":\n      return effect_Equal__WEBPACK_IMPORTED_MODULE_3__.equals;\n    case \"Refinement\":\n      return go(ast.from);\n    case \"Suspend\":\n      {\n        const get = _internal_util_js__WEBPACK_IMPORTED_MODULE_4__.memoizeThunk(() => go(ast.f()));\n        return (a, b) => get()(a, b);\n      }\n    case \"TupleType\":\n      {\n        const elements = ast.elements.map(element => go(element.type));\n        const rest = ast.rest.map(go);\n        return effect_Equivalence__WEBPACK_IMPORTED_MODULE_5__.make((a, b) => {\n          const len = a.length;\n          if (len !== b.length) {\n            return false;\n          }\n          // ---------------------------------------------\n          // handle elements\n          // ---------------------------------------------\n          let i = 0;\n          for (; i < Math.min(len, ast.elements.length); i++) {\n            if (!elements[i](a[i], b[i])) {\n              return false;\n            }\n          }\n          // ---------------------------------------------\n          // handle rest element\n          // ---------------------------------------------\n          if (effect_Array__WEBPACK_IMPORTED_MODULE_6__.isNonEmptyReadonlyArray(rest)) {\n            const [head, ...tail] = rest;\n            for (; i < len - tail.length; i++) {\n              if (!head(a[i], b[i])) {\n                return false;\n              }\n            }\n            // ---------------------------------------------\n            // handle post rest elements\n            // ---------------------------------------------\n            for (let j = 0; j < tail.length; j++) {\n              i += j;\n              if (!tail[j](a[i], b[i])) {\n                return false;\n              }\n            }\n          }\n          return true;\n        });\n      }\n    case \"TypeLiteral\":\n      {\n        if (ast.propertySignatures.length === 0 && ast.indexSignatures.length === 0) {\n          return effect_Equal__WEBPACK_IMPORTED_MODULE_3__.equals;\n        }\n        const propertySignatures = ast.propertySignatures.map(ps => go(ps.type));\n        const indexSignatures = ast.indexSignatures.map(is => go(is.type));\n        return effect_Equivalence__WEBPACK_IMPORTED_MODULE_5__.make((a, b) => {\n          const aStringKeys = Object.keys(a);\n          const aSymbolKeys = Object.getOwnPropertySymbols(a);\n          // ---------------------------------------------\n          // handle property signatures\n          // ---------------------------------------------\n          for (let i = 0; i < propertySignatures.length; i++) {\n            const ps = ast.propertySignatures[i];\n            const name = ps.name;\n            const aHas = Object.prototype.hasOwnProperty.call(a, name);\n            const bHas = Object.prototype.hasOwnProperty.call(b, name);\n            if (ps.isOptional) {\n              if (aHas !== bHas) {\n                return false;\n              }\n            }\n            if (aHas && bHas && !propertySignatures[i](a[name], b[name])) {\n              return false;\n            }\n          }\n          // ---------------------------------------------\n          // handle index signatures\n          // ---------------------------------------------\n          let bSymbolKeys;\n          let bStringKeys;\n          for (let i = 0; i < indexSignatures.length; i++) {\n            const is = ast.indexSignatures[i];\n            const base = _AST_js__WEBPACK_IMPORTED_MODULE_0__.getParameterBase(is.parameter);\n            const isSymbol = _AST_js__WEBPACK_IMPORTED_MODULE_0__.isSymbolKeyword(base);\n            if (isSymbol) {\n              bSymbolKeys = bSymbolKeys || Object.getOwnPropertySymbols(b);\n              if (aSymbolKeys.length !== bSymbolKeys.length) {\n                return false;\n              }\n            } else {\n              bStringKeys = bStringKeys || Object.keys(b);\n              if (aStringKeys.length !== bStringKeys.length) {\n                return false;\n              }\n            }\n            const aKeys = isSymbol ? aSymbolKeys : aStringKeys;\n            for (let j = 0; j < aKeys.length; j++) {\n              const key = aKeys[j];\n              if (!Object.prototype.hasOwnProperty.call(b, key) || !indexSignatures[i](a[key], b[key])) {\n                return false;\n              }\n            }\n          }\n          return true;\n        });\n      }\n    case \"Union\":\n      {\n        const searchTree = _ParseResult_js__WEBPACK_IMPORTED_MODULE_7__.getSearchTree(ast.types, true);\n        const ownKeys = _internal_util_js__WEBPACK_IMPORTED_MODULE_4__.ownKeys(searchTree.keys);\n        const len = ownKeys.length;\n        return effect_Equivalence__WEBPACK_IMPORTED_MODULE_5__.make((a, b) => {\n          let candidates = [];\n          if (len > 0 && effect_Predicate__WEBPACK_IMPORTED_MODULE_8__.isRecord(a)) {\n            for (let i = 0; i < len; i++) {\n              const name = ownKeys[i];\n              const buckets = searchTree.keys[name].buckets;\n              if (Object.prototype.hasOwnProperty.call(a, name)) {\n                const literal = String(a[name]);\n                if (Object.prototype.hasOwnProperty.call(buckets, literal)) {\n                  candidates = candidates.concat(buckets[literal]);\n                }\n              }\n            }\n          }\n          if (searchTree.otherwise.length > 0) {\n            candidates = candidates.concat(searchTree.otherwise);\n          }\n          const tuples = candidates.map(ast => [go(ast), _ParseResult_js__WEBPACK_IMPORTED_MODULE_7__.is({\n            ast\n          })]);\n          for (let i = 0; i < tuples.length; i++) {\n            const [equivalence, is] = tuples[i];\n            if (is(a) && is(b)) {\n              if (equivalence(a, b)) {\n                return true;\n              }\n            }\n          }\n          return false;\n        });\n      }\n  }\n};\n//# sourceMappingURL=Equivalence.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVmZmVjdC9zY2hlbWEvZGlzdC9lc20vRXF1aXZhbGVuY2UuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ29DO0FBQ0U7QUFDWTtBQUNWO0FBQ007QUFDZDtBQUNnQjtBQUNKO0FBQ0k7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AsNkJBQTZCLGtEQUFpQjtBQUM5QztBQUNBO0FBQ0EsTUFBTSxpREFBYTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLDJFQUFrQztBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxnREFBWTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQiwyREFBa0I7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxvREFBZ0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQix3Q0FBd0M7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLGlFQUEyQjtBQUN6QztBQUNBLG1CQUFtQix1QkFBdUI7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsaUJBQWlCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLGdEQUFZO0FBQzdCO0FBQ0E7QUFDQTtBQUNBLGVBQWUsb0RBQWdCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsK0JBQStCO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQiw0QkFBNEI7QUFDdEQ7QUFDQSx5QkFBeUIscURBQW9CO0FBQzdDLDZCQUE2QixvREFBbUI7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsa0JBQWtCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQiwwREFBeUI7QUFDcEQsd0JBQXdCLHNEQUFhO0FBQ3JDO0FBQ0EsZUFBZSxvREFBZ0I7QUFDL0I7QUFDQSx5QkFBeUIsc0RBQWtCO0FBQzNDLDRCQUE0QixTQUFTO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseURBQXlELCtDQUFjO0FBQ3ZFO0FBQ0EsV0FBVztBQUNYLDBCQUEwQixtQkFBbUI7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FjYWRlbXkvLi9ub2RlX21vZHVsZXMvQGVmZmVjdC9zY2hlbWEvZGlzdC9lc20vRXF1aXZhbGVuY2UuanM/NDcxMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5pbXBvcnQgKiBhcyBBcnIgZnJvbSBcImVmZmVjdC9BcnJheVwiO1xuaW1wb3J0ICogYXMgRXF1YWwgZnJvbSBcImVmZmVjdC9FcXVhbFwiO1xuaW1wb3J0ICogYXMgRXF1aXZhbGVuY2UgZnJvbSBcImVmZmVjdC9FcXVpdmFsZW5jZVwiO1xuaW1wb3J0ICogYXMgT3B0aW9uIGZyb20gXCJlZmZlY3QvT3B0aW9uXCI7XG5pbXBvcnQgKiBhcyBQcmVkaWNhdGUgZnJvbSBcImVmZmVjdC9QcmVkaWNhdGVcIjtcbmltcG9ydCAqIGFzIEFTVCBmcm9tIFwiLi9BU1QuanNcIjtcbmltcG9ydCAqIGFzIGVycm9yc18gZnJvbSBcIi4vaW50ZXJuYWwvZXJyb3JzLmpzXCI7XG5pbXBvcnQgKiBhcyB1dGlsXyBmcm9tIFwiLi9pbnRlcm5hbC91dGlsLmpzXCI7XG5pbXBvcnQgKiBhcyBQYXJzZVJlc3VsdCBmcm9tIFwiLi9QYXJzZVJlc3VsdC5qc1wiO1xuLyoqXG4gKiBAY2F0ZWdvcnkgaG9va3NcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5leHBvcnQgY29uc3QgRXF1aXZhbGVuY2VIb29rSWQgPSAvKiNfX1BVUkVfXyovU3ltYm9sLmZvcihcIkBlZmZlY3Qvc2NoZW1hL0VxdWl2YWxlbmNlSG9va0lkXCIpO1xuLyoqXG4gKiBAY2F0ZWdvcnkgYW5ub3RhdGlvbnNcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5leHBvcnQgY29uc3QgZXF1aXZhbGVuY2UgPSBoYW5kbGVyID0+IHNlbGYgPT4gc2VsZi5hbm5vdGF0aW9ucyh7XG4gIFtFcXVpdmFsZW5jZUhvb2tJZF06IGhhbmRsZXJcbn0pO1xuLyoqXG4gKiBAY2F0ZWdvcnkgRXF1aXZhbGVuY2VcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5leHBvcnQgY29uc3QgbWFrZSA9IHNjaGVtYSA9PiBnbyhzY2hlbWEuYXN0KTtcbmNvbnN0IGdldEhvb2sgPSAvKiNfX1BVUkVfXyovQVNULmdldEFubm90YXRpb24oRXF1aXZhbGVuY2VIb29rSWQpO1xuY29uc3QgZ28gPSBhc3QgPT4ge1xuICBjb25zdCBob29rID0gZ2V0SG9vayhhc3QpO1xuICBpZiAoT3B0aW9uLmlzU29tZShob29rKSkge1xuICAgIHN3aXRjaCAoYXN0Ll90YWcpIHtcbiAgICAgIGNhc2UgXCJEZWNsYXJhdGlvblwiOlxuICAgICAgICByZXR1cm4gaG9vay52YWx1ZSguLi5hc3QudHlwZVBhcmFtZXRlcnMubWFwKGdvKSk7XG4gICAgICBjYXNlIFwiUmVmaW5lbWVudFwiOlxuICAgICAgICByZXR1cm4gaG9vay52YWx1ZShnbyhhc3QuZnJvbSkpO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGhvb2sudmFsdWUoKTtcbiAgICB9XG4gIH1cbiAgc3dpdGNoIChhc3QuX3RhZykge1xuICAgIGNhc2UgXCJOZXZlcktleXdvcmRcIjpcbiAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvcnNfLmdldEVxdWl2YWxlbmNlRXJyb3JNZXNzYWdlKFwiYG5ldmVyYFwiKSk7XG4gICAgY2FzZSBcIlRyYW5zZm9ybWF0aW9uXCI6XG4gICAgICByZXR1cm4gZ28oYXN0LnRvKTtcbiAgICBjYXNlIFwiRGVjbGFyYXRpb25cIjpcbiAgICBjYXNlIFwiTGl0ZXJhbFwiOlxuICAgIGNhc2UgXCJTdHJpbmdLZXl3b3JkXCI6XG4gICAgY2FzZSBcIlRlbXBsYXRlTGl0ZXJhbFwiOlxuICAgIGNhc2UgXCJVbmlxdWVTeW1ib2xcIjpcbiAgICBjYXNlIFwiU3ltYm9sS2V5d29yZFwiOlxuICAgIGNhc2UgXCJVbmtub3duS2V5d29yZFwiOlxuICAgIGNhc2UgXCJBbnlLZXl3b3JkXCI6XG4gICAgY2FzZSBcIk51bWJlcktleXdvcmRcIjpcbiAgICBjYXNlIFwiQm9vbGVhbktleXdvcmRcIjpcbiAgICBjYXNlIFwiQmlnSW50S2V5d29yZFwiOlxuICAgIGNhc2UgXCJVbmRlZmluZWRLZXl3b3JkXCI6XG4gICAgY2FzZSBcIlZvaWRLZXl3b3JkXCI6XG4gICAgY2FzZSBcIkVudW1zXCI6XG4gICAgY2FzZSBcIk9iamVjdEtleXdvcmRcIjpcbiAgICAgIHJldHVybiBFcXVhbC5lcXVhbHM7XG4gICAgY2FzZSBcIlJlZmluZW1lbnRcIjpcbiAgICAgIHJldHVybiBnbyhhc3QuZnJvbSk7XG4gICAgY2FzZSBcIlN1c3BlbmRcIjpcbiAgICAgIHtcbiAgICAgICAgY29uc3QgZ2V0ID0gdXRpbF8ubWVtb2l6ZVRodW5rKCgpID0+IGdvKGFzdC5mKCkpKTtcbiAgICAgICAgcmV0dXJuIChhLCBiKSA9PiBnZXQoKShhLCBiKTtcbiAgICAgIH1cbiAgICBjYXNlIFwiVHVwbGVUeXBlXCI6XG4gICAgICB7XG4gICAgICAgIGNvbnN0IGVsZW1lbnRzID0gYXN0LmVsZW1lbnRzLm1hcChlbGVtZW50ID0+IGdvKGVsZW1lbnQudHlwZSkpO1xuICAgICAgICBjb25zdCByZXN0ID0gYXN0LnJlc3QubWFwKGdvKTtcbiAgICAgICAgcmV0dXJuIEVxdWl2YWxlbmNlLm1ha2UoKGEsIGIpID0+IHtcbiAgICAgICAgICBjb25zdCBsZW4gPSBhLmxlbmd0aDtcbiAgICAgICAgICBpZiAobGVuICE9PSBiLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgICAvLyBoYW5kbGUgZWxlbWVudHNcbiAgICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgICBsZXQgaSA9IDA7XG4gICAgICAgICAgZm9yICg7IGkgPCBNYXRoLm1pbihsZW4sIGFzdC5lbGVtZW50cy5sZW5ndGgpOyBpKyspIHtcbiAgICAgICAgICAgIGlmICghZWxlbWVudHNbaV0oYVtpXSwgYltpXSkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgICAvLyBoYW5kbGUgcmVzdCBlbGVtZW50XG4gICAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgICAgaWYgKEFyci5pc05vbkVtcHR5UmVhZG9ubHlBcnJheShyZXN0KSkge1xuICAgICAgICAgICAgY29uc3QgW2hlYWQsIC4uLnRhaWxdID0gcmVzdDtcbiAgICAgICAgICAgIGZvciAoOyBpIDwgbGVuIC0gdGFpbC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICBpZiAoIWhlYWQoYVtpXSwgYltpXSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICAgICAgLy8gaGFuZGxlIHBvc3QgcmVzdCBlbGVtZW50c1xuICAgICAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRhaWwubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgaSArPSBqO1xuICAgICAgICAgICAgICBpZiAoIXRhaWxbal0oYVtpXSwgYltpXSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIGNhc2UgXCJUeXBlTGl0ZXJhbFwiOlxuICAgICAge1xuICAgICAgICBpZiAoYXN0LnByb3BlcnR5U2lnbmF0dXJlcy5sZW5ndGggPT09IDAgJiYgYXN0LmluZGV4U2lnbmF0dXJlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICByZXR1cm4gRXF1YWwuZXF1YWxzO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHByb3BlcnR5U2lnbmF0dXJlcyA9IGFzdC5wcm9wZXJ0eVNpZ25hdHVyZXMubWFwKHBzID0+IGdvKHBzLnR5cGUpKTtcbiAgICAgICAgY29uc3QgaW5kZXhTaWduYXR1cmVzID0gYXN0LmluZGV4U2lnbmF0dXJlcy5tYXAoaXMgPT4gZ28oaXMudHlwZSkpO1xuICAgICAgICByZXR1cm4gRXF1aXZhbGVuY2UubWFrZSgoYSwgYikgPT4ge1xuICAgICAgICAgIGNvbnN0IGFTdHJpbmdLZXlzID0gT2JqZWN0LmtleXMoYSk7XG4gICAgICAgICAgY29uc3QgYVN5bWJvbEtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKGEpO1xuICAgICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICAgIC8vIGhhbmRsZSBwcm9wZXJ0eSBzaWduYXR1cmVzXG4gICAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcm9wZXJ0eVNpZ25hdHVyZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHBzID0gYXN0LnByb3BlcnR5U2lnbmF0dXJlc1tpXTtcbiAgICAgICAgICAgIGNvbnN0IG5hbWUgPSBwcy5uYW1lO1xuICAgICAgICAgICAgY29uc3QgYUhhcyA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChhLCBuYW1lKTtcbiAgICAgICAgICAgIGNvbnN0IGJIYXMgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgbmFtZSk7XG4gICAgICAgICAgICBpZiAocHMuaXNPcHRpb25hbCkge1xuICAgICAgICAgICAgICBpZiAoYUhhcyAhPT0gYkhhcykge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGFIYXMgJiYgYkhhcyAmJiAhcHJvcGVydHlTaWduYXR1cmVzW2ldKGFbbmFtZV0sIGJbbmFtZV0pKSB7XG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgICAgLy8gaGFuZGxlIGluZGV4IHNpZ25hdHVyZXNcbiAgICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgICBsZXQgYlN5bWJvbEtleXM7XG4gICAgICAgICAgbGV0IGJTdHJpbmdLZXlzO1xuICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW5kZXhTaWduYXR1cmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBpcyA9IGFzdC5pbmRleFNpZ25hdHVyZXNbaV07XG4gICAgICAgICAgICBjb25zdCBiYXNlID0gQVNULmdldFBhcmFtZXRlckJhc2UoaXMucGFyYW1ldGVyKTtcbiAgICAgICAgICAgIGNvbnN0IGlzU3ltYm9sID0gQVNULmlzU3ltYm9sS2V5d29yZChiYXNlKTtcbiAgICAgICAgICAgIGlmIChpc1N5bWJvbCkge1xuICAgICAgICAgICAgICBiU3ltYm9sS2V5cyA9IGJTeW1ib2xLZXlzIHx8IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoYik7XG4gICAgICAgICAgICAgIGlmIChhU3ltYm9sS2V5cy5sZW5ndGggIT09IGJTeW1ib2xLZXlzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgYlN0cmluZ0tleXMgPSBiU3RyaW5nS2V5cyB8fCBPYmplY3Qua2V5cyhiKTtcbiAgICAgICAgICAgICAgaWYgKGFTdHJpbmdLZXlzLmxlbmd0aCAhPT0gYlN0cmluZ0tleXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBhS2V5cyA9IGlzU3ltYm9sID8gYVN5bWJvbEtleXMgOiBhU3RyaW5nS2V5cztcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgYUtleXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgY29uc3Qga2V5ID0gYUtleXNbal07XG4gICAgICAgICAgICAgIGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIGtleSkgfHwgIWluZGV4U2lnbmF0dXJlc1tpXShhW2tleV0sIGJba2V5XSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIGNhc2UgXCJVbmlvblwiOlxuICAgICAge1xuICAgICAgICBjb25zdCBzZWFyY2hUcmVlID0gUGFyc2VSZXN1bHQuZ2V0U2VhcmNoVHJlZShhc3QudHlwZXMsIHRydWUpO1xuICAgICAgICBjb25zdCBvd25LZXlzID0gdXRpbF8ub3duS2V5cyhzZWFyY2hUcmVlLmtleXMpO1xuICAgICAgICBjb25zdCBsZW4gPSBvd25LZXlzLmxlbmd0aDtcbiAgICAgICAgcmV0dXJuIEVxdWl2YWxlbmNlLm1ha2UoKGEsIGIpID0+IHtcbiAgICAgICAgICBsZXQgY2FuZGlkYXRlcyA9IFtdO1xuICAgICAgICAgIGlmIChsZW4gPiAwICYmIFByZWRpY2F0ZS5pc1JlY29yZChhKSkge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgICBjb25zdCBuYW1lID0gb3duS2V5c1tpXTtcbiAgICAgICAgICAgICAgY29uc3QgYnVja2V0cyA9IHNlYXJjaFRyZWUua2V5c1tuYW1lXS5idWNrZXRzO1xuICAgICAgICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGEsIG5hbWUpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbGl0ZXJhbCA9IFN0cmluZyhhW25hbWVdKTtcbiAgICAgICAgICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGJ1Y2tldHMsIGxpdGVyYWwpKSB7XG4gICAgICAgICAgICAgICAgICBjYW5kaWRhdGVzID0gY2FuZGlkYXRlcy5jb25jYXQoYnVja2V0c1tsaXRlcmFsXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzZWFyY2hUcmVlLm90aGVyd2lzZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjYW5kaWRhdGVzID0gY2FuZGlkYXRlcy5jb25jYXQoc2VhcmNoVHJlZS5vdGhlcndpc2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjb25zdCB0dXBsZXMgPSBjYW5kaWRhdGVzLm1hcChhc3QgPT4gW2dvKGFzdCksIFBhcnNlUmVzdWx0LmlzKHtcbiAgICAgICAgICAgIGFzdFxuICAgICAgICAgIH0pXSk7XG4gICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0dXBsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IFtlcXVpdmFsZW5jZSwgaXNdID0gdHVwbGVzW2ldO1xuICAgICAgICAgICAgaWYgKGlzKGEpICYmIGlzKGIpKSB7XG4gICAgICAgICAgICAgIGlmIChlcXVpdmFsZW5jZShhLCBiKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gIH1cbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1FcXVpdmFsZW5jZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@effect/schema/dist/esm/Equivalence.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@effect/schema/dist/esm/FastCheck.js":
/*!***********************************************************!*\
  !*** ./node_modules/@effect/schema/dist/esm/FastCheck.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Arbitrary: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.Arbitrary),\n/* harmony export */   ExecutionStatus: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.ExecutionStatus),\n/* harmony export */   PreconditionFailure: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.PreconditionFailure),\n/* harmony export */   Random: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.Random),\n/* harmony export */   Stream: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.Stream),\n/* harmony export */   Value: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.Value),\n/* harmony export */   VerbosityLevel: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.VerbosityLevel),\n/* harmony export */   __commitHash: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.__commitHash),\n/* harmony export */   __type: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.__type),\n/* harmony export */   __version: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.__version),\n/* harmony export */   anything: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.anything),\n/* harmony export */   array: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.array),\n/* harmony export */   ascii: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.ascii),\n/* harmony export */   asciiString: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.asciiString),\n/* harmony export */   assert: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.assert),\n/* harmony export */   asyncDefaultReportMessage: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.asyncDefaultReportMessage),\n/* harmony export */   asyncModelRun: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.asyncModelRun),\n/* harmony export */   asyncProperty: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.asyncProperty),\n/* harmony export */   asyncStringify: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.asyncStringify),\n/* harmony export */   asyncToStringMethod: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.asyncToStringMethod),\n/* harmony export */   base64: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.base64),\n/* harmony export */   base64String: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.base64String),\n/* harmony export */   bigInt: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.bigInt),\n/* harmony export */   bigInt64Array: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.bigInt64Array),\n/* harmony export */   bigIntN: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.bigIntN),\n/* harmony export */   bigUint: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.bigUint),\n/* harmony export */   bigUint64Array: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.bigUint64Array),\n/* harmony export */   bigUintN: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.bigUintN),\n/* harmony export */   boolean: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.boolean),\n/* harmony export */   char: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.char),\n/* harmony export */   char16bits: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.char16bits),\n/* harmony export */   check: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.check),\n/* harmony export */   clone: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.clone),\n/* harmony export */   cloneIfNeeded: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.cloneIfNeeded),\n/* harmony export */   cloneMethod: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.cloneMethod),\n/* harmony export */   commands: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.commands),\n/* harmony export */   compareBooleanFunc: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.compareBooleanFunc),\n/* harmony export */   compareFunc: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.compareFunc),\n/* harmony export */   configureGlobal: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.configureGlobal),\n/* harmony export */   constant: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.constant),\n/* harmony export */   constantFrom: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.constantFrom),\n/* harmony export */   context: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.context),\n/* harmony export */   createDepthIdentifier: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.createDepthIdentifier),\n/* harmony export */   date: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.date),\n/* harmony export */   defaultReportMessage: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.defaultReportMessage),\n/* harmony export */   dictionary: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.dictionary),\n/* harmony export */   domain: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.domain),\n/* harmony export */   double: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.double),\n/* harmony export */   emailAddress: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.emailAddress),\n/* harmony export */   falsy: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.falsy),\n/* harmony export */   float: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.float),\n/* harmony export */   float32Array: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.float32Array),\n/* harmony export */   float64Array: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.float64Array),\n/* harmony export */   fullUnicode: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.fullUnicode),\n/* harmony export */   fullUnicodeString: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.fullUnicodeString),\n/* harmony export */   func: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.func),\n/* harmony export */   gen: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.gen),\n/* harmony export */   getDepthContextFor: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.getDepthContextFor),\n/* harmony export */   hasAsyncToStringMethod: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.hasAsyncToStringMethod),\n/* harmony export */   hasCloneMethod: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.hasCloneMethod),\n/* harmony export */   hasToStringMethod: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.hasToStringMethod),\n/* harmony export */   hash: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.hash),\n/* harmony export */   hexa: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.hexa),\n/* harmony export */   hexaString: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.hexaString),\n/* harmony export */   infiniteStream: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.infiniteStream),\n/* harmony export */   int16Array: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.int16Array),\n/* harmony export */   int32Array: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.int32Array),\n/* harmony export */   int8Array: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.int8Array),\n/* harmony export */   integer: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.integer),\n/* harmony export */   ipV4: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.ipV4),\n/* harmony export */   ipV4Extended: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.ipV4Extended),\n/* harmony export */   ipV6: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.ipV6),\n/* harmony export */   json: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.json),\n/* harmony export */   jsonValue: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.jsonValue),\n/* harmony export */   letrec: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.letrec),\n/* harmony export */   lorem: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.lorem),\n/* harmony export */   mapToConstant: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.mapToConstant),\n/* harmony export */   maxSafeInteger: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.maxSafeInteger),\n/* harmony export */   maxSafeNat: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.maxSafeNat),\n/* harmony export */   memo: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.memo),\n/* harmony export */   mixedCase: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.mixedCase),\n/* harmony export */   modelRun: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.modelRun),\n/* harmony export */   nat: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.nat),\n/* harmony export */   object: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.object),\n/* harmony export */   oneof: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.oneof),\n/* harmony export */   option: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.option),\n/* harmony export */   pre: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.pre),\n/* harmony export */   property: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.property),\n/* harmony export */   readConfigureGlobal: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.readConfigureGlobal),\n/* harmony export */   record: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.record),\n/* harmony export */   resetConfigureGlobal: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.resetConfigureGlobal),\n/* harmony export */   sample: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.sample),\n/* harmony export */   scheduledModelRun: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.scheduledModelRun),\n/* harmony export */   scheduler: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.scheduler),\n/* harmony export */   schedulerFor: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.schedulerFor),\n/* harmony export */   shuffledSubarray: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.shuffledSubarray),\n/* harmony export */   sparseArray: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.sparseArray),\n/* harmony export */   statistics: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.statistics),\n/* harmony export */   stream: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.stream),\n/* harmony export */   string: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.string),\n/* harmony export */   string16bits: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.string16bits),\n/* harmony export */   stringMatching: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.stringMatching),\n/* harmony export */   stringOf: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.stringOf),\n/* harmony export */   stringify: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.stringify),\n/* harmony export */   subarray: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.subarray),\n/* harmony export */   toStringMethod: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.toStringMethod),\n/* harmony export */   tuple: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.tuple),\n/* harmony export */   uint16Array: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.uint16Array),\n/* harmony export */   uint32Array: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.uint32Array),\n/* harmony export */   uint8Array: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.uint8Array),\n/* harmony export */   uint8ClampedArray: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.uint8ClampedArray),\n/* harmony export */   ulid: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.ulid),\n/* harmony export */   unicode: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.unicode),\n/* harmony export */   unicodeJson: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.unicodeJson),\n/* harmony export */   unicodeJsonValue: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.unicodeJsonValue),\n/* harmony export */   unicodeString: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.unicodeString),\n/* harmony export */   uniqueArray: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.uniqueArray),\n/* harmony export */   uuid: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.uuid),\n/* harmony export */   uuidV: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.uuidV),\n/* harmony export */   webAuthority: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.webAuthority),\n/* harmony export */   webFragments: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.webFragments),\n/* harmony export */   webPath: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.webPath),\n/* harmony export */   webQueryParameters: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.webQueryParameters),\n/* harmony export */   webSegment: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.webSegment),\n/* harmony export */   webUrl: () => (/* reexport safe */ fast_check__WEBPACK_IMPORTED_MODULE_0__.webUrl)\n/* harmony export */ });\n/* harmony import */ var fast_check__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! fast-check */ \"(rsc)/./node_modules/fast-check/lib/esm/fast-check.js\");\n/**\n * @since 1.0.0\n */\n/**\n * @category re-exports\n * @since 1.0.0\n */\n\n//# sourceMappingURL=FastCheck.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVmZmVjdC9zY2hlbWEvZGlzdC9lc20vRmFzdENoZWNrLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQzJCO0FBQzNCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWNhZGVteS8uL25vZGVfbW9kdWxlcy9AZWZmZWN0L3NjaGVtYS9kaXN0L2VzbS9GYXN0Q2hlY2suanM/ZTk3MyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBzaW5jZSAxLjAuMFxuICovXG4vKipcbiAqIEBjYXRlZ29yeSByZS1leHBvcnRzXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZXhwb3J0ICogZnJvbSBcImZhc3QtY2hlY2tcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUZhc3RDaGVjay5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@effect/schema/dist/esm/FastCheck.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@effect/schema/dist/esm/ParseResult.js":
/*!*************************************************************!*\
  !*** ./node_modules/@effect/schema/dist/esm/ParseResult.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Declaration: () => (/* binding */ Declaration),\n/* harmony export */   Forbidden: () => (/* binding */ Forbidden),\n/* harmony export */   Index: () => (/* binding */ Index),\n/* harmony export */   Key: () => (/* binding */ Key),\n/* harmony export */   Member: () => (/* binding */ Member),\n/* harmony export */   Missing: () => (/* binding */ Missing),\n/* harmony export */   ParseError: () => (/* binding */ ParseError),\n/* harmony export */   Refinement: () => (/* binding */ Refinement),\n/* harmony export */   Transformation: () => (/* binding */ Transformation),\n/* harmony export */   TupleType: () => (/* binding */ TupleType),\n/* harmony export */   Type: () => (/* binding */ Type),\n/* harmony export */   TypeLiteral: () => (/* binding */ TypeLiteral),\n/* harmony export */   Unexpected: () => (/* binding */ Unexpected),\n/* harmony export */   Union: () => (/* binding */ Union),\n/* harmony export */   asserts: () => (/* binding */ asserts),\n/* harmony export */   decode: () => (/* binding */ decode),\n/* harmony export */   decodeEither: () => (/* binding */ decodeEither),\n/* harmony export */   decodeOption: () => (/* binding */ decodeOption),\n/* harmony export */   decodePromise: () => (/* binding */ decodePromise),\n/* harmony export */   decodeSync: () => (/* binding */ decodeSync),\n/* harmony export */   decodeUnknown: () => (/* binding */ decodeUnknown),\n/* harmony export */   decodeUnknownEither: () => (/* binding */ decodeUnknownEither),\n/* harmony export */   decodeUnknownOption: () => (/* binding */ decodeUnknownOption),\n/* harmony export */   decodeUnknownPromise: () => (/* binding */ decodeUnknownPromise),\n/* harmony export */   decodeUnknownSync: () => (/* binding */ decodeUnknownSync),\n/* harmony export */   eitherOrUndefined: () => (/* binding */ eitherOrUndefined),\n/* harmony export */   encode: () => (/* binding */ encode),\n/* harmony export */   encodeEither: () => (/* binding */ encodeEither),\n/* harmony export */   encodeOption: () => (/* binding */ encodeOption),\n/* harmony export */   encodePromise: () => (/* binding */ encodePromise),\n/* harmony export */   encodeSync: () => (/* binding */ encodeSync),\n/* harmony export */   encodeUnknown: () => (/* binding */ encodeUnknown),\n/* harmony export */   encodeUnknownEither: () => (/* binding */ encodeUnknownEither),\n/* harmony export */   encodeUnknownOption: () => (/* binding */ encodeUnknownOption),\n/* harmony export */   encodeUnknownPromise: () => (/* binding */ encodeUnknownPromise),\n/* harmony export */   encodeUnknownSync: () => (/* binding */ encodeUnknownSync),\n/* harmony export */   fail: () => (/* binding */ fail),\n/* harmony export */   flatMap: () => (/* binding */ flatMap),\n/* harmony export */   fromOption: () => (/* binding */ fromOption),\n/* harmony export */   getFinalTransformation: () => (/* binding */ getFinalTransformation),\n/* harmony export */   getLiterals: () => (/* binding */ getLiterals),\n/* harmony export */   getSearchTree: () => (/* binding */ getSearchTree),\n/* harmony export */   is: () => (/* binding */ is),\n/* harmony export */   map: () => (/* binding */ map),\n/* harmony export */   mapBoth: () => (/* binding */ mapBoth),\n/* harmony export */   mapError: () => (/* binding */ mapError),\n/* harmony export */   mergeParseOptions: () => (/* binding */ mergeParseOptions),\n/* harmony export */   missing: () => (/* binding */ missing),\n/* harmony export */   orElse: () => (/* binding */ orElse),\n/* harmony export */   parseError: () => (/* binding */ parseError),\n/* harmony export */   succeed: () => (/* binding */ succeed),\n/* harmony export */   \"try\": () => (/* binding */ _try),\n/* harmony export */   validate: () => (/* binding */ validate),\n/* harmony export */   validateEither: () => (/* binding */ validateEither),\n/* harmony export */   validateOption: () => (/* binding */ validateOption),\n/* harmony export */   validatePromise: () => (/* binding */ validatePromise),\n/* harmony export */   validateSync: () => (/* binding */ validateSync)\n/* harmony export */ });\n/* harmony import */ var effect_Array__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! effect/Array */ \"(rsc)/./node_modules/effect/dist/esm/Array.js\");\n/* harmony import */ var effect_Data__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! effect/Data */ \"(rsc)/./node_modules/effect/dist/esm/Data.js\");\n/* harmony import */ var effect_Effect__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! effect/Effect */ \"(rsc)/./node_modules/effect/dist/esm/Effect.js\");\n/* harmony import */ var effect_Either__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! effect/Either */ \"(rsc)/./node_modules/effect/dist/esm/Either.js\");\n/* harmony import */ var effect_Function__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! effect/Function */ \"(rsc)/./node_modules/effect/dist/esm/Function.js\");\n/* harmony import */ var effect_GlobalValue__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! effect/GlobalValue */ \"(rsc)/./node_modules/effect/dist/esm/GlobalValue.js\");\n/* harmony import */ var effect_Inspectable__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! effect/Inspectable */ \"(rsc)/./node_modules/effect/dist/esm/Inspectable.js\");\n/* harmony import */ var effect_Option__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! effect/Option */ \"(rsc)/./node_modules/effect/dist/esm/Option.js\");\n/* harmony import */ var effect_Predicate__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! effect/Predicate */ \"(rsc)/./node_modules/effect/dist/esm/Predicate.js\");\n/* harmony import */ var _AST_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./AST.js */ \"(rsc)/./node_modules/@effect/schema/dist/esm/AST.js\");\n/* harmony import */ var _internal_util_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./internal/util.js */ \"(rsc)/./node_modules/@effect/schema/dist/esm/internal/util.js\");\n/* harmony import */ var _TreeFormatter_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./TreeFormatter.js */ \"(rsc)/./node_modules/@effect/schema/dist/esm/TreeFormatter.js\");\n/**\n * @since 1.0.0\n */\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Error that occurs when a declaration has an error.\n *\n * @category model\n * @since 1.0.0\n */\nclass Declaration {\n  ast;\n  actual;\n  error;\n  /**\n   * @since 1.0.0\n   */\n  _tag = \"Declaration\";\n  constructor(ast, actual, error) {\n    this.ast = ast;\n    this.actual = actual;\n    this.error = error;\n  }\n}\n/**\n * Error that occurs when a refinement has an error.\n *\n * @category model\n * @since 1.0.0\n */\nclass Refinement {\n  ast;\n  actual;\n  kind;\n  error;\n  /**\n   * @since 1.0.0\n   */\n  _tag = \"Refinement\";\n  constructor(ast, actual, kind, error) {\n    this.ast = ast;\n    this.actual = actual;\n    this.kind = kind;\n    this.error = error;\n  }\n}\n/**\n * Error that occurs when an array or tuple has an error.\n *\n * @category model\n * @since 1.0.0\n */\nclass TupleType {\n  ast;\n  actual;\n  errors;\n  output;\n  /**\n   * @since 1.0.0\n   */\n  _tag = \"TupleType\";\n  constructor(ast, actual, errors, output = []) {\n    this.ast = ast;\n    this.actual = actual;\n    this.errors = errors;\n    this.output = output;\n  }\n}\n/**\n * The `Index` error indicates that there was an error at a specific index in an array or tuple.\n *\n * @category model\n * @since 1.0.0\n */\nclass Index {\n  index;\n  error;\n  /**\n   * @since 1.0.0\n   */\n  _tag = \"Index\";\n  constructor(index, error) {\n    this.index = index;\n    this.error = error;\n  }\n}\n/**\n * Error that occurs when a type literal or record has an error.\n *\n * @category model\n * @since 1.0.0\n */\nclass TypeLiteral {\n  ast;\n  actual;\n  errors;\n  output;\n  /**\n   * @since 1.0.0\n   */\n  _tag = \"TypeLiteral\";\n  constructor(ast, actual, errors, output = {}) {\n    this.ast = ast;\n    this.actual = actual;\n    this.errors = errors;\n    this.output = output;\n  }\n}\n/**\n * The `Key` variant of the `ParseIssue` type represents an error that occurs when a key in a type literal or record is invalid.\n *\n * @category model\n * @since 1.0.0\n */\nclass Key {\n  key;\n  error;\n  /**\n   * @since 1.0.0\n   */\n  _tag = \"Key\";\n  constructor(key, error) {\n    this.key = key;\n    this.error = error;\n  }\n}\n/**\n * Error that occurs when an unexpected key or index is present.\n *\n * @category model\n * @since 1.0.0\n */\nclass Unexpected {\n  ast;\n  /**\n   * @since 1.0.0\n   */\n  _tag = \"Unexpected\";\n  constructor(ast) {\n    this.ast = ast;\n  }\n}\n/**\n * Error that occurs when a transformation has an error.\n *\n * @category model\n * @since 1.0.0\n */\nclass Transformation {\n  ast;\n  actual;\n  kind;\n  error;\n  /**\n   * @since 1.0.0\n   */\n  _tag = \"Transformation\";\n  constructor(ast, actual, kind, error) {\n    this.ast = ast;\n    this.actual = actual;\n    this.kind = kind;\n    this.error = error;\n  }\n}\n/**\n * The `Type` variant of the `ParseIssue` type represents an error that occurs when the `actual` value is not of the expected type.\n * The `ast` field specifies the expected type, and the `actual` field contains the value that caused the error.\n *\n * @category model\n * @since 1.0.0\n */\nclass Type {\n  ast;\n  actual;\n  /**\n   * @since 1.0.0\n   */\n  _tag = \"Type\";\n  /**\n   * @since 1.0.0\n   */\n  message;\n  constructor(ast, actual, message) {\n    this.ast = ast;\n    this.actual = actual;\n    this.message = effect_Option__WEBPACK_IMPORTED_MODULE_0__.fromNullable(message);\n  }\n}\n/**\n * The `Forbidden` variant of the `ParseIssue` type represents a forbidden operation, such as when encountering an Effect that is not allowed to execute (e.g., using `runSync`).\n *\n * @category model\n * @since 1.0.0\n */\nclass Forbidden {\n  ast;\n  actual;\n  /**\n   * @since 1.0.0\n   */\n  _tag = \"Forbidden\";\n  /**\n   * @since 1.0.0\n   */\n  message;\n  constructor(ast, actual, message) {\n    this.ast = ast;\n    this.actual = actual;\n    this.message = effect_Option__WEBPACK_IMPORTED_MODULE_0__.fromNullable(message);\n  }\n}\n/**\n * Error that occurs when a required key or index is missing.\n *\n * @category model\n * @since 1.0.0\n */\nclass Missing {\n  /**\n   * @since 1.0.0\n   */\n  _tag = \"Missing\";\n}\n/**\n * @category constructors\n * @since 1.0.0\n */\nconst missing = /*#__PURE__*/new Missing();\n/**\n * Error that occurs when a member in a union has an error.\n *\n * @category model\n * @since 1.0.0\n */\nclass Member {\n  ast;\n  error;\n  /**\n   * @since 1.0.0\n   */\n  _tag = \"Member\";\n  constructor(ast, error) {\n    this.ast = ast;\n    this.error = error;\n  }\n}\n/**\n * Error that occurs when a union has an error.\n *\n * @category model\n * @since 1.0.0\n */\nclass Union {\n  ast;\n  actual;\n  errors;\n  /**\n   * @since 1.0.0\n   */\n  _tag = \"Union\";\n  constructor(ast, actual, errors) {\n    this.ast = ast;\n    this.actual = actual;\n    this.errors = errors;\n  }\n}\n/**\n * @since 1.0.0\n */\nclass ParseError extends (0,effect_Data__WEBPACK_IMPORTED_MODULE_1__.TaggedError)(\"ParseError\") {\n  get message() {\n    return this.toString();\n  }\n  /**\n   * @since 1.0.0\n   */\n  toString() {\n    return _TreeFormatter_js__WEBPACK_IMPORTED_MODULE_2__.formatIssueSync(this.error);\n  }\n  /**\n   * @since 1.0.0\n   */\n  toJSON() {\n    return {\n      _id: \"ParseError\",\n      message: this.toString()\n    };\n  }\n  /**\n   * @since 1.0.0\n   */\n  [effect_Inspectable__WEBPACK_IMPORTED_MODULE_3__.NodeInspectSymbol]() {\n    return this.toJSON();\n  }\n}\n/**\n * @category constructors\n * @since 1.0.0\n */\nconst parseError = issue => new ParseError({\n  error: issue\n});\n/**\n * @category constructors\n * @since 1.0.0\n */\nconst succeed = effect_Either__WEBPACK_IMPORTED_MODULE_4__.right;\n/**\n * @category constructors\n * @since 1.0.0\n */\nconst fail = effect_Either__WEBPACK_IMPORTED_MODULE_4__.left;\nconst _try = effect_Either__WEBPACK_IMPORTED_MODULE_4__[\"try\"];\n\n/**\n * @category constructors\n * @since 1.0.0\n */\nconst fromOption = effect_Either__WEBPACK_IMPORTED_MODULE_4__.fromOption;\n/**\n * @category optimisation\n * @since 1.0.0\n */\nconst flatMap = /*#__PURE__*/(0,effect_Function__WEBPACK_IMPORTED_MODULE_5__.dual)(2, (self, f) => {\n  const s = self;\n  if (s[\"_tag\"] === \"Left\") {\n    return s;\n  }\n  if (s[\"_tag\"] === \"Right\") {\n    return f(s.right);\n  }\n  return effect_Effect__WEBPACK_IMPORTED_MODULE_6__.flatMap(self, f);\n});\n/**\n * @category optimisation\n * @since 1.0.0\n */\nconst map = /*#__PURE__*/(0,effect_Function__WEBPACK_IMPORTED_MODULE_5__.dual)(2, (self, f) => {\n  const s = self;\n  if (s[\"_tag\"] === \"Left\") {\n    return s;\n  }\n  if (s[\"_tag\"] === \"Right\") {\n    return effect_Either__WEBPACK_IMPORTED_MODULE_4__.right(f(s.right));\n  }\n  return effect_Effect__WEBPACK_IMPORTED_MODULE_6__.map(self, f);\n});\n/**\n * @category optimisation\n * @since 1.0.0\n */\nconst mapError = /*#__PURE__*/(0,effect_Function__WEBPACK_IMPORTED_MODULE_5__.dual)(2, (self, f) => {\n  const s = self;\n  if (s[\"_tag\"] === \"Left\") {\n    return effect_Either__WEBPACK_IMPORTED_MODULE_4__.left(f(s.left));\n  }\n  if (s[\"_tag\"] === \"Right\") {\n    return s;\n  }\n  return effect_Effect__WEBPACK_IMPORTED_MODULE_6__.mapError(self, f);\n});\n/**\n * @category optimisation\n * @since 1.0.0\n */\nconst eitherOrUndefined = self => {\n  const s = self;\n  if (s[\"_tag\"] === \"Left\" || s[\"_tag\"] === \"Right\") {\n    return s;\n  }\n};\n/**\n * @category optimisation\n * @since 1.0.0\n */\nconst mapBoth = /*#__PURE__*/(0,effect_Function__WEBPACK_IMPORTED_MODULE_5__.dual)(2, (self, options) => {\n  const s = self;\n  if (s[\"_tag\"] === \"Left\") {\n    return effect_Either__WEBPACK_IMPORTED_MODULE_4__.left(options.onFailure(s.left));\n  }\n  if (s[\"_tag\"] === \"Right\") {\n    return effect_Either__WEBPACK_IMPORTED_MODULE_4__.right(options.onSuccess(s.right));\n  }\n  return effect_Effect__WEBPACK_IMPORTED_MODULE_6__.mapBoth(self, options);\n});\n/**\n * @category optimisation\n * @since 1.0.0\n */\nconst orElse = /*#__PURE__*/(0,effect_Function__WEBPACK_IMPORTED_MODULE_5__.dual)(2, (self, f) => {\n  const s = self;\n  if (s[\"_tag\"] === \"Left\") {\n    return f(s.left);\n  }\n  if (s[\"_tag\"] === \"Right\") {\n    return s;\n  }\n  return effect_Effect__WEBPACK_IMPORTED_MODULE_6__.catchAll(self, f);\n});\n/** @internal */\nconst mergeParseOptions = (a, b) => {\n  if (a === undefined) {\n    return b;\n  }\n  if (b === undefined) {\n    return a;\n  }\n  const out = {};\n  out.errors = b.errors ?? a.errors;\n  out.onExcessProperty = b.onExcessProperty ?? a.onExcessProperty;\n  return out;\n};\nconst getEither = (ast, isDecoding, options) => {\n  const parser = goMemo(ast, isDecoding);\n  return (u, overrideOptions) => parser(u, mergeParseOptions(options, overrideOptions));\n};\nconst getSync = (ast, isDecoding, options) => {\n  const parser = getEither(ast, isDecoding, options);\n  return (input, overrideOptions) => effect_Either__WEBPACK_IMPORTED_MODULE_4__.getOrThrowWith(parser(input, overrideOptions), e => new Error(_TreeFormatter_js__WEBPACK_IMPORTED_MODULE_2__.formatIssueSync(e)));\n};\nconst getOption = (ast, isDecoding, options) => {\n  const parser = getEither(ast, isDecoding, options);\n  return (input, overrideOptions) => effect_Option__WEBPACK_IMPORTED_MODULE_0__.getRight(parser(input, overrideOptions));\n};\nconst getEffect = (ast, isDecoding, options) => {\n  const parser = goMemo(ast, isDecoding);\n  return (input, overrideOptions) => parser(input, {\n    ...mergeParseOptions(options, overrideOptions),\n    isEffectAllowed: true\n  });\n};\n/**\n * @category decoding\n * @since 1.0.0\n */\nconst decodeUnknownSync = (schema, options) => getSync(schema.ast, true, options);\n/**\n * @category decoding\n * @since 1.0.0\n */\nconst decodeUnknownOption = (schema, options) => getOption(schema.ast, true, options);\n/**\n * @category decoding\n * @since 1.0.0\n */\nconst decodeUnknownEither = (schema, options) => getEither(schema.ast, true, options);\n/**\n * @category decoding\n * @since 1.0.0\n */\nconst decodeUnknownPromise = (schema, options) => {\n  const parser = decodeUnknown(schema, options);\n  return (u, overrideOptions) => effect_Effect__WEBPACK_IMPORTED_MODULE_6__.runPromise(parser(u, overrideOptions));\n};\n/**\n * @category decoding\n * @since 1.0.0\n */\nconst decodeUnknown = (schema, options) => getEffect(schema.ast, true, options);\n/**\n * @category encoding\n * @since 1.0.0\n */\nconst encodeUnknownSync = (schema, options) => getSync(schema.ast, false, options);\n/**\n * @category encoding\n * @since 1.0.0\n */\nconst encodeUnknownOption = (schema, options) => getOption(schema.ast, false, options);\n/**\n * @category encoding\n * @since 1.0.0\n */\nconst encodeUnknownEither = (schema, options) => getEither(schema.ast, false, options);\n/**\n * @category encoding\n * @since 1.0.0\n */\nconst encodeUnknownPromise = (schema, options) => {\n  const parser = encodeUnknown(schema, options);\n  return (u, overrideOptions) => effect_Effect__WEBPACK_IMPORTED_MODULE_6__.runPromise(parser(u, overrideOptions));\n};\n/**\n * @category encoding\n * @since 1.0.0\n */\nconst encodeUnknown = (schema, options) => getEffect(schema.ast, false, options);\n/**\n * @category decoding\n * @since 1.0.0\n */\nconst decodeSync = decodeUnknownSync;\n/**\n * @category decoding\n * @since 1.0.0\n */\nconst decodeOption = decodeUnknownOption;\n/**\n * @category decoding\n * @since 1.0.0\n */\nconst decodeEither = decodeUnknownEither;\n/**\n * @category decoding\n * @since 1.0.0\n */\nconst decodePromise = decodeUnknownPromise;\n/**\n * @category decoding\n * @since 1.0.0\n */\nconst decode = decodeUnknown;\n/**\n * @category validation\n * @since 1.0.0\n */\nconst validateSync = (schema, options) => getSync(_AST_js__WEBPACK_IMPORTED_MODULE_7__.typeAST(schema.ast), true, options);\n/**\n * @category validation\n * @since 1.0.0\n */\nconst validateOption = (schema, options) => getOption(_AST_js__WEBPACK_IMPORTED_MODULE_7__.typeAST(schema.ast), true, options);\n/**\n * @category validation\n * @since 1.0.0\n */\nconst validateEither = (schema, options) => getEither(_AST_js__WEBPACK_IMPORTED_MODULE_7__.typeAST(schema.ast), true, options);\n/**\n * @category validation\n * @since 1.0.0\n */\nconst validatePromise = (schema, options) => {\n  const parser = validate(schema, options);\n  return (u, overrideOptions) => effect_Effect__WEBPACK_IMPORTED_MODULE_6__.runPromise(parser(u, overrideOptions));\n};\n/**\n * @category validation\n * @since 1.0.0\n */\nconst validate = (schema, options) => getEffect(_AST_js__WEBPACK_IMPORTED_MODULE_7__.typeAST(schema.ast), true, options);\n/**\n * @category validation\n * @since 1.0.0\n */\nconst is = (schema, options) => {\n  const parser = goMemo(_AST_js__WEBPACK_IMPORTED_MODULE_7__.typeAST(schema.ast), true);\n  return (u, overrideOptions) => effect_Either__WEBPACK_IMPORTED_MODULE_4__.isRight(parser(u, {\n    ...mergeParseOptions(options, overrideOptions),\n    isExact: true\n  }));\n};\n/**\n * @category validation\n * @since 1.0.0\n */\nconst asserts = (schema, options) => {\n  const parser = goMemo(_AST_js__WEBPACK_IMPORTED_MODULE_7__.typeAST(schema.ast), true);\n  return (u, overrideOptions) => {\n    const result = parser(u, {\n      ...mergeParseOptions(options, overrideOptions),\n      isExact: true\n    });\n    if (effect_Either__WEBPACK_IMPORTED_MODULE_4__.isLeft(result)) {\n      throw new Error(_TreeFormatter_js__WEBPACK_IMPORTED_MODULE_2__.formatIssueSync(result.left));\n    }\n  };\n};\n/**\n * @category encoding\n * @since 1.0.0\n */\nconst encodeSync = encodeUnknownSync;\n/**\n * @category encoding\n * @since 1.0.0\n */\nconst encodeOption = encodeUnknownOption;\n/**\n * @category encoding\n * @since 1.0.0\n */\nconst encodeEither = encodeUnknownEither;\n/**\n * @category encoding\n * @since 1.0.0\n */\nconst encodePromise = encodeUnknownPromise;\n/**\n * @category encoding\n * @since 1.0.0\n */\nconst encode = encodeUnknown;\nconst decodeMemoMap = /*#__PURE__*/(0,effect_GlobalValue__WEBPACK_IMPORTED_MODULE_8__.globalValue)( /*#__PURE__*/Symbol.for(\"@effect/schema/Parser/decodeMemoMap\"), () => new WeakMap());\nconst encodeMemoMap = /*#__PURE__*/(0,effect_GlobalValue__WEBPACK_IMPORTED_MODULE_8__.globalValue)( /*#__PURE__*/Symbol.for(\"@effect/schema/Parser/encodeMemoMap\"), () => new WeakMap());\nconst goMemo = (ast, isDecoding) => {\n  const memoMap = isDecoding ? decodeMemoMap : encodeMemoMap;\n  const memo = memoMap.get(ast);\n  if (memo) {\n    return memo;\n  }\n  const parser = go(ast, isDecoding);\n  memoMap.set(ast, parser);\n  return parser;\n};\nconst getConcurrency = ast => effect_Option__WEBPACK_IMPORTED_MODULE_0__.getOrUndefined(_AST_js__WEBPACK_IMPORTED_MODULE_7__.getConcurrencyAnnotation(ast));\nconst getBatching = ast => effect_Option__WEBPACK_IMPORTED_MODULE_0__.getOrUndefined(_AST_js__WEBPACK_IMPORTED_MODULE_7__.getBatchingAnnotation(ast));\nconst go = (ast, isDecoding) => {\n  switch (ast._tag) {\n    case \"Refinement\":\n      {\n        if (isDecoding) {\n          const from = goMemo(ast.from, true);\n          return (i, options) => handleForbidden(flatMap(mapError(from(i, options), e => new Refinement(ast, i, \"From\", e)), a => effect_Option__WEBPACK_IMPORTED_MODULE_0__.match(ast.filter(a, options ?? _AST_js__WEBPACK_IMPORTED_MODULE_7__.defaultParseOption, ast), {\n            onNone: () => effect_Either__WEBPACK_IMPORTED_MODULE_4__.right(a),\n            onSome: e => effect_Either__WEBPACK_IMPORTED_MODULE_4__.left(new Refinement(ast, i, \"Predicate\", e))\n          })), ast, i, options);\n        } else {\n          const from = goMemo(_AST_js__WEBPACK_IMPORTED_MODULE_7__.typeAST(ast), true);\n          const to = goMemo(dropRightRefinement(ast.from), false);\n          return (i, options) => handleForbidden(flatMap(from(i, options), a => to(a, options)), ast, i, options);\n        }\n      }\n    case \"Transformation\":\n      {\n        const transform = getFinalTransformation(ast.transformation, isDecoding);\n        const from = isDecoding ? goMemo(ast.from, true) : goMemo(ast.to, false);\n        const to = isDecoding ? goMemo(ast.to, true) : goMemo(ast.from, false);\n        return (i1, options) => handleForbidden(flatMap(mapError(from(i1, options), e => new Transformation(ast, i1, isDecoding ? \"Encoded\" : \"Type\", e)), a => flatMap(mapError(transform(a, options ?? _AST_js__WEBPACK_IMPORTED_MODULE_7__.defaultParseOption, ast), e => new Transformation(ast, i1, \"Transformation\", e)), i2 => mapError(to(i2, options), e => new Transformation(ast, i1, isDecoding ? \"Type\" : \"Encoded\", e)))), ast, i1, options);\n      }\n    case \"Declaration\":\n      {\n        const parse = isDecoding ? ast.decodeUnknown(...ast.typeParameters) : ast.encodeUnknown(...ast.typeParameters);\n        return (i, options) => handleForbidden(mapError(parse(i, options ?? _AST_js__WEBPACK_IMPORTED_MODULE_7__.defaultParseOption, ast), e => new Declaration(ast, i, e)), ast, i, options);\n      }\n    case \"Literal\":\n      return fromRefinement(ast, u => u === ast.literal);\n    case \"UniqueSymbol\":\n      return fromRefinement(ast, u => u === ast.symbol);\n    case \"UndefinedKeyword\":\n      return fromRefinement(ast, effect_Predicate__WEBPACK_IMPORTED_MODULE_9__.isUndefined);\n    case \"VoidKeyword\":\n      return fromRefinement(ast, effect_Predicate__WEBPACK_IMPORTED_MODULE_9__.isUndefined);\n    case \"NeverKeyword\":\n      return fromRefinement(ast, effect_Predicate__WEBPACK_IMPORTED_MODULE_9__.isNever);\n    case \"UnknownKeyword\":\n    case \"AnyKeyword\":\n      return effect_Either__WEBPACK_IMPORTED_MODULE_4__.right;\n    case \"StringKeyword\":\n      return fromRefinement(ast, effect_Predicate__WEBPACK_IMPORTED_MODULE_9__.isString);\n    case \"NumberKeyword\":\n      return fromRefinement(ast, effect_Predicate__WEBPACK_IMPORTED_MODULE_9__.isNumber);\n    case \"BooleanKeyword\":\n      return fromRefinement(ast, effect_Predicate__WEBPACK_IMPORTED_MODULE_9__.isBoolean);\n    case \"BigIntKeyword\":\n      return fromRefinement(ast, effect_Predicate__WEBPACK_IMPORTED_MODULE_9__.isBigInt);\n    case \"SymbolKeyword\":\n      return fromRefinement(ast, effect_Predicate__WEBPACK_IMPORTED_MODULE_9__.isSymbol);\n    case \"ObjectKeyword\":\n      return fromRefinement(ast, effect_Predicate__WEBPACK_IMPORTED_MODULE_9__.isObject);\n    case \"Enums\":\n      return fromRefinement(ast, u => ast.enums.some(([_, value]) => value === u));\n    case \"TemplateLiteral\":\n      {\n        const regex = _AST_js__WEBPACK_IMPORTED_MODULE_7__.getTemplateLiteralRegExp(ast);\n        return fromRefinement(ast, u => effect_Predicate__WEBPACK_IMPORTED_MODULE_9__.isString(u) && regex.test(u));\n      }\n    case \"TupleType\":\n      {\n        const elements = ast.elements.map(e => goMemo(e.type, isDecoding));\n        const rest = ast.rest.map(ast => goMemo(ast, isDecoding));\n        let requiredLen = ast.elements.filter(e => !e.isOptional).length;\n        if (ast.rest.length > 0) {\n          requiredLen += ast.rest.length - 1;\n        }\n        const expectedAST = _AST_js__WEBPACK_IMPORTED_MODULE_7__.Union.make(ast.elements.map((_, i) => new _AST_js__WEBPACK_IMPORTED_MODULE_7__.Literal(i)));\n        const concurrency = getConcurrency(ast);\n        const batching = getBatching(ast);\n        return (input, options) => {\n          if (!effect_Array__WEBPACK_IMPORTED_MODULE_10__.isArray(input)) {\n            return effect_Either__WEBPACK_IMPORTED_MODULE_4__.left(new Type(ast, input));\n          }\n          const allErrors = options?.errors === \"all\";\n          const es = [];\n          let stepKey = 0;\n          // ---------------------------------------------\n          // handle missing indexes\n          // ---------------------------------------------\n          const len = input.length;\n          for (let i = len; i <= requiredLen - 1; i++) {\n            const e = new Index(i, missing);\n            if (allErrors) {\n              es.push([stepKey++, e]);\n              continue;\n            } else {\n              return effect_Either__WEBPACK_IMPORTED_MODULE_4__.left(new TupleType(ast, input, [e]));\n            }\n          }\n          // ---------------------------------------------\n          // handle excess indexes\n          // ---------------------------------------------\n          if (ast.rest.length === 0) {\n            for (let i = ast.elements.length; i <= len - 1; i++) {\n              const e = new Index(i, new Unexpected(expectedAST));\n              if (allErrors) {\n                es.push([stepKey++, e]);\n                continue;\n              } else {\n                return effect_Either__WEBPACK_IMPORTED_MODULE_4__.left(new TupleType(ast, input, [e]));\n              }\n            }\n          }\n          const output = [];\n          let i = 0;\n          let queue = undefined;\n          // ---------------------------------------------\n          // handle elements\n          // ---------------------------------------------\n          for (; i < elements.length; i++) {\n            if (len < i + 1) {\n              if (ast.elements[i].isOptional) {\n                // the input element is missing\n                continue;\n              }\n            } else {\n              const parser = elements[i];\n              const te = parser(input[i], options);\n              const eu = eitherOrUndefined(te);\n              if (eu) {\n                if (effect_Either__WEBPACK_IMPORTED_MODULE_4__.isLeft(eu)) {\n                  // the input element is present but is not valid\n                  const e = new Index(i, eu.left);\n                  if (allErrors) {\n                    es.push([stepKey++, e]);\n                    continue;\n                  } else {\n                    return effect_Either__WEBPACK_IMPORTED_MODULE_4__.left(new TupleType(ast, input, [e], sortByIndex(output)));\n                  }\n                }\n                output.push([stepKey++, eu.right]);\n              } else {\n                const nk = stepKey++;\n                const index = i;\n                if (!queue) {\n                  queue = [];\n                }\n                queue.push(({\n                  es,\n                  output\n                }) => effect_Effect__WEBPACK_IMPORTED_MODULE_6__.flatMap(effect_Effect__WEBPACK_IMPORTED_MODULE_6__.either(te), t => {\n                  if (effect_Either__WEBPACK_IMPORTED_MODULE_4__.isLeft(t)) {\n                    // the input element is present but is not valid\n                    const e = new Index(index, t.left);\n                    if (allErrors) {\n                      es.push([nk, e]);\n                      return effect_Effect__WEBPACK_IMPORTED_MODULE_6__[\"void\"];\n                    } else {\n                      return effect_Either__WEBPACK_IMPORTED_MODULE_4__.left(new TupleType(ast, input, [e], sortByIndex(output)));\n                    }\n                  }\n                  output.push([nk, t.right]);\n                  return effect_Effect__WEBPACK_IMPORTED_MODULE_6__[\"void\"];\n                }));\n              }\n            }\n          }\n          // ---------------------------------------------\n          // handle rest element\n          // ---------------------------------------------\n          if (effect_Array__WEBPACK_IMPORTED_MODULE_10__.isNonEmptyReadonlyArray(rest)) {\n            const [head, ...tail] = rest;\n            for (; i < len - tail.length; i++) {\n              const te = head(input[i], options);\n              const eu = eitherOrUndefined(te);\n              if (eu) {\n                if (effect_Either__WEBPACK_IMPORTED_MODULE_4__.isLeft(eu)) {\n                  const e = new Index(i, eu.left);\n                  if (allErrors) {\n                    es.push([stepKey++, e]);\n                    continue;\n                  } else {\n                    return effect_Either__WEBPACK_IMPORTED_MODULE_4__.left(new TupleType(ast, input, [e], sortByIndex(output)));\n                  }\n                } else {\n                  output.push([stepKey++, eu.right]);\n                }\n              } else {\n                const nk = stepKey++;\n                const index = i;\n                if (!queue) {\n                  queue = [];\n                }\n                queue.push(({\n                  es,\n                  output\n                }) => effect_Effect__WEBPACK_IMPORTED_MODULE_6__.flatMap(effect_Effect__WEBPACK_IMPORTED_MODULE_6__.either(te), t => {\n                  if (effect_Either__WEBPACK_IMPORTED_MODULE_4__.isLeft(t)) {\n                    const e = new Index(index, t.left);\n                    if (allErrors) {\n                      es.push([nk, e]);\n                      return effect_Effect__WEBPACK_IMPORTED_MODULE_6__[\"void\"];\n                    } else {\n                      return effect_Either__WEBPACK_IMPORTED_MODULE_4__.left(new TupleType(ast, input, [e], sortByIndex(output)));\n                    }\n                  } else {\n                    output.push([nk, t.right]);\n                    return effect_Effect__WEBPACK_IMPORTED_MODULE_6__[\"void\"];\n                  }\n                }));\n              }\n            }\n            // ---------------------------------------------\n            // handle post rest elements\n            // ---------------------------------------------\n            for (let j = 0; j < tail.length; j++) {\n              i += j;\n              if (len < i + 1) {\n                continue;\n              } else {\n                const te = tail[j](input[i], options);\n                const eu = eitherOrUndefined(te);\n                if (eu) {\n                  if (effect_Either__WEBPACK_IMPORTED_MODULE_4__.isLeft(eu)) {\n                    // the input element is present but is not valid\n                    const e = new Index(i, eu.left);\n                    if (allErrors) {\n                      es.push([stepKey++, e]);\n                      continue;\n                    } else {\n                      return effect_Either__WEBPACK_IMPORTED_MODULE_4__.left(new TupleType(ast, input, [e], sortByIndex(output)));\n                    }\n                  }\n                  output.push([stepKey++, eu.right]);\n                } else {\n                  const nk = stepKey++;\n                  const index = i;\n                  if (!queue) {\n                    queue = [];\n                  }\n                  queue.push(({\n                    es,\n                    output\n                  }) => effect_Effect__WEBPACK_IMPORTED_MODULE_6__.flatMap(effect_Effect__WEBPACK_IMPORTED_MODULE_6__.either(te), t => {\n                    if (effect_Either__WEBPACK_IMPORTED_MODULE_4__.isLeft(t)) {\n                      // the input element is present but is not valid\n                      const e = new Index(index, t.left);\n                      if (allErrors) {\n                        es.push([nk, e]);\n                        return effect_Effect__WEBPACK_IMPORTED_MODULE_6__[\"void\"];\n                      } else {\n                        return effect_Either__WEBPACK_IMPORTED_MODULE_4__.left(new TupleType(ast, input, [e], sortByIndex(output)));\n                      }\n                    }\n                    output.push([nk, t.right]);\n                    return effect_Effect__WEBPACK_IMPORTED_MODULE_6__[\"void\"];\n                  }));\n                }\n              }\n            }\n          }\n          // ---------------------------------------------\n          // compute result\n          // ---------------------------------------------\n          const computeResult = ({\n            es,\n            output\n          }) => effect_Array__WEBPACK_IMPORTED_MODULE_10__.isNonEmptyArray(es) ? effect_Either__WEBPACK_IMPORTED_MODULE_4__.left(new TupleType(ast, input, sortByIndex(es), sortByIndex(output))) : effect_Either__WEBPACK_IMPORTED_MODULE_4__.right(sortByIndex(output));\n          if (queue && queue.length > 0) {\n            const cqueue = queue;\n            return effect_Effect__WEBPACK_IMPORTED_MODULE_6__.suspend(() => {\n              const state = {\n                es: effect_Array__WEBPACK_IMPORTED_MODULE_10__.copy(es),\n                output: effect_Array__WEBPACK_IMPORTED_MODULE_10__.copy(output)\n              };\n              return effect_Effect__WEBPACK_IMPORTED_MODULE_6__.flatMap(effect_Effect__WEBPACK_IMPORTED_MODULE_6__.forEach(cqueue, f => f(state), {\n                concurrency,\n                batching,\n                discard: true\n              }), () => computeResult(state));\n            });\n          }\n          return computeResult({\n            output,\n            es\n          });\n        };\n      }\n    case \"TypeLiteral\":\n      {\n        if (ast.propertySignatures.length === 0 && ast.indexSignatures.length === 0) {\n          return fromRefinement(ast, effect_Predicate__WEBPACK_IMPORTED_MODULE_9__.isNotNullable);\n        }\n        const propertySignatures = [];\n        const expectedKeys = {};\n        for (const ps of ast.propertySignatures) {\n          propertySignatures.push([goMemo(ps.type, isDecoding), ps]);\n          expectedKeys[ps.name] = null;\n        }\n        const indexSignatures = ast.indexSignatures.map(is => [goMemo(is.parameter, isDecoding), goMemo(is.type, isDecoding), is.parameter]);\n        const expectedAST = _AST_js__WEBPACK_IMPORTED_MODULE_7__.Union.make(ast.indexSignatures.map(is => is.parameter).concat(_internal_util_js__WEBPACK_IMPORTED_MODULE_11__.ownKeys(expectedKeys).map(key => effect_Predicate__WEBPACK_IMPORTED_MODULE_9__.isSymbol(key) ? new _AST_js__WEBPACK_IMPORTED_MODULE_7__.UniqueSymbol(key) : new _AST_js__WEBPACK_IMPORTED_MODULE_7__.Literal(key))));\n        const expected = goMemo(expectedAST, isDecoding);\n        const concurrency = getConcurrency(ast);\n        const batching = getBatching(ast);\n        return (input, options) => {\n          if (!effect_Predicate__WEBPACK_IMPORTED_MODULE_9__.isRecord(input)) {\n            return effect_Either__WEBPACK_IMPORTED_MODULE_4__.left(new Type(ast, input));\n          }\n          const allErrors = options?.errors === \"all\";\n          const es = [];\n          let stepKey = 0;\n          // ---------------------------------------------\n          // handle excess properties\n          // ---------------------------------------------\n          const onExcessPropertyError = options?.onExcessProperty === \"error\";\n          const onExcessPropertyPreserve = options?.onExcessProperty === \"preserve\";\n          const output = {};\n          if (onExcessPropertyError || onExcessPropertyPreserve) {\n            for (const key of _internal_util_js__WEBPACK_IMPORTED_MODULE_11__.ownKeys(input)) {\n              const eu = eitherOrUndefined(expected(key, options));\n              if (effect_Either__WEBPACK_IMPORTED_MODULE_4__.isLeft(eu)) {\n                // key is unexpected\n                if (onExcessPropertyError) {\n                  const e = new Key(key, new Unexpected(expectedAST));\n                  if (allErrors) {\n                    es.push([stepKey++, e]);\n                    continue;\n                  } else {\n                    return effect_Either__WEBPACK_IMPORTED_MODULE_4__.left(new TypeLiteral(ast, input, [e], output));\n                  }\n                } else {\n                  // preserve key\n                  output[key] = input[key];\n                }\n              }\n            }\n          }\n          let queue = undefined;\n          const isExact = options?.isExact === true;\n          for (let i = 0; i < propertySignatures.length; i++) {\n            const ps = propertySignatures[i][1];\n            const name = ps.name;\n            const hasKey = Object.prototype.hasOwnProperty.call(input, name);\n            if (!hasKey) {\n              if (ps.isOptional) {\n                continue;\n              } else if (isExact) {\n                const e = new Key(name, missing);\n                if (allErrors) {\n                  es.push([stepKey++, e]);\n                  continue;\n                } else {\n                  return effect_Either__WEBPACK_IMPORTED_MODULE_4__.left(new TypeLiteral(ast, input, [e], output));\n                }\n              }\n            }\n            const parser = propertySignatures[i][0];\n            const te = parser(input[name], options);\n            const eu = eitherOrUndefined(te);\n            if (eu) {\n              if (effect_Either__WEBPACK_IMPORTED_MODULE_4__.isLeft(eu)) {\n                const e = new Key(name, hasKey ? eu.left : missing);\n                if (allErrors) {\n                  es.push([stepKey++, e]);\n                  continue;\n                } else {\n                  return effect_Either__WEBPACK_IMPORTED_MODULE_4__.left(new TypeLiteral(ast, input, [e], output));\n                }\n              }\n              output[name] = eu.right;\n            } else {\n              const nk = stepKey++;\n              const index = name;\n              if (!queue) {\n                queue = [];\n              }\n              queue.push(({\n                es,\n                output\n              }) => effect_Effect__WEBPACK_IMPORTED_MODULE_6__.flatMap(effect_Effect__WEBPACK_IMPORTED_MODULE_6__.either(te), t => {\n                if (effect_Either__WEBPACK_IMPORTED_MODULE_4__.isLeft(t)) {\n                  const e = new Key(index, hasKey ? t.left : missing);\n                  if (allErrors) {\n                    es.push([nk, e]);\n                    return effect_Effect__WEBPACK_IMPORTED_MODULE_6__[\"void\"];\n                  } else {\n                    return effect_Either__WEBPACK_IMPORTED_MODULE_4__.left(new TypeLiteral(ast, input, [e], output));\n                  }\n                }\n                output[index] = t.right;\n                return effect_Effect__WEBPACK_IMPORTED_MODULE_6__[\"void\"];\n              }));\n            }\n          }\n          // ---------------------------------------------\n          // handle index signatures\n          // ---------------------------------------------\n          for (let i = 0; i < indexSignatures.length; i++) {\n            const indexSignature = indexSignatures[i];\n            const parameter = indexSignature[0];\n            const type = indexSignature[1];\n            const keys = _internal_util_js__WEBPACK_IMPORTED_MODULE_11__.getKeysForIndexSignature(input, indexSignature[2]);\n            for (const key of keys) {\n              // ---------------------------------------------\n              // handle keys\n              // ---------------------------------------------\n              const keu = eitherOrUndefined(parameter(key, options));\n              if (keu && effect_Either__WEBPACK_IMPORTED_MODULE_4__.isRight(keu)) {\n                // ---------------------------------------------\n                // handle values\n                // ---------------------------------------------\n                const vpr = type(input[key], options);\n                const veu = eitherOrUndefined(vpr);\n                if (veu) {\n                  if (effect_Either__WEBPACK_IMPORTED_MODULE_4__.isLeft(veu)) {\n                    const e = new Key(key, veu.left);\n                    if (allErrors) {\n                      es.push([stepKey++, e]);\n                      continue;\n                    } else {\n                      return effect_Either__WEBPACK_IMPORTED_MODULE_4__.left(new TypeLiteral(ast, input, [e], output));\n                    }\n                  } else {\n                    if (!Object.prototype.hasOwnProperty.call(expectedKeys, key)) {\n                      output[key] = veu.right;\n                    }\n                  }\n                } else {\n                  const nk = stepKey++;\n                  const index = key;\n                  if (!queue) {\n                    queue = [];\n                  }\n                  queue.push(({\n                    es,\n                    output\n                  }) => effect_Effect__WEBPACK_IMPORTED_MODULE_6__.flatMap(effect_Effect__WEBPACK_IMPORTED_MODULE_6__.either(vpr), tv => {\n                    if (effect_Either__WEBPACK_IMPORTED_MODULE_4__.isLeft(tv)) {\n                      const e = new Key(index, tv.left);\n                      if (allErrors) {\n                        es.push([nk, e]);\n                        return effect_Effect__WEBPACK_IMPORTED_MODULE_6__[\"void\"];\n                      } else {\n                        return effect_Either__WEBPACK_IMPORTED_MODULE_4__.left(new TypeLiteral(ast, input, [e], output));\n                      }\n                    } else {\n                      if (!Object.prototype.hasOwnProperty.call(expectedKeys, key)) {\n                        output[key] = tv.right;\n                      }\n                      return effect_Effect__WEBPACK_IMPORTED_MODULE_6__[\"void\"];\n                    }\n                  }));\n                }\n              }\n            }\n          }\n          // ---------------------------------------------\n          // compute result\n          // ---------------------------------------------\n          const computeResult = ({\n            es,\n            output\n          }) => effect_Array__WEBPACK_IMPORTED_MODULE_10__.isNonEmptyArray(es) ? effect_Either__WEBPACK_IMPORTED_MODULE_4__.left(new TypeLiteral(ast, input, sortByIndex(es), output)) : effect_Either__WEBPACK_IMPORTED_MODULE_4__.right(output);\n          if (queue && queue.length > 0) {\n            const cqueue = queue;\n            return effect_Effect__WEBPACK_IMPORTED_MODULE_6__.suspend(() => {\n              const state = {\n                es: effect_Array__WEBPACK_IMPORTED_MODULE_10__.copy(es),\n                output: Object.assign({}, output)\n              };\n              return effect_Effect__WEBPACK_IMPORTED_MODULE_6__.flatMap(effect_Effect__WEBPACK_IMPORTED_MODULE_6__.forEach(cqueue, f => f(state), {\n                concurrency,\n                batching,\n                discard: true\n              }), () => computeResult(state));\n            });\n          }\n          return computeResult({\n            es,\n            output\n          });\n        };\n      }\n    case \"Union\":\n      {\n        const searchTree = getSearchTree(ast.types, isDecoding);\n        const ownKeys = _internal_util_js__WEBPACK_IMPORTED_MODULE_11__.ownKeys(searchTree.keys);\n        const len = ownKeys.length;\n        const map = new Map();\n        for (let i = 0; i < ast.types.length; i++) {\n          map.set(ast.types[i], goMemo(ast.types[i], isDecoding));\n        }\n        const concurrency = getConcurrency(ast) ?? 1;\n        const batching = getBatching(ast);\n        return (input, options) => {\n          const es = [];\n          let stepKey = 0;\n          let candidates = [];\n          if (len > 0) {\n            // if there is at least one key then input must be an object\n            if (effect_Predicate__WEBPACK_IMPORTED_MODULE_9__.isRecord(input)) {\n              for (let i = 0; i < len; i++) {\n                const name = ownKeys[i];\n                const buckets = searchTree.keys[name].buckets;\n                // for each property that should contain a literal, check if the input contains that property\n                if (Object.prototype.hasOwnProperty.call(input, name)) {\n                  const literal = String(input[name]);\n                  // check that the value obtained from the input for the property corresponds to an existing bucket\n                  if (Object.prototype.hasOwnProperty.call(buckets, literal)) {\n                    // retrive the minimal set of candidates for decoding\n                    candidates = candidates.concat(buckets[literal]);\n                  } else {\n                    const literals = _AST_js__WEBPACK_IMPORTED_MODULE_7__.Union.make(searchTree.keys[name].literals);\n                    es.push([stepKey++, new TypeLiteral(new _AST_js__WEBPACK_IMPORTED_MODULE_7__.TypeLiteral([new _AST_js__WEBPACK_IMPORTED_MODULE_7__.PropertySignature(name, literals, false, true)], []), input, [new Key(name, new Type(literals, input[name]))])]);\n                  }\n                } else {\n                  const literals = _AST_js__WEBPACK_IMPORTED_MODULE_7__.Union.make(searchTree.keys[name].literals);\n                  es.push([stepKey++, new TypeLiteral(new _AST_js__WEBPACK_IMPORTED_MODULE_7__.TypeLiteral([new _AST_js__WEBPACK_IMPORTED_MODULE_7__.PropertySignature(name, literals, false, true)], []), input, [new Key(name, missing)])]);\n                }\n              }\n            } else {\n              es.push([stepKey++, new Type(ast, input)]);\n            }\n          }\n          if (searchTree.otherwise.length > 0) {\n            candidates = candidates.concat(searchTree.otherwise);\n          }\n          let queue = undefined;\n          for (let i = 0; i < candidates.length; i++) {\n            const candidate = candidates[i];\n            const pr = map.get(candidate)(input, options);\n            // the members of a union are ordered based on which one should be decoded first,\n            // therefore if one member has added a task, all subsequent members must\n            // also add a task to the queue even if they are synchronous\n            const eu = !queue || queue.length === 0 ? eitherOrUndefined(pr) : undefined;\n            if (eu) {\n              if (effect_Either__WEBPACK_IMPORTED_MODULE_4__.isRight(eu)) {\n                return effect_Either__WEBPACK_IMPORTED_MODULE_4__.right(eu.right);\n              } else {\n                es.push([stepKey++, new Member(candidate, eu.left)]);\n              }\n            } else {\n              const nk = stepKey++;\n              if (!queue) {\n                queue = [];\n              }\n              queue.push(state => effect_Effect__WEBPACK_IMPORTED_MODULE_6__.suspend(() => {\n                if (\"finalResult\" in state) {\n                  return effect_Effect__WEBPACK_IMPORTED_MODULE_6__[\"void\"];\n                } else {\n                  return effect_Effect__WEBPACK_IMPORTED_MODULE_6__.flatMap(effect_Effect__WEBPACK_IMPORTED_MODULE_6__.either(pr), t => {\n                    if (effect_Either__WEBPACK_IMPORTED_MODULE_4__.isRight(t)) {\n                      state.finalResult = effect_Either__WEBPACK_IMPORTED_MODULE_4__.right(t.right);\n                    } else {\n                      state.es.push([nk, new Member(candidate, t.left)]);\n                    }\n                    return effect_Effect__WEBPACK_IMPORTED_MODULE_6__[\"void\"];\n                  });\n                }\n              }));\n            }\n          }\n          // ---------------------------------------------\n          // compute result\n          // ---------------------------------------------\n          const computeResult = es => effect_Array__WEBPACK_IMPORTED_MODULE_10__.isNonEmptyArray(es) ? es.length === 1 && es[0][1]._tag === \"Type\" ? effect_Either__WEBPACK_IMPORTED_MODULE_4__.left(es[0][1]) : effect_Either__WEBPACK_IMPORTED_MODULE_4__.left(new Union(ast, input, sortByIndex(es))) :\n          // this should never happen\n          effect_Either__WEBPACK_IMPORTED_MODULE_4__.left(new Type(_AST_js__WEBPACK_IMPORTED_MODULE_7__.neverKeyword, input));\n          if (queue && queue.length > 0) {\n            const cqueue = queue;\n            return effect_Effect__WEBPACK_IMPORTED_MODULE_6__.suspend(() => {\n              const state = {\n                es: effect_Array__WEBPACK_IMPORTED_MODULE_10__.copy(es)\n              };\n              return effect_Effect__WEBPACK_IMPORTED_MODULE_6__.flatMap(effect_Effect__WEBPACK_IMPORTED_MODULE_6__.forEach(cqueue, f => f(state), {\n                concurrency,\n                batching,\n                discard: true\n              }), () => {\n                if (\"finalResult\" in state) {\n                  return state.finalResult;\n                }\n                return computeResult(state.es);\n              });\n            });\n          }\n          return computeResult(es);\n        };\n      }\n    case \"Suspend\":\n      {\n        const get = _internal_util_js__WEBPACK_IMPORTED_MODULE_11__.memoizeThunk(() => goMemo(_AST_js__WEBPACK_IMPORTED_MODULE_7__.annotations(ast.f(), ast.annotations), isDecoding));\n        return (a, options) => get()(a, options);\n      }\n  }\n};\nconst fromRefinement = (ast, refinement) => u => refinement(u) ? effect_Either__WEBPACK_IMPORTED_MODULE_4__.right(u) : effect_Either__WEBPACK_IMPORTED_MODULE_4__.left(new Type(ast, u));\n/** @internal */\nconst getLiterals = (ast, isDecoding) => {\n  switch (ast._tag) {\n    case \"Declaration\":\n      {\n        const annotation = _AST_js__WEBPACK_IMPORTED_MODULE_7__.getSurrogateAnnotation(ast);\n        if (effect_Option__WEBPACK_IMPORTED_MODULE_0__.isSome(annotation)) {\n          return getLiterals(annotation.value, isDecoding);\n        }\n        break;\n      }\n    case \"TypeLiteral\":\n      {\n        const out = [];\n        for (let i = 0; i < ast.propertySignatures.length; i++) {\n          const propertySignature = ast.propertySignatures[i];\n          const type = isDecoding ? _AST_js__WEBPACK_IMPORTED_MODULE_7__.encodedAST(propertySignature.type) : _AST_js__WEBPACK_IMPORTED_MODULE_7__.typeAST(propertySignature.type);\n          if (_AST_js__WEBPACK_IMPORTED_MODULE_7__.isLiteral(type) && !propertySignature.isOptional) {\n            out.push([propertySignature.name, type]);\n          }\n        }\n        return out;\n      }\n    case \"Refinement\":\n      return getLiterals(ast.from, isDecoding);\n    case \"Suspend\":\n      return getLiterals(ast.f(), isDecoding);\n    case \"Transformation\":\n      return getLiterals(isDecoding ? ast.from : ast.to, isDecoding);\n  }\n  return [];\n};\n/**\n * The purpose of the algorithm is to narrow down the pool of possible candidates for decoding as much as possible.\n *\n * This function separates the schemas into two groups, `keys` and `otherwise`:\n *\n * - `keys`: the schema has at least one property with a literal value\n * - `otherwise`: the schema has no properties with a literal value\n *\n * If a schema has at least one property with a literal value, so it ends up in `keys`, first a namespace is created for\n * the name of the property containing the literal, and then within this namespace a \"bucket\" is created for the literal\n * value in which to store all the schemas that have the same property and literal value.\n *\n * @internal\n */\nconst getSearchTree = (members, isDecoding) => {\n  const keys = {};\n  const otherwise = [];\n  for (let i = 0; i < members.length; i++) {\n    const member = members[i];\n    const tags = getLiterals(member, isDecoding);\n    if (tags.length > 0) {\n      for (let j = 0; j < tags.length; j++) {\n        const [key, literal] = tags[j];\n        const hash = String(literal.literal);\n        keys[key] = keys[key] || {\n          buckets: {},\n          literals: []\n        };\n        const buckets = keys[key].buckets;\n        if (Object.prototype.hasOwnProperty.call(buckets, hash)) {\n          if (j < tags.length - 1) {\n            continue;\n          }\n          buckets[hash].push(member);\n          keys[key].literals.push(literal);\n        } else {\n          buckets[hash] = [member];\n          keys[key].literals.push(literal);\n          break;\n        }\n      }\n    } else {\n      otherwise.push(member);\n    }\n  }\n  return {\n    keys,\n    otherwise\n  };\n};\nconst dropRightRefinement = ast => _AST_js__WEBPACK_IMPORTED_MODULE_7__.isRefinement(ast) ? dropRightRefinement(ast.from) : ast;\nconst handleForbidden = (effect, ast, actual, options) => {\n  const eu = eitherOrUndefined(effect);\n  if (eu) {\n    return eu;\n  }\n  if (options?.isEffectAllowed === true) {\n    return effect;\n  }\n  try {\n    return effect_Effect__WEBPACK_IMPORTED_MODULE_6__.runSync(effect_Effect__WEBPACK_IMPORTED_MODULE_6__.either(effect));\n  } catch (e) {\n    return effect_Either__WEBPACK_IMPORTED_MODULE_4__.left(new Forbidden(ast, actual, \"cannot be be resolved synchronously, this is caused by using runSync on an effect that performs async work\"));\n  }\n};\nfunction sortByIndex(es) {\n  return es.sort(([a], [b]) => a > b ? 1 : a < b ? -1 : 0).map(([_, a]) => a);\n}\n// -------------------------------------------------------------------------------------\n// transformations interpreter\n// -------------------------------------------------------------------------------------\n/** @internal */\nconst getFinalTransformation = (transformation, isDecoding) => {\n  switch (transformation._tag) {\n    case \"FinalTransformation\":\n      return isDecoding ? transformation.decode : transformation.encode;\n    case \"ComposeTransformation\":\n      return effect_Either__WEBPACK_IMPORTED_MODULE_4__.right;\n    case \"TypeLiteralTransformation\":\n      return input => {\n        let out = effect_Either__WEBPACK_IMPORTED_MODULE_4__.right(input);\n        // ---------------------------------------------\n        // handle property signature transformations\n        // ---------------------------------------------\n        for (const pst of transformation.propertySignatureTransformations) {\n          const [from, to] = isDecoding ? [pst.from, pst.to] : [pst.to, pst.from];\n          const transformation = isDecoding ? pst.decode : pst.encode;\n          const f = input => {\n            const o = transformation(Object.prototype.hasOwnProperty.call(input, from) ? effect_Option__WEBPACK_IMPORTED_MODULE_0__.some(input[from]) : effect_Option__WEBPACK_IMPORTED_MODULE_0__.none());\n            delete input[from];\n            if (effect_Option__WEBPACK_IMPORTED_MODULE_0__.isSome(o)) {\n              input[to] = o.value;\n            }\n            return input;\n          };\n          out = map(out, f);\n        }\n        return out;\n      };\n  }\n};\n//# sourceMappingURL=ParseResult.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@effect/schema/dist/esm/ParseResult.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@effect/schema/dist/esm/Pretty.js":
/*!********************************************************!*\
  !*** ./node_modules/@effect/schema/dist/esm/Pretty.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PrettyHookId: () => (/* binding */ PrettyHookId),\n/* harmony export */   make: () => (/* binding */ make),\n/* harmony export */   match: () => (/* binding */ match),\n/* harmony export */   pretty: () => (/* binding */ pretty)\n/* harmony export */ });\n/* harmony import */ var effect_Array__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! effect/Array */ \"(rsc)/./node_modules/effect/dist/esm/Array.js\");\n/* harmony import */ var effect_Option__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! effect/Option */ \"(rsc)/./node_modules/effect/dist/esm/Option.js\");\n/* harmony import */ var _AST_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AST.js */ \"(rsc)/./node_modules/@effect/schema/dist/esm/AST.js\");\n/* harmony import */ var _internal_errors_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./internal/errors.js */ \"(rsc)/./node_modules/@effect/schema/dist/esm/internal/errors.js\");\n/* harmony import */ var _internal_util_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./internal/util.js */ \"(rsc)/./node_modules/@effect/schema/dist/esm/internal/util.js\");\n/* harmony import */ var _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ParseResult.js */ \"(rsc)/./node_modules/@effect/schema/dist/esm/ParseResult.js\");\n/**\n * @since 1.0.0\n */\n\n\n\n\n\n\n/**\n * @category hooks\n * @since 1.0.0\n */\nconst PrettyHookId = /*#__PURE__*/Symbol.for(\"@effect/schema/PrettyHookId\");\n/**\n * @category annotations\n * @since 1.0.0\n */\nconst pretty = handler => self => self.annotations({\n  [PrettyHookId]: handler\n});\n/**\n * @category prettify\n * @since 1.0.0\n */\nconst make = schema => compile(schema.ast);\nconst getHook = /*#__PURE__*/_AST_js__WEBPACK_IMPORTED_MODULE_0__.getAnnotation(PrettyHookId);\nconst getMatcher = defaultPretty => ast => effect_Option__WEBPACK_IMPORTED_MODULE_1__.match(getHook(ast), {\n  onNone: () => defaultPretty,\n  onSome: handler => handler()\n});\nconst toString = /*#__PURE__*/getMatcher(a => String(a));\nconst stringify = /*#__PURE__*/getMatcher(a => JSON.stringify(a));\nconst formatUnknown = /*#__PURE__*/getMatcher(_internal_util_js__WEBPACK_IMPORTED_MODULE_2__.formatUnknown);\n/**\n * @since 1.0.0\n */\nconst match = {\n  \"Declaration\": (ast, go) => {\n    const hook = getHook(ast);\n    if (effect_Option__WEBPACK_IMPORTED_MODULE_1__.isSome(hook)) {\n      return hook.value(...ast.typeParameters.map(go));\n    }\n    throw new Error(_internal_errors_js__WEBPACK_IMPORTED_MODULE_3__.getPrettyErrorMessage(`a declaration without annotations (${ast})`));\n  },\n  \"VoidKeyword\": /*#__PURE__*/getMatcher(() => \"void(0)\"),\n  \"NeverKeyword\": /*#__PURE__*/getMatcher(() => {\n    throw new Error(\"cannot pretty print a `never` value\");\n  }),\n  \"Literal\": /*#__PURE__*/getMatcher(literal => typeof literal === \"bigint\" ? `${String(literal)}n` : JSON.stringify(literal)),\n  \"SymbolKeyword\": toString,\n  \"UniqueSymbol\": toString,\n  \"TemplateLiteral\": stringify,\n  \"UndefinedKeyword\": toString,\n  \"UnknownKeyword\": formatUnknown,\n  \"AnyKeyword\": formatUnknown,\n  \"ObjectKeyword\": formatUnknown,\n  \"StringKeyword\": stringify,\n  \"NumberKeyword\": toString,\n  \"BooleanKeyword\": toString,\n  \"BigIntKeyword\": /*#__PURE__*/getMatcher(a => `${String(a)}n`),\n  \"Enums\": stringify,\n  \"TupleType\": (ast, go) => {\n    const hook = getHook(ast);\n    if (effect_Option__WEBPACK_IMPORTED_MODULE_1__.isSome(hook)) {\n      return hook.value();\n    }\n    const elements = ast.elements.map(e => go(e.type));\n    const rest = ast.rest.map(go);\n    return input => {\n      const output = [];\n      let i = 0;\n      // ---------------------------------------------\n      // handle elements\n      // ---------------------------------------------\n      for (; i < elements.length; i++) {\n        if (input.length < i + 1) {\n          if (ast.elements[i].isOptional) {\n            continue;\n          }\n        } else {\n          output.push(elements[i](input[i]));\n        }\n      }\n      // ---------------------------------------------\n      // handle rest element\n      // ---------------------------------------------\n      if (effect_Array__WEBPACK_IMPORTED_MODULE_4__.isNonEmptyReadonlyArray(rest)) {\n        const [head, ...tail] = rest;\n        for (; i < input.length - tail.length; i++) {\n          output.push(head(input[i]));\n        }\n        // ---------------------------------------------\n        // handle post rest elements\n        // ---------------------------------------------\n        for (let j = 0; j < tail.length; j++) {\n          i += j;\n          output.push(tail[j](input[i]));\n        }\n      }\n      return \"[\" + output.join(\", \") + \"]\";\n    };\n  },\n  \"TypeLiteral\": (ast, go) => {\n    const hook = getHook(ast);\n    if (effect_Option__WEBPACK_IMPORTED_MODULE_1__.isSome(hook)) {\n      return hook.value();\n    }\n    const propertySignaturesTypes = ast.propertySignatures.map(f => go(f.type));\n    const indexSignatureTypes = ast.indexSignatures.map(is => go(is.type));\n    const expectedKeys = {};\n    for (let i = 0; i < propertySignaturesTypes.length; i++) {\n      expectedKeys[ast.propertySignatures[i].name] = null;\n    }\n    return input => {\n      const output = [];\n      // ---------------------------------------------\n      // handle property signatures\n      // ---------------------------------------------\n      for (let i = 0; i < propertySignaturesTypes.length; i++) {\n        const ps = ast.propertySignatures[i];\n        const name = ps.name;\n        if (ps.isOptional && !Object.prototype.hasOwnProperty.call(input, name)) {\n          continue;\n        }\n        output.push(`${_internal_util_js__WEBPACK_IMPORTED_MODULE_2__.formatPropertyKey(name)}: ${propertySignaturesTypes[i](input[name])}`);\n      }\n      // ---------------------------------------------\n      // handle index signatures\n      // ---------------------------------------------\n      if (indexSignatureTypes.length > 0) {\n        for (let i = 0; i < indexSignatureTypes.length; i++) {\n          const type = indexSignatureTypes[i];\n          const keys = _internal_util_js__WEBPACK_IMPORTED_MODULE_2__.getKeysForIndexSignature(input, ast.indexSignatures[i].parameter);\n          for (const key of keys) {\n            if (Object.prototype.hasOwnProperty.call(expectedKeys, key)) {\n              continue;\n            }\n            output.push(`${_internal_util_js__WEBPACK_IMPORTED_MODULE_2__.formatPropertyKey(key)}: ${type(input[key])}`);\n          }\n        }\n      }\n      return effect_Array__WEBPACK_IMPORTED_MODULE_4__.isNonEmptyReadonlyArray(output) ? \"{ \" + output.join(\", \") + \" }\" : \"{}\";\n    };\n  },\n  \"Union\": (ast, go) => {\n    const hook = getHook(ast);\n    if (effect_Option__WEBPACK_IMPORTED_MODULE_1__.isSome(hook)) {\n      return hook.value();\n    }\n    const types = ast.types.map(ast => [_ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.is({\n      ast\n    }), go(ast)]);\n    return a => {\n      const index = types.findIndex(([is]) => is(a));\n      return types[index][1](a);\n    };\n  },\n  \"Suspend\": (ast, go) => {\n    return effect_Option__WEBPACK_IMPORTED_MODULE_1__.match(getHook(ast), {\n      onNone: () => {\n        const get = _internal_util_js__WEBPACK_IMPORTED_MODULE_2__.memoizeThunk(() => go(ast.f()));\n        return a => get()(a);\n      },\n      onSome: handler => handler()\n    });\n  },\n  \"Refinement\": (ast, go) => {\n    return effect_Option__WEBPACK_IMPORTED_MODULE_1__.match(getHook(ast), {\n      onNone: () => go(ast.from),\n      onSome: handler => handler()\n    });\n  },\n  \"Transformation\": (ast, go) => {\n    return effect_Option__WEBPACK_IMPORTED_MODULE_1__.match(getHook(ast), {\n      onNone: () => go(ast.to),\n      onSome: handler => handler()\n    });\n  }\n};\nconst compile = /*#__PURE__*/_AST_js__WEBPACK_IMPORTED_MODULE_0__.getCompiler(match);\n//# sourceMappingURL=Pretty.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@effect/schema/dist/esm/Pretty.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@effect/schema/dist/esm/Schema.js":
/*!********************************************************!*\
  !*** ./node_modules/@effect/schema/dist/esm/Schema.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Any: () => (/* binding */ Any),\n/* harmony export */   Array: () => (/* binding */ $Array),\n/* harmony export */   Base64: () => (/* binding */ Base64),\n/* harmony export */   Base64Url: () => (/* binding */ Base64Url),\n/* harmony export */   BetweenBigDecimalTypeId: () => (/* binding */ BetweenBigDecimalTypeId),\n/* harmony export */   BetweenBigIntTypeId: () => (/* binding */ BetweenBigIntTypeId),\n/* harmony export */   BetweenDurationTypeId: () => (/* binding */ BetweenDurationTypeId),\n/* harmony export */   BetweenTypeId: () => (/* binding */ BetweenTypeId),\n/* harmony export */   BigDecimal: () => (/* binding */ BigDecimal),\n/* harmony export */   BigDecimalFromNumber: () => (/* binding */ BigDecimalFromNumber),\n/* harmony export */   BigDecimalFromSelf: () => (/* binding */ BigDecimalFromSelf),\n/* harmony export */   BigInt: () => (/* binding */ bigint),\n/* harmony export */   BigIntFromNumber: () => (/* binding */ BigIntFromNumber),\n/* harmony export */   BigIntFromSelf: () => (/* binding */ BigIntFromSelf),\n/* harmony export */   Boolean: () => (/* binding */ $Boolean),\n/* harmony export */   BooleanFromUnknown: () => (/* binding */ BooleanFromUnknown),\n/* harmony export */   BrandTypeId: () => (/* binding */ BrandTypeId),\n/* harmony export */   Cause: () => (/* binding */ Cause),\n/* harmony export */   CauseDefectUnknown: () => (/* binding */ CauseDefectUnknown),\n/* harmony export */   CauseFromSelf: () => (/* binding */ CauseFromSelf),\n/* harmony export */   Char: () => (/* binding */ Char),\n/* harmony export */   Chunk: () => (/* binding */ Chunk),\n/* harmony export */   ChunkFromSelf: () => (/* binding */ ChunkFromSelf),\n/* harmony export */   Class: () => (/* binding */ Class),\n/* harmony export */   Data: () => (/* binding */ Data),\n/* harmony export */   DataFromSelf: () => (/* binding */ DataFromSelf),\n/* harmony export */   Date: () => (/* binding */ $Date),\n/* harmony export */   DateFromSelf: () => (/* binding */ DateFromSelf),\n/* harmony export */   DateFromString: () => (/* binding */ DateFromString),\n/* harmony export */   Duration: () => (/* binding */ Duration),\n/* harmony export */   DurationFromMillis: () => (/* binding */ DurationFromMillis),\n/* harmony export */   DurationFromNanos: () => (/* binding */ DurationFromNanos),\n/* harmony export */   DurationFromSelf: () => (/* binding */ DurationFromSelf),\n/* harmony export */   Either: () => (/* binding */ Either),\n/* harmony export */   EitherFromSelf: () => (/* binding */ EitherFromSelf),\n/* harmony export */   EitherFromUnion: () => (/* binding */ EitherFromUnion),\n/* harmony export */   EndsWithTypeId: () => (/* binding */ EndsWithTypeId),\n/* harmony export */   Enums: () => (/* binding */ Enums),\n/* harmony export */   Exit: () => (/* binding */ Exit),\n/* harmony export */   ExitFromSelf: () => (/* binding */ ExitFromSelf),\n/* harmony export */   FiberId: () => (/* binding */ FiberId),\n/* harmony export */   FiberIdFromSelf: () => (/* binding */ FiberIdFromSelf),\n/* harmony export */   Finite: () => (/* binding */ Finite),\n/* harmony export */   FiniteTypeId: () => (/* binding */ FiniteTypeId),\n/* harmony export */   FromPropertySignature: () => (/* binding */ FromPropertySignature),\n/* harmony export */   GreaterThanBigDecimalTypeId: () => (/* binding */ GreaterThanBigDecimalTypeId),\n/* harmony export */   GreaterThanBigIntTypeId: () => (/* binding */ GreaterThanBigIntTypeId),\n/* harmony export */   GreaterThanDurationTypeId: () => (/* binding */ GreaterThanDurationTypeId),\n/* harmony export */   GreaterThanOrEqualToBigDecimalTypeId: () => (/* binding */ GreaterThanOrEqualToBigDecimalTypeId),\n/* harmony export */   GreaterThanOrEqualToBigIntTypeId: () => (/* binding */ GreaterThanOrEqualToBigIntTypeId),\n/* harmony export */   GreaterThanOrEqualToDurationTypeId: () => (/* binding */ GreaterThanOrEqualToDurationTypeId),\n/* harmony export */   GreaterThanOrEqualToTypeId: () => (/* binding */ GreaterThanOrEqualToTypeId),\n/* harmony export */   GreaterThanTypeId: () => (/* binding */ GreaterThanTypeId),\n/* harmony export */   HashMap: () => (/* binding */ HashMap),\n/* harmony export */   HashMapFromSelf: () => (/* binding */ HashMapFromSelf),\n/* harmony export */   HashSet: () => (/* binding */ HashSet),\n/* harmony export */   HashSetFromSelf: () => (/* binding */ HashSetFromSelf),\n/* harmony export */   Hex: () => (/* binding */ Hex),\n/* harmony export */   IncludesTypeId: () => (/* binding */ IncludesTypeId),\n/* harmony export */   InstanceOfTypeId: () => (/* binding */ InstanceOfTypeId),\n/* harmony export */   Int: () => (/* binding */ Int),\n/* harmony export */   IntTypeId: () => (/* binding */ IntTypeId),\n/* harmony export */   ItemsCountTypeId: () => (/* binding */ ItemsCountTypeId),\n/* harmony export */   JsonNumber: () => (/* binding */ JsonNumber),\n/* harmony export */   JsonNumberTypeId: () => (/* binding */ JsonNumberTypeId),\n/* harmony export */   LengthTypeId: () => (/* binding */ LengthTypeId),\n/* harmony export */   LessThanBigDecimalTypeId: () => (/* binding */ LessThanBigDecimalTypeId),\n/* harmony export */   LessThanBigIntTypeId: () => (/* binding */ LessThanBigIntTypeId),\n/* harmony export */   LessThanDurationTypeId: () => (/* binding */ LessThanDurationTypeId),\n/* harmony export */   LessThanOrEqualToBigDecimalTypeId: () => (/* binding */ LessThanOrEqualToBigDecimalTypeId),\n/* harmony export */   LessThanOrEqualToBigIntTypeId: () => (/* binding */ LessThanOrEqualToBigIntTypeId),\n/* harmony export */   LessThanOrEqualToDurationTypeId: () => (/* binding */ LessThanOrEqualToDurationTypeId),\n/* harmony export */   LessThanOrEqualToTypeId: () => (/* binding */ LessThanOrEqualToTypeId),\n/* harmony export */   LessThanTypeId: () => (/* binding */ LessThanTypeId),\n/* harmony export */   List: () => (/* binding */ List),\n/* harmony export */   ListFromSelf: () => (/* binding */ ListFromSelf),\n/* harmony export */   Literal: () => (/* binding */ Literal),\n/* harmony export */   Lowercase: () => (/* binding */ Lowercase),\n/* harmony export */   Lowercased: () => (/* binding */ Lowercased),\n/* harmony export */   LowercasedTypeId: () => (/* binding */ LowercasedTypeId),\n/* harmony export */   Map: () => (/* binding */ map),\n/* harmony export */   MapFromSelf: () => (/* binding */ MapFromSelf),\n/* harmony export */   MaxItemsTypeId: () => (/* binding */ MaxItemsTypeId),\n/* harmony export */   MaxLengthTypeId: () => (/* binding */ MaxLengthTypeId),\n/* harmony export */   MinItemsTypeId: () => (/* binding */ MinItemsTypeId),\n/* harmony export */   MinLengthTypeId: () => (/* binding */ MinLengthTypeId),\n/* harmony export */   MultipleOfTypeId: () => (/* binding */ MultipleOfTypeId),\n/* harmony export */   Negative: () => (/* binding */ Negative),\n/* harmony export */   NegativeBigDecimalFromSelf: () => (/* binding */ NegativeBigDecimalFromSelf),\n/* harmony export */   NegativeBigDecimalTypeId: () => (/* binding */ NegativeBigDecimalTypeId),\n/* harmony export */   NegativeBigInt: () => (/* binding */ NegativeBigInt),\n/* harmony export */   NegativeBigIntFromSelf: () => (/* binding */ NegativeBigIntFromSelf),\n/* harmony export */   Never: () => (/* binding */ Never),\n/* harmony export */   NonEmpty: () => (/* binding */ NonEmpty),\n/* harmony export */   NonEmptyArray: () => (/* binding */ NonEmptyArray),\n/* harmony export */   NonNaN: () => (/* binding */ NonNaN),\n/* harmony export */   NonNaNTypeId: () => (/* binding */ NonNaNTypeId),\n/* harmony export */   NonNegative: () => (/* binding */ NonNegative),\n/* harmony export */   NonNegativeBigDecimalFromSelf: () => (/* binding */ NonNegativeBigDecimalFromSelf),\n/* harmony export */   NonNegativeBigDecimalTypeId: () => (/* binding */ NonNegativeBigDecimalTypeId),\n/* harmony export */   NonNegativeBigInt: () => (/* binding */ NonNegativeBigInt),\n/* harmony export */   NonNegativeBigIntFromSelf: () => (/* binding */ NonNegativeBigIntFromSelf),\n/* harmony export */   NonPositive: () => (/* binding */ NonPositive),\n/* harmony export */   NonPositiveBigDecimalFromSelf: () => (/* binding */ NonPositiveBigDecimalFromSelf),\n/* harmony export */   NonPositiveBigDecimalTypeId: () => (/* binding */ NonPositiveBigDecimalTypeId),\n/* harmony export */   NonPositiveBigInt: () => (/* binding */ NonPositiveBigInt),\n/* harmony export */   NonPositiveBigIntFromSelf: () => (/* binding */ NonPositiveBigIntFromSelf),\n/* harmony export */   Not: () => (/* binding */ Not),\n/* harmony export */   Null: () => (/* binding */ Null),\n/* harmony export */   NullOr: () => (/* binding */ NullOr),\n/* harmony export */   NullishOr: () => (/* binding */ NullishOr),\n/* harmony export */   Number: () => (/* binding */ $Number),\n/* harmony export */   NumberFromString: () => (/* binding */ NumberFromString),\n/* harmony export */   Object: () => (/* binding */ $Object),\n/* harmony export */   Option: () => (/* binding */ Option),\n/* harmony export */   OptionFromNullOr: () => (/* binding */ OptionFromNullOr),\n/* harmony export */   OptionFromNullishOr: () => (/* binding */ OptionFromNullishOr),\n/* harmony export */   OptionFromSelf: () => (/* binding */ OptionFromSelf),\n/* harmony export */   OptionFromUndefinedOr: () => (/* binding */ OptionFromUndefinedOr),\n/* harmony export */   PatternTypeId: () => (/* binding */ PatternTypeId),\n/* harmony export */   Positive: () => (/* binding */ Positive),\n/* harmony export */   PositiveBigDecimalFromSelf: () => (/* binding */ PositiveBigDecimalFromSelf),\n/* harmony export */   PositiveBigDecimalTypeId: () => (/* binding */ PositiveBigDecimalTypeId),\n/* harmony export */   PositiveBigInt: () => (/* binding */ PositiveBigInt),\n/* harmony export */   PositiveBigIntFromSelf: () => (/* binding */ PositiveBigIntFromSelf),\n/* harmony export */   PropertySignatureDeclaration: () => (/* binding */ PropertySignatureDeclaration),\n/* harmony export */   PropertySignatureImpl: () => (/* binding */ PropertySignatureImpl),\n/* harmony export */   PropertySignatureTransformation: () => (/* binding */ PropertySignatureTransformation),\n/* harmony export */   PropertySignatureTypeId: () => (/* binding */ PropertySignatureTypeId),\n/* harmony export */   ReadonlyMap: () => (/* binding */ ReadonlyMap),\n/* harmony export */   ReadonlyMapFromSelf: () => (/* binding */ ReadonlyMapFromSelf),\n/* harmony export */   ReadonlySet: () => (/* binding */ ReadonlySet),\n/* harmony export */   ReadonlySetFromSelf: () => (/* binding */ ReadonlySetFromSelf),\n/* harmony export */   Record: () => (/* binding */ Record),\n/* harmony export */   Secret: () => (/* binding */ Secret),\n/* harmony export */   SecretFromSelf: () => (/* binding */ SecretFromSelf),\n/* harmony export */   Set: () => (/* binding */ set),\n/* harmony export */   SetFromSelf: () => (/* binding */ SetFromSelf),\n/* harmony export */   SortedSet: () => (/* binding */ SortedSet),\n/* harmony export */   SortedSetFromSelf: () => (/* binding */ SortedSetFromSelf),\n/* harmony export */   StartsWithTypeId: () => (/* binding */ StartsWithTypeId),\n/* harmony export */   String: () => (/* binding */ $String),\n/* harmony export */   Struct: () => (/* binding */ Struct),\n/* harmony export */   Symbol: () => (/* binding */ $Symbol),\n/* harmony export */   SymbolFromSelf: () => (/* binding */ SymbolFromSelf),\n/* harmony export */   TaggedClass: () => (/* binding */ TaggedClass),\n/* harmony export */   TaggedError: () => (/* binding */ TaggedError),\n/* harmony export */   TaggedRequest: () => (/* binding */ TaggedRequest),\n/* harmony export */   TemplateLiteral: () => (/* binding */ TemplateLiteral),\n/* harmony export */   ToPropertySignature: () => (/* binding */ ToPropertySignature),\n/* harmony export */   Trim: () => (/* binding */ Trim),\n/* harmony export */   Trimmed: () => (/* binding */ Trimmed),\n/* harmony export */   TrimmedTypeId: () => (/* binding */ TrimmedTypeId),\n/* harmony export */   Tuple: () => (/* binding */ Tuple),\n/* harmony export */   TypeId: () => (/* binding */ TypeId),\n/* harmony export */   ULID: () => (/* binding */ ULID),\n/* harmony export */   ULIDTypeId: () => (/* binding */ ULIDTypeId),\n/* harmony export */   UUID: () => (/* binding */ UUID),\n/* harmony export */   UUIDTypeId: () => (/* binding */ UUIDTypeId),\n/* harmony export */   Uint8Array: () => (/* binding */ $Uint8Array),\n/* harmony export */   Uint8ArrayFromSelf: () => (/* binding */ Uint8ArrayFromSelf),\n/* harmony export */   Undefined: () => (/* binding */ Undefined),\n/* harmony export */   UndefinedOr: () => (/* binding */ UndefinedOr),\n/* harmony export */   Union: () => (/* binding */ Union),\n/* harmony export */   UniqueSymbolFromSelf: () => (/* binding */ UniqueSymbolFromSelf),\n/* harmony export */   Unknown: () => (/* binding */ Unknown),\n/* harmony export */   Uppercase: () => (/* binding */ Uppercase),\n/* harmony export */   Uppercased: () => (/* binding */ Uppercased),\n/* harmony export */   UppercasedTypeId: () => (/* binding */ UppercasedTypeId),\n/* harmony export */   ValidDateFromSelf: () => (/* binding */ ValidDateFromSelf),\n/* harmony export */   ValidDateTypeId: () => (/* binding */ ValidDateTypeId),\n/* harmony export */   Void: () => (/* binding */ Void),\n/* harmony export */   annotations: () => (/* binding */ annotations),\n/* harmony export */   asBrandSchema: () => (/* binding */ asBrandSchema),\n/* harmony export */   asSchema: () => (/* binding */ asSchema),\n/* harmony export */   asserts: () => (/* reexport safe */ _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.asserts),\n/* harmony export */   attachPropertySignature: () => (/* binding */ attachPropertySignature),\n/* harmony export */   batching: () => (/* binding */ batching),\n/* harmony export */   between: () => (/* binding */ between),\n/* harmony export */   betweenBigDecimal: () => (/* binding */ betweenBigDecimal),\n/* harmony export */   betweenBigInt: () => (/* binding */ betweenBigInt),\n/* harmony export */   betweenDuration: () => (/* binding */ betweenDuration),\n/* harmony export */   brand: () => (/* binding */ brand),\n/* harmony export */   clamp: () => (/* binding */ clamp),\n/* harmony export */   clampBigDecimal: () => (/* binding */ clampBigDecimal),\n/* harmony export */   clampBigInt: () => (/* binding */ clampBigInt),\n/* harmony export */   clampDuration: () => (/* binding */ clampDuration),\n/* harmony export */   compose: () => (/* binding */ compose),\n/* harmony export */   concurrency: () => (/* binding */ concurrency),\n/* harmony export */   declare: () => (/* binding */ declare),\n/* harmony export */   decode: () => (/* binding */ decode),\n/* harmony export */   decodeEither: () => (/* binding */ decodeEither),\n/* harmony export */   decodeOption: () => (/* reexport safe */ _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.decodeOption),\n/* harmony export */   decodePromise: () => (/* binding */ decodePromise),\n/* harmony export */   decodeSync: () => (/* reexport safe */ _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.decodeSync),\n/* harmony export */   decodeUnknown: () => (/* binding */ decodeUnknown),\n/* harmony export */   decodeUnknownEither: () => (/* binding */ decodeUnknownEither),\n/* harmony export */   decodeUnknownOption: () => (/* reexport safe */ _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.decodeUnknownOption),\n/* harmony export */   decodeUnknownPromise: () => (/* binding */ decodeUnknownPromise),\n/* harmony export */   decodeUnknownSync: () => (/* reexport safe */ _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.decodeUnknownSync),\n/* harmony export */   \"default\": () => (/* binding */ $default),\n/* harmony export */   description: () => (/* binding */ description),\n/* harmony export */   documentation: () => (/* binding */ documentation),\n/* harmony export */   encode: () => (/* binding */ encode),\n/* harmony export */   encodeEither: () => (/* binding */ encodeEither),\n/* harmony export */   encodeOption: () => (/* reexport safe */ _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.encodeOption),\n/* harmony export */   encodePromise: () => (/* binding */ encodePromise),\n/* harmony export */   encodeSync: () => (/* reexport safe */ _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.encodeSync),\n/* harmony export */   encodeUnknown: () => (/* binding */ encodeUnknown),\n/* harmony export */   encodeUnknownEither: () => (/* binding */ encodeUnknownEither),\n/* harmony export */   encodeUnknownOption: () => (/* reexport safe */ _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.encodeUnknownOption),\n/* harmony export */   encodeUnknownPromise: () => (/* binding */ encodeUnknownPromise),\n/* harmony export */   encodeUnknownSync: () => (/* reexport safe */ _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.encodeUnknownSync),\n/* harmony export */   encodedSchema: () => (/* binding */ encodedSchema),\n/* harmony export */   endsWith: () => (/* binding */ endsWith),\n/* harmony export */   equivalence: () => (/* binding */ equivalence),\n/* harmony export */   examples: () => (/* binding */ examples),\n/* harmony export */   extend: () => (/* binding */ extend),\n/* harmony export */   filter: () => (/* binding */ filter),\n/* harmony export */   finite: () => (/* binding */ finite),\n/* harmony export */   format: () => (/* binding */ format),\n/* harmony export */   fromBrand: () => (/* binding */ fromBrand),\n/* harmony export */   fromKey: () => (/* binding */ fromKey),\n/* harmony export */   getNumberIndexedAccess: () => (/* binding */ getNumberIndexedAccess),\n/* harmony export */   greaterThan: () => (/* binding */ greaterThan),\n/* harmony export */   greaterThanBigDecimal: () => (/* binding */ greaterThanBigDecimal),\n/* harmony export */   greaterThanBigInt: () => (/* binding */ greaterThanBigInt),\n/* harmony export */   greaterThanDuration: () => (/* binding */ greaterThanDuration),\n/* harmony export */   greaterThanOrEqualTo: () => (/* binding */ greaterThanOrEqualTo),\n/* harmony export */   greaterThanOrEqualToBigDecimal: () => (/* binding */ greaterThanOrEqualToBigDecimal),\n/* harmony export */   greaterThanOrEqualToBigInt: () => (/* binding */ greaterThanOrEqualToBigInt),\n/* harmony export */   greaterThanOrEqualToDuration: () => (/* binding */ greaterThanOrEqualToDuration),\n/* harmony export */   hash: () => (/* binding */ hash),\n/* harmony export */   head: () => (/* binding */ head),\n/* harmony export */   headOrElse: () => (/* binding */ headOrElse),\n/* harmony export */   identifier: () => (/* binding */ identifier),\n/* harmony export */   includes: () => (/* binding */ includes),\n/* harmony export */   instanceOf: () => (/* binding */ instanceOf),\n/* harmony export */   int: () => (/* binding */ int),\n/* harmony export */   is: () => (/* reexport safe */ _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.is),\n/* harmony export */   isSchema: () => (/* binding */ isSchema),\n/* harmony export */   itemsCount: () => (/* binding */ itemsCount),\n/* harmony export */   jsonSchema: () => (/* binding */ jsonSchema),\n/* harmony export */   keyof: () => (/* binding */ keyof),\n/* harmony export */   length: () => (/* binding */ length),\n/* harmony export */   lessThan: () => (/* binding */ lessThan),\n/* harmony export */   lessThanBigDecimal: () => (/* binding */ lessThanBigDecimal),\n/* harmony export */   lessThanBigInt: () => (/* binding */ lessThanBigInt),\n/* harmony export */   lessThanDuration: () => (/* binding */ lessThanDuration),\n/* harmony export */   lessThanOrEqualTo: () => (/* binding */ lessThanOrEqualTo),\n/* harmony export */   lessThanOrEqualToBigDecimal: () => (/* binding */ lessThanOrEqualToBigDecimal),\n/* harmony export */   lessThanOrEqualToBigInt: () => (/* binding */ lessThanOrEqualToBigInt),\n/* harmony export */   lessThanOrEqualToDuration: () => (/* binding */ lessThanOrEqualToDuration),\n/* harmony export */   lowercased: () => (/* binding */ lowercased),\n/* harmony export */   make: () => (/* binding */ make),\n/* harmony export */   maxItems: () => (/* binding */ maxItems),\n/* harmony export */   maxLength: () => (/* binding */ maxLength),\n/* harmony export */   message: () => (/* binding */ message),\n/* harmony export */   minItems: () => (/* binding */ minItems),\n/* harmony export */   minLength: () => (/* binding */ minLength),\n/* harmony export */   multipleOf: () => (/* binding */ multipleOf),\n/* harmony export */   mutable: () => (/* binding */ mutable),\n/* harmony export */   negative: () => (/* binding */ negative),\n/* harmony export */   negativeBigDecimal: () => (/* binding */ negativeBigDecimal),\n/* harmony export */   negativeBigInt: () => (/* binding */ negativeBigInt),\n/* harmony export */   nonEmpty: () => (/* binding */ nonEmpty),\n/* harmony export */   nonNaN: () => (/* binding */ nonNaN),\n/* harmony export */   nonNegative: () => (/* binding */ nonNegative),\n/* harmony export */   nonNegativeBigDecimal: () => (/* binding */ nonNegativeBigDecimal),\n/* harmony export */   nonNegativeBigInt: () => (/* binding */ nonNegativeBigInt),\n/* harmony export */   nonPositive: () => (/* binding */ nonPositive),\n/* harmony export */   nonPositiveBigDecimal: () => (/* binding */ nonPositiveBigDecimal),\n/* harmony export */   nonPositiveBigInt: () => (/* binding */ nonPositiveBigInt),\n/* harmony export */   omit: () => (/* binding */ omit),\n/* harmony export */   optional: () => (/* binding */ optional),\n/* harmony export */   optionalElement: () => (/* binding */ optionalElement),\n/* harmony export */   optionalToOptional: () => (/* binding */ optionalToOptional),\n/* harmony export */   optionalToRequired: () => (/* binding */ optionalToRequired),\n/* harmony export */   parseIssueTitle: () => (/* binding */ parseIssueTitle),\n/* harmony export */   parseJson: () => (/* binding */ parseJson),\n/* harmony export */   partial: () => (/* binding */ partial),\n/* harmony export */   pattern: () => (/* binding */ pattern),\n/* harmony export */   pick: () => (/* binding */ pick),\n/* harmony export */   pickLiteral: () => (/* binding */ pickLiteral),\n/* harmony export */   pluck: () => (/* binding */ pluck),\n/* harmony export */   positive: () => (/* binding */ positive),\n/* harmony export */   positiveBigDecimal: () => (/* binding */ positiveBigDecimal),\n/* harmony export */   positiveBigInt: () => (/* binding */ positiveBigInt),\n/* harmony export */   propertySignature: () => (/* binding */ propertySignature),\n/* harmony export */   rename: () => (/* binding */ rename),\n/* harmony export */   required: () => (/* binding */ required),\n/* harmony export */   split: () => (/* binding */ split),\n/* harmony export */   startsWith: () => (/* binding */ startsWith),\n/* harmony export */   suspend: () => (/* binding */ suspend),\n/* harmony export */   title: () => (/* binding */ title),\n/* harmony export */   transform: () => (/* binding */ transform),\n/* harmony export */   transformLiteral: () => (/* binding */ transformLiteral),\n/* harmony export */   transformLiterals: () => (/* binding */ transformLiterals),\n/* harmony export */   transformOrFail: () => (/* binding */ transformOrFail),\n/* harmony export */   trimmed: () => (/* binding */ trimmed),\n/* harmony export */   typeSchema: () => (/* binding */ typeSchema),\n/* harmony export */   uppercased: () => (/* binding */ uppercased),\n/* harmony export */   validDate: () => (/* binding */ validDate),\n/* harmony export */   validate: () => (/* binding */ validate),\n/* harmony export */   validateEither: () => (/* binding */ validateEither),\n/* harmony export */   validateOption: () => (/* reexport safe */ _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.validateOption),\n/* harmony export */   validatePromise: () => (/* binding */ validatePromise),\n/* harmony export */   validateSync: () => (/* reexport safe */ _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.validateSync)\n/* harmony export */ });\n/* harmony import */ var effect_Array__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! effect/Array */ \"(rsc)/./node_modules/effect/dist/esm/Array.js\");\n/* harmony import */ var effect_BigDecimal__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! effect/BigDecimal */ \"(rsc)/./node_modules/effect/dist/esm/BigDecimal.js\");\n/* harmony import */ var effect_BigInt__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! effect/BigInt */ \"(rsc)/./node_modules/effect/dist/esm/BigInt.js\");\n/* harmony import */ var effect_Boolean__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! effect/Boolean */ \"(rsc)/./node_modules/effect/dist/esm/Boolean.js\");\n/* harmony import */ var effect_Brand__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! effect/Brand */ \"(rsc)/./node_modules/effect/dist/esm/Brand.js\");\n/* harmony import */ var effect_Cause__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! effect/Cause */ \"(rsc)/./node_modules/effect/dist/esm/Cause.js\");\n/* harmony import */ var effect_Chunk__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! effect/Chunk */ \"(rsc)/./node_modules/effect/dist/esm/Chunk.js\");\n/* harmony import */ var effect_Data__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! effect/Data */ \"(rsc)/./node_modules/effect/dist/esm/Data.js\");\n/* harmony import */ var effect_Duration__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! effect/Duration */ \"(rsc)/./node_modules/effect/dist/esm/Duration.js\");\n/* harmony import */ var effect_Effect__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! effect/Effect */ \"(rsc)/./node_modules/effect/dist/esm/Effect.js\");\n/* harmony import */ var effect_Either__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! effect/Either */ \"(rsc)/./node_modules/effect/dist/esm/Either.js\");\n/* harmony import */ var effect_Encoding__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! effect/Encoding */ \"(rsc)/./node_modules/effect/dist/esm/Encoding.js\");\n/* harmony import */ var effect_Equal__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! effect/Equal */ \"(rsc)/./node_modules/effect/dist/esm/Equal.js\");\n/* harmony import */ var effect_Equivalence__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! effect/Equivalence */ \"(rsc)/./node_modules/effect/dist/esm/Equivalence.js\");\n/* harmony import */ var effect_Exit__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! effect/Exit */ \"(rsc)/./node_modules/effect/dist/esm/Exit.js\");\n/* harmony import */ var effect_FiberId__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! effect/FiberId */ \"(rsc)/./node_modules/effect/dist/esm/FiberId.js\");\n/* harmony import */ var effect_Function__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! effect/Function */ \"(rsc)/./node_modules/effect/dist/esm/Function.js\");\n/* harmony import */ var effect_HashMap__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! effect/HashMap */ \"(rsc)/./node_modules/effect/dist/esm/HashMap.js\");\n/* harmony import */ var effect_HashSet__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! effect/HashSet */ \"(rsc)/./node_modules/effect/dist/esm/HashSet.js\");\n/* harmony import */ var effect_List__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! effect/List */ \"(rsc)/./node_modules/effect/dist/esm/List.js\");\n/* harmony import */ var effect_Number__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! effect/Number */ \"(rsc)/./node_modules/effect/dist/esm/Number.js\");\n/* harmony import */ var effect_Option__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! effect/Option */ \"(rsc)/./node_modules/effect/dist/esm/Option.js\");\n/* harmony import */ var effect_Pipeable__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! effect/Pipeable */ \"(rsc)/./node_modules/effect/dist/esm/Pipeable.js\");\n/* harmony import */ var effect_Predicate__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! effect/Predicate */ \"(rsc)/./node_modules/effect/dist/esm/Predicate.js\");\n/* harmony import */ var effect_Request__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! effect/Request */ \"(rsc)/./node_modules/effect/dist/esm/Request.js\");\n/* harmony import */ var effect_Secret__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! effect/Secret */ \"(rsc)/./node_modules/effect/dist/esm/Secret.js\");\n/* harmony import */ var effect_SortedSet__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! effect/SortedSet */ \"(rsc)/./node_modules/effect/dist/esm/SortedSet.js\");\n/* harmony import */ var effect_String__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! effect/String */ \"(rsc)/./node_modules/effect/dist/esm/String.js\");\n/* harmony import */ var _Arbitrary_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Arbitrary.js */ \"(rsc)/./node_modules/@effect/schema/dist/esm/Arbitrary.js\");\n/* harmony import */ var _AST_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AST.js */ \"(rsc)/./node_modules/@effect/schema/dist/esm/AST.js\");\n/* harmony import */ var _Equivalence_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./Equivalence.js */ \"(rsc)/./node_modules/@effect/schema/dist/esm/Equivalence.js\");\n/* harmony import */ var _internal_errors_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./internal/errors.js */ \"(rsc)/./node_modules/@effect/schema/dist/esm/internal/errors.js\");\n/* harmony import */ var _internal_filters_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./internal/filters.js */ \"(rsc)/./node_modules/@effect/schema/dist/esm/internal/filters.js\");\n/* harmony import */ var _internal_serializable_js__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./internal/serializable.js */ \"(rsc)/./node_modules/@effect/schema/dist/esm/internal/serializable.js\");\n/* harmony import */ var _internal_util_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./internal/util.js */ \"(rsc)/./node_modules/@effect/schema/dist/esm/internal/util.js\");\n/* harmony import */ var _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ParseResult.js */ \"(rsc)/./node_modules/@effect/schema/dist/esm/ParseResult.js\");\n/* harmony import */ var _Pretty_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Pretty.js */ \"(rsc)/./node_modules/@effect/schema/dist/esm/Pretty.js\");\n/* harmony import */ var _TreeFormatter_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./TreeFormatter.js */ \"(rsc)/./node_modules/@effect/schema/dist/esm/TreeFormatter.js\");\n/**\n * @since 1.0.0\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * @since 1.0.0\n * @category symbol\n */\nconst TypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/Schema\");\nconst variance = {\n  /* c8 ignore next */\n  _A: _ => _,\n  /* c8 ignore next */\n  _I: _ => _,\n  /* c8 ignore next */\n  _R: _ => _\n};\nconst toASTAnnotations = annotations => {\n  if (!annotations) {\n    return {};\n  }\n  const out = {};\n  // symbols are reserved for custom annotations\n  const custom = Object.getOwnPropertySymbols(annotations);\n  for (const sym of custom) {\n    out[sym] = annotations[sym];\n  }\n  // string keys are reserved as /schema namespace\n  if (annotations.typeId !== undefined) {\n    const typeId = annotations.typeId;\n    if (typeof typeId === \"object\") {\n      out[_AST_js__WEBPACK_IMPORTED_MODULE_0__.TypeAnnotationId] = typeId.id;\n      out[typeId.id] = typeId.annotation;\n    } else {\n      out[_AST_js__WEBPACK_IMPORTED_MODULE_0__.TypeAnnotationId] = typeId;\n    }\n  }\n  const move = (from, to) => {\n    if (annotations[from] !== undefined) {\n      out[to] = annotations[from];\n    }\n  };\n  move(\"message\", _AST_js__WEBPACK_IMPORTED_MODULE_0__.MessageAnnotationId);\n  move(\"identifier\", _AST_js__WEBPACK_IMPORTED_MODULE_0__.IdentifierAnnotationId);\n  move(\"title\", _AST_js__WEBPACK_IMPORTED_MODULE_0__.TitleAnnotationId);\n  move(\"description\", _AST_js__WEBPACK_IMPORTED_MODULE_0__.DescriptionAnnotationId);\n  move(\"examples\", _AST_js__WEBPACK_IMPORTED_MODULE_0__.ExamplesAnnotationId);\n  move(\"default\", _AST_js__WEBPACK_IMPORTED_MODULE_0__.DefaultAnnotationId);\n  move(\"documentation\", _AST_js__WEBPACK_IMPORTED_MODULE_0__.DocumentationAnnotationId);\n  move(\"jsonSchema\", _AST_js__WEBPACK_IMPORTED_MODULE_0__.JSONSchemaAnnotationId);\n  move(\"arbitrary\", _Arbitrary_js__WEBPACK_IMPORTED_MODULE_1__.ArbitraryHookId);\n  move(\"pretty\", _Pretty_js__WEBPACK_IMPORTED_MODULE_2__.PrettyHookId);\n  move(\"equivalence\", _Equivalence_js__WEBPACK_IMPORTED_MODULE_3__.EquivalenceHookId);\n  move(\"concurrency\", _AST_js__WEBPACK_IMPORTED_MODULE_0__.ConcurrencyAnnotationId);\n  move(\"batching\", _AST_js__WEBPACK_IMPORTED_MODULE_0__.BatchingAnnotationId);\n  move(\"parseIssueTitle\", _AST_js__WEBPACK_IMPORTED_MODULE_0__.ParseIssueTitleAnnotationId);\n  return out;\n};\nclass SchemaImpl {\n  ast;\n  [TypeId] = variance;\n  constructor(ast) {\n    this.ast = ast;\n  }\n  pipe() {\n    return (0,effect_Pipeable__WEBPACK_IMPORTED_MODULE_4__.pipeArguments)(this, arguments);\n  }\n  annotations(annotations) {\n    return new SchemaImpl(_AST_js__WEBPACK_IMPORTED_MODULE_0__.annotations(this.ast, toASTAnnotations(annotations)));\n  }\n  toString() {\n    return String(this.ast);\n  }\n}\n/**\n * @since 1.0.0\n */\nconst asSchema = schema => schema;\n/**\n * @category hashing\n * @since 1.0.0\n */\nconst hash = schema => _AST_js__WEBPACK_IMPORTED_MODULE_0__.hash(schema.ast);\n/**\n * @category formatting\n * @since 1.0.0\n */\nconst format = schema => String(schema.ast);\n/**\n * @since 1.0.0\n */\nconst encodedSchema = schema => make(_AST_js__WEBPACK_IMPORTED_MODULE_0__.encodedAST(schema.ast));\n/**\n * @since 1.0.0\n */\nconst typeSchema = schema => make(_AST_js__WEBPACK_IMPORTED_MODULE_0__.typeAST(schema.ast));\n/* c8 ignore start */\n\n/* c8 ignore end */\n/**\n * @category encoding\n * @since 1.0.0\n */\nconst encodeUnknown = (schema, options) => {\n  const encodeUnknown = _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.encodeUnknown(schema, options);\n  return (u, overrideOptions) => _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.mapError(encodeUnknown(u, overrideOptions), _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.parseError);\n};\n/**\n * @category encoding\n * @since 1.0.0\n */\nconst encodeUnknownEither = (schema, options) => {\n  const encodeUnknownEither = _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.encodeUnknownEither(schema, options);\n  return (u, overrideOptions) => effect_Either__WEBPACK_IMPORTED_MODULE_6__.mapLeft(encodeUnknownEither(u, overrideOptions), _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.parseError);\n};\n/**\n * @category encoding\n * @since 1.0.0\n */\nconst encodeUnknownPromise = (schema, options) => {\n  const parser = encodeUnknown(schema, options);\n  return (u, overrideOptions) => effect_Effect__WEBPACK_IMPORTED_MODULE_7__.runPromise(parser(u, overrideOptions));\n};\n/**\n * @category encoding\n * @since 1.0.0\n */\nconst encode = encodeUnknown;\n/**\n * @category encoding\n * @since 1.0.0\n */\nconst encodeEither = encodeUnknownEither;\n/**\n * @category encoding\n * @since 1.0.0\n */\nconst encodePromise = encodeUnknownPromise;\n/**\n * @category decoding\n * @since 1.0.0\n */\nconst decodeUnknown = (schema, options) => {\n  const decodeUnknown = _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.decodeUnknown(schema, options);\n  return (u, overrideOptions) => _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.mapError(decodeUnknown(u, overrideOptions), _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.parseError);\n};\n/**\n * @category decoding\n * @since 1.0.0\n */\nconst decodeUnknownEither = (schema, options) => {\n  const decodeUnknownEither = _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.decodeUnknownEither(schema, options);\n  return (u, overrideOptions) => effect_Either__WEBPACK_IMPORTED_MODULE_6__.mapLeft(decodeUnknownEither(u, overrideOptions), _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.parseError);\n};\n/**\n * @category decoding\n * @since 1.0.0\n */\nconst decodeUnknownPromise = (schema, options) => {\n  const parser = decodeUnknown(schema, options);\n  return (u, overrideOptions) => effect_Effect__WEBPACK_IMPORTED_MODULE_7__.runPromise(parser(u, overrideOptions));\n};\n/**\n * @category decoding\n * @since 1.0.0\n */\nconst decode = decodeUnknown;\n/**\n * @category decoding\n * @since 1.0.0\n */\nconst decodeEither = decodeUnknownEither;\n/**\n * @category decoding\n * @since 1.0.0\n */\nconst decodePromise = decodeUnknownPromise;\n/**\n * @category validation\n * @since 1.0.0\n */\nconst validate = (schema, options) => {\n  const validate = _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.validate(schema, options);\n  return (u, overrideOptions) => _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.mapError(validate(u, overrideOptions), _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.parseError);\n};\n/**\n * @category validation\n * @since 1.0.0\n */\nconst validateEither = (schema, options) => {\n  const validateEither = _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.validateEither(schema, options);\n  return (u, overrideOptions) => effect_Either__WEBPACK_IMPORTED_MODULE_6__.mapLeft(validateEither(u, overrideOptions), _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.parseError);\n};\n/**\n * @category validation\n * @since 1.0.0\n */\nconst validatePromise = (schema, options) => {\n  const parser = validate(schema, options);\n  return (u, overrideOptions) => effect_Effect__WEBPACK_IMPORTED_MODULE_7__.runPromise(parser(u, overrideOptions));\n};\n/**\n * Tests if a value is a `Schema`.\n *\n * @category guards\n * @since 1.0.0\n */\nconst isSchema = u => effect_Predicate__WEBPACK_IMPORTED_MODULE_8__.hasProperty(u, TypeId) && effect_Predicate__WEBPACK_IMPORTED_MODULE_8__.isObject(u[TypeId]);\n/**\n * @category constructors\n * @since 1.0.0\n */\nconst make = ast => new SchemaImpl(ast);\nclass LiteralImpl extends SchemaImpl {\n  static ast = literals => {\n    return _AST_js__WEBPACK_IMPORTED_MODULE_0__.isMembers(literals) ? _AST_js__WEBPACK_IMPORTED_MODULE_0__.Union.make(_AST_js__WEBPACK_IMPORTED_MODULE_0__.mapMembers(literals, literal => new _AST_js__WEBPACK_IMPORTED_MODULE_0__.Literal(literal))) : new _AST_js__WEBPACK_IMPORTED_MODULE_0__.Literal(literals[0]);\n  };\n  literals;\n  constructor(literals, ast = LiteralImpl.ast(literals)) {\n    super(ast);\n    this.literals = [...literals];\n  }\n  annotations(annotations) {\n    return new LiteralImpl(this.literals, _AST_js__WEBPACK_IMPORTED_MODULE_0__.annotations(this.ast, toASTAnnotations(annotations)));\n  }\n}\nfunction Literal(...literals) {\n  return effect_Array__WEBPACK_IMPORTED_MODULE_9__.isNonEmptyReadonlyArray(literals) ? new LiteralImpl(literals) : Never;\n}\n/**\n * Creates a new `Schema` from a literal schema.\n *\n * @example\n * import * as S from \"@effect/schema/Schema\"\n * import { Either } from \"effect\"\n *\n * const schema = S.Literal(\"a\", \"b\", \"c\").pipe(S.pickLiteral(\"a\", \"b\"))\n *\n * assert.deepStrictEqual(S.decodeSync(schema)(\"a\"), \"a\")\n * assert.deepStrictEqual(S.decodeSync(schema)(\"b\"), \"b\")\n * assert.strictEqual(Either.isLeft(S.decodeUnknownEither(schema)(\"c\")), true)\n *\n * @category constructors\n * @since 1.0.0\n */\nconst pickLiteral = (...literals) => _schema => Literal(...literals);\n/**\n * @category constructors\n * @since 1.0.0\n */\nconst UniqueSymbolFromSelf = symbol => make(new _AST_js__WEBPACK_IMPORTED_MODULE_0__.UniqueSymbol(symbol));\nclass EnumsImpl extends SchemaImpl {\n  enums;\n  static ast = enums => {\n    return new _AST_js__WEBPACK_IMPORTED_MODULE_0__.Enums(Object.keys(enums).filter(key => typeof enums[enums[key]] !== \"number\").map(key => [key, enums[key]]));\n  };\n  constructor(enums, ast = EnumsImpl.ast(enums)) {\n    super(ast);\n    this.enums = enums;\n  }\n  annotations(annotations) {\n    return new EnumsImpl(this.enums, _AST_js__WEBPACK_IMPORTED_MODULE_0__.annotations(this.ast, toASTAnnotations(annotations)));\n  }\n}\n/**\n * @category constructors\n * @since 1.0.0\n */\nconst Enums = enums => new EnumsImpl(enums);\n/**\n * @category constructors\n * @since 1.0.0\n */\nconst TemplateLiteral = (...[head, ...tail]) => {\n  let types = getTemplateLiterals(head.ast);\n  for (const span of tail) {\n    types = effect_Array__WEBPACK_IMPORTED_MODULE_9__.flatMap(types, a => getTemplateLiterals(span.ast).map(b => combineTemplateLiterals(a, b)));\n  }\n  return make(_AST_js__WEBPACK_IMPORTED_MODULE_0__.Union.make(types));\n};\nconst combineTemplateLiterals = (a, b) => {\n  if (_AST_js__WEBPACK_IMPORTED_MODULE_0__.isLiteral(a)) {\n    return _AST_js__WEBPACK_IMPORTED_MODULE_0__.isLiteral(b) ? new _AST_js__WEBPACK_IMPORTED_MODULE_0__.Literal(String(a.literal) + String(b.literal)) : _AST_js__WEBPACK_IMPORTED_MODULE_0__.TemplateLiteral.make(String(a.literal) + b.head, b.spans);\n  }\n  if (_AST_js__WEBPACK_IMPORTED_MODULE_0__.isLiteral(b)) {\n    return _AST_js__WEBPACK_IMPORTED_MODULE_0__.TemplateLiteral.make(a.head, effect_Array__WEBPACK_IMPORTED_MODULE_9__.modifyNonEmptyLast(a.spans, span => new _AST_js__WEBPACK_IMPORTED_MODULE_0__.TemplateLiteralSpan(span.type, span.literal + String(b.literal))));\n  }\n  return _AST_js__WEBPACK_IMPORTED_MODULE_0__.TemplateLiteral.make(a.head, effect_Array__WEBPACK_IMPORTED_MODULE_9__.appendAll(effect_Array__WEBPACK_IMPORTED_MODULE_9__.modifyNonEmptyLast(a.spans, span => new _AST_js__WEBPACK_IMPORTED_MODULE_0__.TemplateLiteralSpan(span.type, span.literal + String(b.head))), b.spans));\n};\nconst getTemplateLiterals = ast => {\n  switch (ast._tag) {\n    case \"Literal\":\n      return [ast];\n    case \"NumberKeyword\":\n    case \"StringKeyword\":\n      return [_AST_js__WEBPACK_IMPORTED_MODULE_0__.TemplateLiteral.make(\"\", [new _AST_js__WEBPACK_IMPORTED_MODULE_0__.TemplateLiteralSpan(ast, \"\")])];\n    case \"Union\":\n      return effect_Array__WEBPACK_IMPORTED_MODULE_9__.flatMap(ast.types, getTemplateLiterals);\n    default:\n      throw new Error(`unsupported template literal span (${ast})`);\n  }\n};\nconst declareConstructor = (typeParameters, options, annotations) => make(new _AST_js__WEBPACK_IMPORTED_MODULE_0__.Declaration(typeParameters.map(tp => tp.ast), (...typeParameters) => options.decode(...typeParameters.map(make)), (...typeParameters) => options.encode(...typeParameters.map(make)), toASTAnnotations(annotations)));\nconst declarePrimitive = (is, annotations) => {\n  const decodeUnknown = () => (input, _, ast) => is(input) ? _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.succeed(input) : _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.fail(new _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.Type(ast, input));\n  const encodeUnknown = decodeUnknown;\n  return make(new _AST_js__WEBPACK_IMPORTED_MODULE_0__.Declaration([], decodeUnknown, encodeUnknown, toASTAnnotations(annotations)));\n};\n/**\n * The constraint `R extends Schema.Context<P[number]>` enforces dependencies solely from `typeParameters`.\n * This ensures that when you call `Schema.to` or `Schema.from`, you receive a schema with a `never` context.\n *\n * @category constructors\n * @since 1.0.0\n */\nconst declare = function () {\n  if (Array.isArray(arguments[0])) {\n    const typeParameters = arguments[0];\n    const options = arguments[1];\n    const annotations = arguments[2];\n    return declareConstructor(typeParameters, options, annotations);\n  }\n  const is = arguments[0];\n  const annotations = arguments[1];\n  return declarePrimitive(is, annotations);\n};\n/**\n * @category type id\n * @since 1.0.0\n */\nconst BrandTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/Brand\");\n/**\n * @category constructors\n * @since 1.0.0\n */\nconst fromBrand = (constructor, annotations) => self => make(new _AST_js__WEBPACK_IMPORTED_MODULE_0__.Refinement(self.ast, (a, _, ast) => {\n  const either = constructor.either(a);\n  return effect_Either__WEBPACK_IMPORTED_MODULE_6__.isLeft(either) ? effect_Option__WEBPACK_IMPORTED_MODULE_10__.some(new _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.Type(ast, a, either.left.map(v => v.message).join(\", \"))) : effect_Option__WEBPACK_IMPORTED_MODULE_10__.none();\n}, toASTAnnotations({\n  typeId: {\n    id: BrandTypeId,\n    annotation: {\n      constructor\n    }\n  },\n  ...annotations\n})));\n/**\n * @category type id\n * @since 1.0.0\n */\nconst InstanceOfTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/InstanceOf\");\n/**\n * @category constructors\n * @since 1.0.0\n */\nconst instanceOf = (constructor, annotations) => declare(u => u instanceof constructor, {\n  title: constructor.name,\n  description: `an instance of ${constructor.name}`,\n  pretty: () => String,\n  typeId: {\n    id: InstanceOfTypeId,\n    annotation: {\n      constructor\n    }\n  },\n  ...annotations\n});\n/**\n * @category primitives\n * @since 1.0.0\n */\nconst Undefined = /*#__PURE__*/make(_AST_js__WEBPACK_IMPORTED_MODULE_0__.undefinedKeyword);\n/**\n * @category primitives\n * @since 1.0.0\n */\nconst Void = /*#__PURE__*/make(_AST_js__WEBPACK_IMPORTED_MODULE_0__.voidKeyword);\n/**\n * @category primitives\n * @since 1.0.0\n */\nconst Null = /*#__PURE__*/make(_AST_js__WEBPACK_IMPORTED_MODULE_0__[\"null\"]);\n/**\n * @category primitives\n * @since 1.0.0\n */\nconst Never = /*#__PURE__*/make(_AST_js__WEBPACK_IMPORTED_MODULE_0__.neverKeyword);\n/**\n * @category primitives\n * @since 1.0.0\n */\nconst Unknown = /*#__PURE__*/make(_AST_js__WEBPACK_IMPORTED_MODULE_0__.unknownKeyword);\n/**\n * @category primitives\n * @since 1.0.0\n */\nconst Any = /*#__PURE__*/make(_AST_js__WEBPACK_IMPORTED_MODULE_0__.anyKeyword);\nconst $String = /*#__PURE__*/make(_AST_js__WEBPACK_IMPORTED_MODULE_0__.stringKeyword);\nconst $Number = /*#__PURE__*/make(_AST_js__WEBPACK_IMPORTED_MODULE_0__.numberKeyword);\nconst $Boolean = /*#__PURE__*/make(_AST_js__WEBPACK_IMPORTED_MODULE_0__.booleanKeyword);\n/**\n * @category primitives\n * @since 1.0.0\n */\nconst BigIntFromSelf = /*#__PURE__*/make(_AST_js__WEBPACK_IMPORTED_MODULE_0__.bigIntKeyword);\n/**\n * @category primitives\n * @since 1.0.0\n */\nconst SymbolFromSelf = /*#__PURE__*/make(_AST_js__WEBPACK_IMPORTED_MODULE_0__.symbolKeyword);\nconst $Object = /*#__PURE__*/make(_AST_js__WEBPACK_IMPORTED_MODULE_0__.objectKeyword);\n\nclass UnionImpl extends SchemaImpl {\n  static ast = members => {\n    return _AST_js__WEBPACK_IMPORTED_MODULE_0__.Union.members(members.map(m => m.ast));\n  };\n  members;\n  constructor(members, ast = UnionImpl.ast(members)) {\n    super(ast);\n    this.members = [...members];\n  }\n  annotations(annotations) {\n    return new UnionImpl(this.members, _AST_js__WEBPACK_IMPORTED_MODULE_0__.annotations(this.ast, toASTAnnotations(annotations)));\n  }\n}\nfunction Union(...members) {\n  return _AST_js__WEBPACK_IMPORTED_MODULE_0__.isMembers(members) ? new UnionImpl(members) : effect_Array__WEBPACK_IMPORTED_MODULE_9__.isNonEmptyReadonlyArray(members) ? members[0] : Never;\n}\n/**\n * @category combinators\n * @since 1.0.0\n */\nconst NullOr = self => Union(self, Null);\n/**\n * @category combinators\n * @since 1.0.0\n */\nconst UndefinedOr = self => Union(self, Undefined);\n/**\n * @category combinators\n * @since 1.0.0\n */\nconst NullishOr = self => Union(self, Null, Undefined);\n/**\n * @category combinators\n * @since 1.0.0\n */\nconst keyof = self => make(_AST_js__WEBPACK_IMPORTED_MODULE_0__.keyof(self.ast));\n/**\n * @since 1.0.0\n */\nconst optionalElement = self => new OptionalElementImpl(self);\nclass OptionalElementImpl {\n  optionalElement;\n  [TypeId];\n  constructor(optionalElement) {\n    this.optionalElement = optionalElement;\n  }\n  toString() {\n    return `${this.optionalElement.ast}?`;\n  }\n}\nclass TupleTypeImpl extends SchemaImpl {\n  elements;\n  rest;\n  static ast = (elements, rest) => {\n    return new _AST_js__WEBPACK_IMPORTED_MODULE_0__.TupleType(elements.map(schema => isSchema(schema) ? new _AST_js__WEBPACK_IMPORTED_MODULE_0__.Element(schema.ast, false) : new _AST_js__WEBPACK_IMPORTED_MODULE_0__.Element(schema.optionalElement.ast, true)), rest.map(e => e.ast), true);\n  };\n  constructor(elements, rest, ast = TupleTypeImpl.ast(elements, rest)) {\n    super(ast);\n    this.elements = elements;\n    this.rest = rest;\n  }\n  annotations(annotations) {\n    return new TupleTypeImpl(this.elements, this.rest, _AST_js__WEBPACK_IMPORTED_MODULE_0__.annotations(this.ast, toASTAnnotations(annotations)));\n  }\n}\nfunction Tuple(...args) {\n  return Array.isArray(args[0]) ? new TupleTypeImpl(args[0], args.slice(1)) : new TupleTypeImpl(args, []);\n}\nclass $ArrayImpl extends TupleTypeImpl {\n  value;\n  constructor(value, ast) {\n    super([], [value], ast);\n    this.value = value;\n  }\n  annotations(annotations) {\n    return new $ArrayImpl(this.value, _AST_js__WEBPACK_IMPORTED_MODULE_0__.annotations(this.ast, toASTAnnotations(annotations)));\n  }\n}\nconst $Array = value => new $ArrayImpl(value);\n\nclass NonEmptyArrayImpl extends TupleTypeImpl {\n  value;\n  constructor(value, ast) {\n    super([value], [value], ast);\n    this.value = value;\n  }\n  annotations(annotations) {\n    return new NonEmptyArrayImpl(this.value, _AST_js__WEBPACK_IMPORTED_MODULE_0__.annotations(this.ast, toASTAnnotations(annotations)));\n  }\n}\n/**\n * @category constructors\n * @since 1.0.0\n */\nconst NonEmptyArray = value => new NonEmptyArrayImpl(value);\nconst formatToken = isOptional => isOptional ? \"\\\"?:\\\"\" : \"\\\":\\\"\";\n/**\n * @category PropertySignature\n * @since 1.0.0\n */\nclass PropertySignatureDeclaration {\n  type;\n  isOptional;\n  isReadonly;\n  annotations;\n  /**\n   * @since 1.0.0\n   */\n  _tag = \"PropertySignatureDeclaration\";\n  constructor(type, isOptional, isReadonly, annotations) {\n    this.type = type;\n    this.isOptional = isOptional;\n    this.isReadonly = isReadonly;\n    this.annotations = annotations;\n  }\n  /**\n   * @since 1.0.0\n   */\n  toString() {\n    const token = formatToken(this.isOptional);\n    const type = String(this.type);\n    return `PropertySignature<${token}, ${type}, never, ${token}, ${type}>`;\n  }\n}\n/**\n * @category PropertySignature\n * @since 1.0.0\n */\nclass FromPropertySignature {\n  type;\n  isOptional;\n  isReadonly;\n  annotations;\n  fromKey;\n  constructor(type, isOptional, isReadonly, annotations, fromKey) {\n    this.type = type;\n    this.isOptional = isOptional;\n    this.isReadonly = isReadonly;\n    this.annotations = annotations;\n    this.fromKey = fromKey;\n  }\n}\n/**\n * @category PropertySignature\n * @since 1.0.0\n */\nclass ToPropertySignature {\n  type;\n  isOptional;\n  isReadonly;\n  annotations;\n  constructor(type, isOptional, isReadonly, annotations) {\n    this.type = type;\n    this.isOptional = isOptional;\n    this.isReadonly = isReadonly;\n    this.annotations = annotations;\n  }\n}\nconst formatPropertyKey = p => {\n  if (p === undefined) {\n    return \"never\";\n  }\n  if (effect_Predicate__WEBPACK_IMPORTED_MODULE_8__.isString(p)) {\n    return JSON.stringify(p);\n  }\n  return String(p);\n};\n/**\n * @category PropertySignature\n * @since 1.0.0\n */\nclass PropertySignatureTransformation {\n  from;\n  to;\n  decode;\n  encode;\n  /**\n   * @since 1.0.0\n   */\n  _tag = \"PropertySignatureTransformation\";\n  constructor(from, to, decode, encode) {\n    this.from = from;\n    this.to = to;\n    this.decode = decode;\n    this.encode = encode;\n  }\n  /**\n   * @since 1.0.0\n   */\n  toString() {\n    return `PropertySignature<${formatToken(this.to.isOptional)}, ${this.to.type}, ${formatPropertyKey(this.from.fromKey)}, ${formatToken(this.from.isOptional)}, ${this.from.type}>`;\n  }\n}\n/**\n * @since 1.0.0\n * @category symbol\n */\nconst PropertySignatureTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/PropertySignature\");\nconst propertySignatureAnnotations_ = (ast, annotations) => {\n  switch (ast._tag) {\n    case \"PropertySignatureDeclaration\":\n      {\n        return new PropertySignatureDeclaration(ast.type, ast.isOptional, ast.isReadonly, {\n          ...ast.annotations,\n          ...annotations\n        });\n      }\n    case \"PropertySignatureTransformation\":\n      {\n        return new PropertySignatureTransformation(new FromPropertySignature(ast.from.type, ast.from.isOptional, ast.from.isReadonly, ast.from.annotations), new ToPropertySignature(ast.to.type, ast.to.isOptional, ast.to.isReadonly, {\n          ...ast.to.annotations,\n          ...annotations\n        }), ast.decode, ast.encode);\n      }\n  }\n};\n/** @internal */\nclass PropertySignatureImpl {\n  ast;\n  [TypeId];\n  [PropertySignatureTypeId] = null;\n  _Key;\n  _EncodedToken;\n  _TypeToken;\n  constructor(ast) {\n    this.ast = ast;\n  }\n  pipe() {\n    return (0,effect_Pipeable__WEBPACK_IMPORTED_MODULE_4__.pipeArguments)(this, arguments);\n  }\n  annotations(annotations) {\n    return new PropertySignatureImpl(propertySignatureAnnotations_(this.ast, toASTAnnotations(annotations)));\n  }\n  toString() {\n    return String(this.ast);\n  }\n}\n/**\n * @category PropertySignature\n * @since 1.0.0\n */\nconst propertySignature = self => new PropertySignatureImpl(new PropertySignatureDeclaration(self.ast, false, true, {}));\n/**\n * @category PropertySignature\n * @since 1.0.0\n */\nconst fromKey = /*#__PURE__*/(0,effect_Function__WEBPACK_IMPORTED_MODULE_11__.dual)(2, (self, key) => {\n  const ast = self.ast;\n  switch (ast._tag) {\n    case \"PropertySignatureDeclaration\":\n      {\n        return new PropertySignatureImpl(new PropertySignatureTransformation(new FromPropertySignature(ast.type, ast.isOptional, ast.isReadonly, ast.annotations, key), new ToPropertySignature(_AST_js__WEBPACK_IMPORTED_MODULE_0__.typeAST(ast.type), ast.isOptional, ast.isReadonly, {}), effect_Function__WEBPACK_IMPORTED_MODULE_11__.identity, effect_Function__WEBPACK_IMPORTED_MODULE_11__.identity));\n      }\n    case \"PropertySignatureTransformation\":\n      return new PropertySignatureImpl(new PropertySignatureTransformation(new FromPropertySignature(ast.from.type, ast.from.isOptional, ast.from.isReadonly, ast.from.annotations, key), ast.to, ast.decode, ast.encode));\n  }\n});\n/**\n * - `decode`: `none` as argument means: the value is missing in the input\n * - `encode`: `none` as return value means: the value will be missing in the output\n *\n * @category PropertySignature\n * @since 1.0.0\n */\nconst optionalToRequired = (from, to, options) => new PropertySignatureImpl(new PropertySignatureTransformation(new FromPropertySignature(from.ast, true, true, {}, undefined), new ToPropertySignature(to.ast, false, true, {}), o => effect_Option__WEBPACK_IMPORTED_MODULE_10__.some(options.decode(o)), effect_Option__WEBPACK_IMPORTED_MODULE_10__.flatMap(options.encode)));\n/**\n * - `decode`:\n *   - `none` as argument means: the value is missing in the input\n *   - `none` as return value means: the value will be missing in the output\n * - `encode`:\n *   - `none` as argument means: the value is missing in the input\n *   - `none` as return value means: the value will be missing in the output\n *\n * @category PropertySignature\n * @since 1.0.0\n */\nconst optionalToOptional = (from, to, options) => new PropertySignatureImpl(new PropertySignatureTransformation(new FromPropertySignature(from.ast, true, true, {}, undefined), new ToPropertySignature(to.ast, true, true, {}), options.decode, options.encode));\n/**\n * @category PropertySignature\n * @since 1.0.0\n */\nconst optional = /*#__PURE__*/(0,effect_Function__WEBPACK_IMPORTED_MODULE_11__.dual)(args => isSchema(args[0]), (schema, options) => {\n  const isExact = options?.exact;\n  const defaultValue = options?.default;\n  const isNullable = options?.nullable;\n  const asOption = options?.as == \"Option\";\n  if (isExact) {\n    if (defaultValue) {\n      if (isNullable) {\n        return optionalToRequired(NullOr(schema), typeSchema(schema), {\n          decode: effect_Option__WEBPACK_IMPORTED_MODULE_10__.match({\n            onNone: defaultValue,\n            onSome: a => a === null ? defaultValue() : a\n          }),\n          encode: effect_Option__WEBPACK_IMPORTED_MODULE_10__.some\n        });\n      } else {\n        return optionalToRequired(schema, typeSchema(schema), {\n          decode: effect_Option__WEBPACK_IMPORTED_MODULE_10__.match({\n            onNone: defaultValue,\n            onSome: effect_Function__WEBPACK_IMPORTED_MODULE_11__.identity\n          }),\n          encode: effect_Option__WEBPACK_IMPORTED_MODULE_10__.some\n        });\n      }\n    } else if (asOption) {\n      if (isNullable) {\n        return optionalToRequired(NullOr(schema), OptionFromSelf(typeSchema(schema)), {\n          decode: effect_Option__WEBPACK_IMPORTED_MODULE_10__.filter(effect_Predicate__WEBPACK_IMPORTED_MODULE_8__.isNotNull),\n          encode: effect_Function__WEBPACK_IMPORTED_MODULE_11__.identity\n        });\n      } else {\n        return optionalToRequired(schema, OptionFromSelf(typeSchema(schema)), {\n          decode: effect_Function__WEBPACK_IMPORTED_MODULE_11__.identity,\n          encode: effect_Function__WEBPACK_IMPORTED_MODULE_11__.identity\n        });\n      }\n    } else {\n      if (isNullable) {\n        return optionalToOptional(NullOr(schema), typeSchema(schema), {\n          decode: effect_Option__WEBPACK_IMPORTED_MODULE_10__.filter(effect_Predicate__WEBPACK_IMPORTED_MODULE_8__.isNotNull),\n          encode: effect_Function__WEBPACK_IMPORTED_MODULE_11__.identity\n        });\n      } else {\n        return new PropertySignatureImpl(new PropertySignatureDeclaration(schema.ast, true, true, {}));\n      }\n    }\n  } else {\n    if (defaultValue) {\n      if (isNullable) {\n        return optionalToRequired(NullishOr(schema), typeSchema(schema), {\n          decode: effect_Option__WEBPACK_IMPORTED_MODULE_10__.match({\n            onNone: defaultValue,\n            onSome: a => a == null ? defaultValue() : a\n          }),\n          encode: effect_Option__WEBPACK_IMPORTED_MODULE_10__.some\n        });\n      } else {\n        return optionalToRequired(UndefinedOr(schema), typeSchema(schema), {\n          decode: effect_Option__WEBPACK_IMPORTED_MODULE_10__.match({\n            onNone: defaultValue,\n            onSome: a => a === undefined ? defaultValue() : a\n          }),\n          encode: effect_Option__WEBPACK_IMPORTED_MODULE_10__.some\n        });\n      }\n    } else if (asOption) {\n      if (isNullable) {\n        return optionalToRequired(NullishOr(schema), OptionFromSelf(typeSchema(schema)), {\n          decode: effect_Option__WEBPACK_IMPORTED_MODULE_10__.filter(a => a != null),\n          encode: effect_Function__WEBPACK_IMPORTED_MODULE_11__.identity\n        });\n      } else {\n        return optionalToRequired(UndefinedOr(schema), OptionFromSelf(typeSchema(schema)), {\n          decode: effect_Option__WEBPACK_IMPORTED_MODULE_10__.filter(effect_Predicate__WEBPACK_IMPORTED_MODULE_8__.isNotUndefined),\n          encode: effect_Function__WEBPACK_IMPORTED_MODULE_11__.identity\n        });\n      }\n    } else {\n      if (isNullable) {\n        return optionalToOptional(NullishOr(schema), UndefinedOr(typeSchema(schema)), {\n          decode: effect_Option__WEBPACK_IMPORTED_MODULE_10__.filter(effect_Predicate__WEBPACK_IMPORTED_MODULE_8__.isNotNull),\n          encode: effect_Function__WEBPACK_IMPORTED_MODULE_11__.identity\n        });\n      } else {\n        return new PropertySignatureImpl(new PropertySignatureDeclaration(UndefinedOr(schema).ast, true, true, {}));\n      }\n    }\n  }\n});\nconst isPropertySignature = u => effect_Predicate__WEBPACK_IMPORTED_MODULE_8__.hasProperty(u, PropertySignatureTypeId);\nclass TypeLiteralImpl extends SchemaImpl {\n  static ast = (fields, records) => {\n    const ownKeys = _internal_util_js__WEBPACK_IMPORTED_MODULE_12__.ownKeys(fields);\n    const pss = [];\n    if (ownKeys.length > 0) {\n      const from = [];\n      const to = [];\n      const transformations = [];\n      for (let i = 0; i < ownKeys.length; i++) {\n        const key = ownKeys[i];\n        const field = fields[key];\n        if (isPropertySignature(field)) {\n          const ast = field.ast;\n          switch (ast._tag) {\n            case \"PropertySignatureDeclaration\":\n              {\n                const type = ast.type;\n                const isOptional = ast.isOptional;\n                const toAnnotations = ast.annotations;\n                from.push(new _AST_js__WEBPACK_IMPORTED_MODULE_0__.PropertySignature(key, type, isOptional, true));\n                to.push(new _AST_js__WEBPACK_IMPORTED_MODULE_0__.PropertySignature(key, _AST_js__WEBPACK_IMPORTED_MODULE_0__.typeAST(type), isOptional, true, toAnnotations));\n                pss.push(new _AST_js__WEBPACK_IMPORTED_MODULE_0__.PropertySignature(key, type, isOptional, true, toAnnotations));\n                break;\n              }\n            case \"PropertySignatureTransformation\":\n              {\n                const fromKey = ast.from.fromKey ?? key;\n                from.push(new _AST_js__WEBPACK_IMPORTED_MODULE_0__.PropertySignature(fromKey, ast.from.type, ast.from.isOptional, true, ast.from.annotations));\n                to.push(new _AST_js__WEBPACK_IMPORTED_MODULE_0__.PropertySignature(key, ast.to.type, ast.to.isOptional, true, ast.to.annotations));\n                transformations.push(new _AST_js__WEBPACK_IMPORTED_MODULE_0__.PropertySignatureTransformation(fromKey, key, ast.decode, ast.encode));\n                break;\n              }\n          }\n        } else {\n          from.push(new _AST_js__WEBPACK_IMPORTED_MODULE_0__.PropertySignature(key, field.ast, false, true));\n          to.push(new _AST_js__WEBPACK_IMPORTED_MODULE_0__.PropertySignature(key, _AST_js__WEBPACK_IMPORTED_MODULE_0__.typeAST(field.ast), false, true));\n          pss.push(new _AST_js__WEBPACK_IMPORTED_MODULE_0__.PropertySignature(key, field.ast, false, true));\n        }\n      }\n      if (effect_Array__WEBPACK_IMPORTED_MODULE_9__.isNonEmptyReadonlyArray(transformations)) {\n        const issFrom = [];\n        const issTo = [];\n        for (const r of records) {\n          const {\n            indexSignatures,\n            propertySignatures\n          } = _AST_js__WEBPACK_IMPORTED_MODULE_0__.record(r.key.ast, r.value.ast);\n          propertySignatures.forEach(ps => {\n            from.push(ps);\n            to.push(new _AST_js__WEBPACK_IMPORTED_MODULE_0__.PropertySignature(ps.name, _AST_js__WEBPACK_IMPORTED_MODULE_0__.typeAST(ps.type), ps.isOptional, ps.isReadonly, ps.annotations));\n          });\n          indexSignatures.forEach(is => {\n            issFrom.push(is);\n            issTo.push(new _AST_js__WEBPACK_IMPORTED_MODULE_0__.IndexSignature(is.parameter, _AST_js__WEBPACK_IMPORTED_MODULE_0__.typeAST(is.type), is.isReadonly));\n          });\n        }\n        return new _AST_js__WEBPACK_IMPORTED_MODULE_0__.Transformation(new _AST_js__WEBPACK_IMPORTED_MODULE_0__.TypeLiteral(from, issFrom, {\n          [_AST_js__WEBPACK_IMPORTED_MODULE_0__.TitleAnnotationId]: \"Struct (Encoded side)\"\n        }), new _AST_js__WEBPACK_IMPORTED_MODULE_0__.TypeLiteral(to, issTo, {\n          [_AST_js__WEBPACK_IMPORTED_MODULE_0__.TitleAnnotationId]: \"Struct (Type side)\"\n        }), new _AST_js__WEBPACK_IMPORTED_MODULE_0__.TypeLiteralTransformation(transformations));\n      }\n    }\n    const iss = [];\n    for (const r of records) {\n      const {\n        indexSignatures,\n        propertySignatures\n      } = _AST_js__WEBPACK_IMPORTED_MODULE_0__.record(r.key.ast, r.value.ast);\n      propertySignatures.forEach(ps => pss.push(ps));\n      indexSignatures.forEach(is => iss.push(is));\n    }\n    return new _AST_js__WEBPACK_IMPORTED_MODULE_0__.TypeLiteral(pss, iss);\n  };\n  fields;\n  records;\n  constructor(fields, records, ast = TypeLiteralImpl.ast(fields, records)) {\n    super(ast);\n    this.fields = {\n      ...fields\n    };\n    this.records = [...records];\n  }\n  annotations(annotations) {\n    return new TypeLiteralImpl(this.fields, this.records, _AST_js__WEBPACK_IMPORTED_MODULE_0__.annotations(this.ast, toASTAnnotations(annotations)));\n  }\n}\nfunction Struct(fields, ...records) {\n  return new TypeLiteralImpl(fields, records);\n}\nclass $RecordImpl extends TypeLiteralImpl {\n  key;\n  value;\n  constructor(key, value, ast) {\n    super({}, [{\n      key,\n      value\n    }], ast);\n    this.key = key;\n    this.value = value;\n  }\n  annotations(annotations) {\n    return new $RecordImpl(this.key, this.value, _AST_js__WEBPACK_IMPORTED_MODULE_0__.annotations(this.ast, toASTAnnotations(annotations)));\n  }\n}\n/**\n * @category constructors\n * @since 1.0.0\n */\nconst Record = (key, value) => new $RecordImpl(key, value);\n/**\n * @category struct transformations\n * @since 1.0.0\n */\nconst pick = (...keys) => self => make(_AST_js__WEBPACK_IMPORTED_MODULE_0__.pick(self.ast, keys));\n/**\n * @category struct transformations\n * @since 1.0.0\n */\nconst omit = (...keys) => self => make(_AST_js__WEBPACK_IMPORTED_MODULE_0__.omit(self.ast, keys));\n/**\n * Given a schema `Schema<A, I, R>` and a key `key: K`, this function extracts a specific field from the `A` type,\n * producing a new schema that represents a transformation from the `{ readonly [key]: I[K] }` type to `A[K]`.\n *\n * @example\n * import * as S from \"@effect/schema/Schema\"\n *\n * // ---------------------------------------------\n * // use case: pull out a single field from a\n * // struct through a transformation\n * // ---------------------------------------------\n *\n * const mytable = S.Struct({\n *   column1: S.NumberFromString,\n *   column2: S.Number\n * })\n *\n * // const pullOutColumn: S.Schema<number, {\n * //     readonly column1: string;\n * // }, never>\n * const pullOutColumn = mytable.pipe(S.pluck(\"column1\"))\n *\n * console.log(S.decodeUnknownEither(S.Array(pullOutColumn))([{ column1: \"1\", column2: 100 }, { column1: \"2\", column2: 300 }]))\n * // Output: { _id: 'Either', _tag: 'Right', right: [ 1, 2 ] }\n *\n * @category struct transformations\n * @since 1.0.0\n */\nconst pluck = /*#__PURE__*/(0,effect_Function__WEBPACK_IMPORTED_MODULE_11__.dual)(2, (schema, key) => {\n  const ps = _AST_js__WEBPACK_IMPORTED_MODULE_0__.getPropertyKeyIndexedAccess(_AST_js__WEBPACK_IMPORTED_MODULE_0__.typeAST(schema.ast), key);\n  const value = make(ps.isOptional ? _AST_js__WEBPACK_IMPORTED_MODULE_0__.orUndefined(ps.type) : ps.type);\n  return transform(schema.pipe(pick(key)), value, {\n    decode: a => a[key],\n    encode: ak => ps.isOptional && ak === undefined ? {} : {\n      [key]: ak\n    }\n  });\n});\nconst makeBrandSchema = (self, annotations) => {\n  const ast = _AST_js__WEBPACK_IMPORTED_MODULE_0__.annotations(self, toASTAnnotations(annotations));\n  const schema = make(ast);\n  const validateEither_ = validateEither(schema);\n  //     v-- function\n  const out = effect_Brand__WEBPACK_IMPORTED_MODULE_13__.refined(unbranded => effect_Either__WEBPACK_IMPORTED_MODULE_6__.match(validateEither_(unbranded), {\n    onLeft: e => effect_Option__WEBPACK_IMPORTED_MODULE_10__.some(effect_Brand__WEBPACK_IMPORTED_MODULE_13__.error(_TreeFormatter_js__WEBPACK_IMPORTED_MODULE_14__.formatErrorSync(e), e)),\n    onRight: () => effect_Option__WEBPACK_IMPORTED_MODULE_10__.none()\n  }));\n  // ----------------\n  // Schema interface\n  // ----------------\n  Object.setPrototypeOf(Object.assign(out, schema, {\n    annotations: a => makeBrandSchema(ast, a)\n  }), Object.getPrototypeOf(schema));\n  return out;\n};\n/**\n * @category branding\n * @since 1.0.0\n */\nconst asBrandSchema = schema => schema;\n/**\n * Returns a nominal branded schema by applying a brand to a given schema.\n *\n * ```\n * Schema<A> + B -> Schema<A & Brand<B>>\n * ```\n *\n * @param self - The input schema to be combined with the brand.\n * @param brand - The brand to apply.\n *\n * @example\n * import * as Schema from \"@effect/schema/Schema\"\n *\n * const Int = Schema.Number.pipe(Schema.int(), Schema.brand(\"Int\"))\n * type Int = Schema.Schema.Type<typeof Int> // number & Brand<\"Int\">\n *\n * @category branding\n * @since 1.0.0\n */\nconst brand = (brand, annotations) => self => {\n  const brandAnnotation = effect_Option__WEBPACK_IMPORTED_MODULE_10__.match(_AST_js__WEBPACK_IMPORTED_MODULE_0__.getBrandAnnotation(self.ast), {\n    onNone: () => [brand],\n    onSome: brands => [...brands, brand]\n  });\n  return makeBrandSchema(self.ast, {\n    // add a default title annotation containing the brand\n    title: String(self.ast) + ` & Brand<${_internal_util_js__WEBPACK_IMPORTED_MODULE_12__.formatUnknown(brand)}>`,\n    ...annotations,\n    [_AST_js__WEBPACK_IMPORTED_MODULE_0__.BrandAnnotationId]: brandAnnotation\n  });\n};\n/**\n * @category combinators\n * @since 1.0.0\n */\nconst partial = /*#__PURE__*/(0,effect_Function__WEBPACK_IMPORTED_MODULE_11__.dual)(args => isSchema(args[0]), (self, options) => make(_AST_js__WEBPACK_IMPORTED_MODULE_0__.partial(self.ast, options)));\n/**\n * @category combinators\n * @since 1.0.0\n */\nconst required = self => make(_AST_js__WEBPACK_IMPORTED_MODULE_0__.required(self.ast));\n/**\n * Creates a new schema with shallow mutability applied to its properties.\n *\n * @param schema - The original schema to make properties mutable (shallowly).\n *\n * @category combinators\n * @since 1.0.0\n */\nconst mutable = schema => make(_AST_js__WEBPACK_IMPORTED_MODULE_0__.mutable(schema.ast));\nconst getExtendErrorMessage = (x, y, path) => _internal_errors_js__WEBPACK_IMPORTED_MODULE_15__.getAPIErrorMessage(\"Extend\", `cannot extend \\`${x}\\` with \\`${y}\\` (path [${path?.join(\", \")}])`);\nconst intersectTypeLiterals = (x, y, path) => {\n  if (_AST_js__WEBPACK_IMPORTED_MODULE_0__.isTypeLiteral(x) && _AST_js__WEBPACK_IMPORTED_MODULE_0__.isTypeLiteral(y)) {\n    const propertySignatures = [...x.propertySignatures];\n    for (const ps of y.propertySignatures) {\n      const name = ps.name;\n      const i = propertySignatures.findIndex(ps => ps.name === name);\n      if (i === -1) {\n        propertySignatures.push(ps);\n      } else {\n        const {\n          isOptional,\n          type\n        } = propertySignatures[i];\n        path = [...path, _internal_util_js__WEBPACK_IMPORTED_MODULE_12__.formatUnknown(name)];\n        propertySignatures[i] = new _AST_js__WEBPACK_IMPORTED_MODULE_0__.PropertySignature(name, extendAST(type, ps.type, path), isOptional, true);\n      }\n    }\n    return new _AST_js__WEBPACK_IMPORTED_MODULE_0__.TypeLiteral(propertySignatures, x.indexSignatures.concat(y.indexSignatures));\n  }\n  throw new Error(getExtendErrorMessage(x, y, path));\n};\nconst extendAST = (x, y, path) => _AST_js__WEBPACK_IMPORTED_MODULE_0__.Union.make(intersectUnionMembers([x], [y], path));\nconst intersectUnionMembers = (xs, ys, path) => effect_Array__WEBPACK_IMPORTED_MODULE_9__.flatMap(xs, x => effect_Array__WEBPACK_IMPORTED_MODULE_9__.flatMap(ys, y => {\n  if (_AST_js__WEBPACK_IMPORTED_MODULE_0__.isUnion(x)) {\n    return intersectUnionMembers(x.types, _AST_js__WEBPACK_IMPORTED_MODULE_0__.isUnion(y) ? y.types : [y], path);\n  } else if (_AST_js__WEBPACK_IMPORTED_MODULE_0__.isUnion(y)) {\n    return intersectUnionMembers([x], y.types, path);\n  }\n  if (_AST_js__WEBPACK_IMPORTED_MODULE_0__.isTypeLiteral(x)) {\n    if (_AST_js__WEBPACK_IMPORTED_MODULE_0__.isTypeLiteral(y)) {\n      return [intersectTypeLiterals(x, y, path)];\n    } else if (_AST_js__WEBPACK_IMPORTED_MODULE_0__.isTransformation(y) && _AST_js__WEBPACK_IMPORTED_MODULE_0__.isTypeLiteralTransformation(y.transformation)) {\n      return [new _AST_js__WEBPACK_IMPORTED_MODULE_0__.Transformation(intersectTypeLiterals(x, y.from, path), intersectTypeLiterals(_AST_js__WEBPACK_IMPORTED_MODULE_0__.typeAST(x), y.to, path), new _AST_js__WEBPACK_IMPORTED_MODULE_0__.TypeLiteralTransformation(y.transformation.propertySignatureTransformations))];\n    }\n  } else if (_AST_js__WEBPACK_IMPORTED_MODULE_0__.isTransformation(x) && _AST_js__WEBPACK_IMPORTED_MODULE_0__.isTypeLiteralTransformation(x.transformation)) {\n    if (_AST_js__WEBPACK_IMPORTED_MODULE_0__.isTypeLiteral(y)) {\n      return [new _AST_js__WEBPACK_IMPORTED_MODULE_0__.Transformation(intersectTypeLiterals(x.from, y, path), intersectTypeLiterals(x.to, _AST_js__WEBPACK_IMPORTED_MODULE_0__.typeAST(y), path), new _AST_js__WEBPACK_IMPORTED_MODULE_0__.TypeLiteralTransformation(x.transformation.propertySignatureTransformations))];\n    } else if (_AST_js__WEBPACK_IMPORTED_MODULE_0__.isTransformation(y) && _AST_js__WEBPACK_IMPORTED_MODULE_0__.isTypeLiteralTransformation(y.transformation)) {\n      return [new _AST_js__WEBPACK_IMPORTED_MODULE_0__.Transformation(intersectTypeLiterals(x.from, y.from, path), intersectTypeLiterals(x.to, y.to, path), new _AST_js__WEBPACK_IMPORTED_MODULE_0__.TypeLiteralTransformation(x.transformation.propertySignatureTransformations.concat(y.transformation.propertySignatureTransformations)))];\n    }\n  }\n  throw new Error(getExtendErrorMessage(x, y, path));\n}));\n/**\n * @category combinators\n * @since 1.0.0\n */\nconst extend = /*#__PURE__*/(0,effect_Function__WEBPACK_IMPORTED_MODULE_11__.dual)(2, (self, that) => make(extendAST(self.ast, that.ast, [])));\n/**\n * @category combinators\n * @since 1.0.0\n */\nconst compose = /*#__PURE__*/(0,effect_Function__WEBPACK_IMPORTED_MODULE_11__.dual)(args => isSchema(args[1]), (from, to) => make(_AST_js__WEBPACK_IMPORTED_MODULE_0__.compose(from.ast, to.ast)));\n/**\n * @category constructors\n * @since 1.0.0\n */\nconst suspend = f => make(new _AST_js__WEBPACK_IMPORTED_MODULE_0__.Suspend(() => f().ast));\nfunction filter(predicate, annotations) {\n  return self => make(new _AST_js__WEBPACK_IMPORTED_MODULE_0__.Refinement(self.ast, (a, options, ast) => {\n    const out = predicate(a, options, ast);\n    if (effect_Predicate__WEBPACK_IMPORTED_MODULE_8__.isBoolean(out)) {\n      return out ? effect_Option__WEBPACK_IMPORTED_MODULE_10__.none() : effect_Option__WEBPACK_IMPORTED_MODULE_10__.some(new _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.Type(ast, a));\n    }\n    return out;\n  }, toASTAnnotations(annotations)));\n}\nclass transformOrFailImpl extends SchemaImpl {\n  from;\n  to;\n  constructor(from, to, ast) {\n    super(ast);\n    this.from = from;\n    this.to = to;\n  }\n  annotations(annotations) {\n    return new transformOrFailImpl(this.from, this.to, _AST_js__WEBPACK_IMPORTED_MODULE_0__.annotations(this.ast, toASTAnnotations(annotations)));\n  }\n}\n/**\n * Create a new `Schema` by transforming the input and output of an existing `Schema`\n * using the provided decoding functions.\n *\n * @category combinators\n * @since 1.0.0\n */\nconst transformOrFail = /*#__PURE__*/(0,effect_Function__WEBPACK_IMPORTED_MODULE_11__.dual)(args => isSchema(args[0]) && isSchema(args[1]), (from, to, options) => new transformOrFailImpl(from, to, new _AST_js__WEBPACK_IMPORTED_MODULE_0__.Transformation(from.ast, to.ast, new _AST_js__WEBPACK_IMPORTED_MODULE_0__.FinalTransformation(options.decode, options.encode))));\n/**\n * Create a new `Schema` by transforming the input and output of an existing `Schema`\n * using the provided mapping functions.\n *\n * @category combinators\n * @since 1.0.0\n */\nconst transform = /*#__PURE__*/(0,effect_Function__WEBPACK_IMPORTED_MODULE_11__.dual)(args => isSchema(args[0]) && isSchema(args[1]), (from, to, options) => transformOrFail(from, to, {\n  decode: fromA => _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.succeed(options.decode(fromA)),\n  encode: toI => _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.succeed(options.encode(toI))\n}));\n/**\n * Creates a new `Schema` which transforms literal values.\n *\n * @example\n * import * as S from \"@effect/schema/Schema\"\n *\n * const schema = S.transformLiteral(0, \"a\")\n *\n * assert.deepStrictEqual(S.decodeSync(schema)(0), \"a\")\n *\n * @category constructors\n * @since 1.0.0\n */\nconst transformLiteral = (from, to) => transform(Literal(from), Literal(to), {\n  decode: () => to,\n  encode: () => from\n});\nfunction transformLiterals(...pairs) {\n  return Union(...pairs.map(([from, to]) => transformLiteral(from, to)));\n}\n/**\n * Attaches a property signature with the specified key and value to the schema.\n * This API is useful when you want to add a property to your schema which doesn't describe the shape of the input,\n * but rather maps to another schema, for example when you want to add a discriminant to a simple union.\n *\n * @param self - The input schema.\n * @param key - The name of the property to add to the schema.\n * @param value - The value of the property to add to the schema.\n *\n * @example\n * import * as S from \"@effect/schema/Schema\"\n * import { pipe } from \"effect/Function\"\n *\n * const Circle = S.Struct({ radius: S.Number })\n * const Square = S.Struct({ sideLength: S.Number })\n * const Shape = S.Union(\n *   Circle.pipe(S.attachPropertySignature(\"kind\", \"circle\")),\n *   Square.pipe(S.attachPropertySignature(\"kind\", \"square\"))\n * )\n *\n * assert.deepStrictEqual(S.decodeSync(Shape)({ radius: 10 }), {\n *   kind: \"circle\",\n *   radius: 10\n * })\n *\n * @category combinators\n * @since 1.0.0\n */\nconst attachPropertySignature = /*#__PURE__*/(0,effect_Function__WEBPACK_IMPORTED_MODULE_11__.dual)(args => isSchema(args[0]), (schema, key, value, annotations) => {\n  const attached = extend(typeSchema(schema), Struct({\n    [key]: effect_Predicate__WEBPACK_IMPORTED_MODULE_8__.isSymbol(value) ? UniqueSymbolFromSelf(value) : Literal(value)\n  })).ast;\n  return make(new _AST_js__WEBPACK_IMPORTED_MODULE_0__.Transformation(schema.ast, annotations ? _AST_js__WEBPACK_IMPORTED_MODULE_0__.annotations(attached, toASTAnnotations(annotations)) : attached, new _AST_js__WEBPACK_IMPORTED_MODULE_0__.TypeLiteralTransformation([new _AST_js__WEBPACK_IMPORTED_MODULE_0__.PropertySignatureTransformation(key, key, () => effect_Option__WEBPACK_IMPORTED_MODULE_10__.some(value), () => effect_Option__WEBPACK_IMPORTED_MODULE_10__.none())])));\n});\n/**\n * @category annotations\n * @since 1.0.0\n */\nconst annotations = /*#__PURE__*/(0,effect_Function__WEBPACK_IMPORTED_MODULE_11__.dual)(2, (self, annotations) => self.annotations(annotations));\n/**\n * @category annotations\n * @since 1.0.0\n */\nconst message = message => self => self.annotations({\n  [_AST_js__WEBPACK_IMPORTED_MODULE_0__.MessageAnnotationId]: message\n});\n/**\n * @category annotations\n * @since 1.0.0\n */\nconst identifier = identifier => self => self.annotations({\n  [_AST_js__WEBPACK_IMPORTED_MODULE_0__.IdentifierAnnotationId]: identifier\n});\n/**\n * @category annotations\n * @since 1.0.0\n */\nconst title = title => self => self.annotations({\n  [_AST_js__WEBPACK_IMPORTED_MODULE_0__.TitleAnnotationId]: title\n});\n/**\n * @category annotations\n * @since 1.0.0\n */\nconst description = description => self => self.annotations({\n  [_AST_js__WEBPACK_IMPORTED_MODULE_0__.DescriptionAnnotationId]: description\n});\n/**\n * @category annotations\n * @since 1.0.0\n */\nconst examples = examples => self => self.annotations({\n  [_AST_js__WEBPACK_IMPORTED_MODULE_0__.ExamplesAnnotationId]: examples\n});\nconst $default = value => self => self.annotations({\n  [_AST_js__WEBPACK_IMPORTED_MODULE_0__.DefaultAnnotationId]: value\n});\n\n/**\n * @category annotations\n * @since 1.0.0\n */\nconst documentation = documentation => self => self.annotations({\n  [_AST_js__WEBPACK_IMPORTED_MODULE_0__.DocumentationAnnotationId]: documentation\n});\n/**\n * Attaches a JSON Schema annotation to a schema that represents a refinement.\n *\n * If the schema is composed of more than one refinement, the corresponding annotations will be merged.\n *\n * @category annotations\n * @since 1.0.0\n */\nconst jsonSchema = jsonSchema => self => self.annotations({\n  [_AST_js__WEBPACK_IMPORTED_MODULE_0__.JSONSchemaAnnotationId]: jsonSchema\n});\n/**\n * @category annotations\n * @since 1.0.0\n */\nconst equivalence = equivalence => self => self.annotations({\n  [_Equivalence_js__WEBPACK_IMPORTED_MODULE_3__.EquivalenceHookId]: () => equivalence\n});\n/**\n * @category annotations\n * @since 1.0.0\n */\nconst concurrency = concurrency => self => self.annotations({\n  [_AST_js__WEBPACK_IMPORTED_MODULE_0__.ConcurrencyAnnotationId]: concurrency\n});\n/**\n * @category annotations\n * @since 1.0.0\n */\nconst batching = batching => self => self.annotations({\n  [_AST_js__WEBPACK_IMPORTED_MODULE_0__.BatchingAnnotationId]: batching\n});\n/**\n * @category annotations\n * @since 1.0.0\n */\nconst parseIssueTitle = f => self => self.annotations({\n  [_AST_js__WEBPACK_IMPORTED_MODULE_0__.ParseIssueTitleAnnotationId]: f\n});\n/**\n * @category renaming\n * @since 1.0.0\n */\nconst rename = /*#__PURE__*/(0,effect_Function__WEBPACK_IMPORTED_MODULE_11__.dual)(2, (self, mapping) => {\n  return make(_AST_js__WEBPACK_IMPORTED_MODULE_0__.rename(self.ast, mapping));\n});\n/**\n * @category type id\n * @since 1.0.0\n */\nconst TrimmedTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/Trimmed\");\n/**\n * Verifies that a string contains no leading or trailing whitespaces.\n *\n * Note. This combinator does not make any transformations, it only validates.\n * If what you were looking for was a combinator to trim strings, then check out the `trim` combinator.\n *\n * @category string filters\n * @since 1.0.0\n */\nconst trimmed = annotations => self => self.pipe(filter(a => a === a.trim(), {\n  typeId: TrimmedTypeId,\n  description: \"a string with no leading or trailing whitespace\",\n  ...annotations\n}));\n/**\n * @category type id\n * @since 1.0.0\n */\nconst MaxLengthTypeId = _internal_filters_js__WEBPACK_IMPORTED_MODULE_16__.MaxLengthTypeId;\n/**\n * @category string filters\n * @since 1.0.0\n */\nconst maxLength = (maxLength, annotations) => self => self.pipe(filter(a => a.length <= maxLength, {\n  typeId: MaxLengthTypeId,\n  description: `a string at most ${maxLength} character(s) long`,\n  jsonSchema: {\n    maxLength\n  },\n  ...annotations\n}));\n/**\n * @category type id\n * @since 1.0.0\n */\nconst MinLengthTypeId = _internal_filters_js__WEBPACK_IMPORTED_MODULE_16__.MinLengthTypeId;\n/**\n * @category string filters\n * @since 1.0.0\n */\nconst minLength = (minLength, annotations) => self => self.pipe(filter(a => a.length >= minLength, {\n  typeId: MinLengthTypeId,\n  description: `a string at least ${minLength} character(s) long`,\n  jsonSchema: {\n    minLength\n  },\n  ...annotations\n}));\n/**\n * @category type id\n * @since 1.0.0\n */\nconst PatternTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/Pattern\");\n/**\n * @category string filters\n * @since 1.0.0\n */\nconst pattern = (regex, annotations) => self => {\n  const pattern = regex.source;\n  return self.pipe(filter(a => {\n    // The following line ensures that `lastIndex` is reset to `0` in case the user has specified the `g` flag\n    regex.lastIndex = 0;\n    return regex.test(a);\n  }, {\n    typeId: {\n      id: PatternTypeId,\n      annotation: {\n        regex\n      }\n    },\n    description: `a string matching the pattern ${pattern}`,\n    jsonSchema: {\n      pattern\n    },\n    arbitrary: () => fc => fc.stringMatching(regex),\n    ...annotations\n  }));\n};\n/**\n * @category type id\n * @since 1.0.0\n */\nconst StartsWithTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/StartsWith\");\n/**\n * @category string filters\n * @since 1.0.0\n */\nconst startsWith = (startsWith, annotations) => self => self.pipe(filter(a => a.startsWith(startsWith), {\n  typeId: {\n    id: StartsWithTypeId,\n    annotation: {\n      startsWith\n    }\n  },\n  description: `a string starting with ${JSON.stringify(startsWith)}`,\n  jsonSchema: {\n    pattern: `^${startsWith}`\n  },\n  ...annotations\n}));\n/**\n * @category type id\n * @since 1.0.0\n */\nconst EndsWithTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/EndsWith\");\n/**\n * @category string filters\n * @since 1.0.0\n */\nconst endsWith = (endsWith, annotations) => self => self.pipe(filter(a => a.endsWith(endsWith), {\n  typeId: {\n    id: EndsWithTypeId,\n    annotation: {\n      endsWith\n    }\n  },\n  description: `a string ending with ${JSON.stringify(endsWith)}`,\n  jsonSchema: {\n    pattern: `^.*${endsWith}$`\n  },\n  ...annotations\n}));\n/**\n * @category type id\n * @since 1.0.0\n */\nconst IncludesTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/Includes\");\n/**\n * @category string filters\n * @since 1.0.0\n */\nconst includes = (searchString, annotations) => self => self.pipe(filter(a => a.includes(searchString), {\n  typeId: {\n    id: IncludesTypeId,\n    annotation: {\n      includes: searchString\n    }\n  },\n  description: `a string including ${JSON.stringify(searchString)}`,\n  jsonSchema: {\n    pattern: `.*${searchString}.*`\n  },\n  ...annotations\n}));\n/**\n * @category type id\n * @since 1.0.0\n */\nconst LowercasedTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/Lowercased\");\n/**\n * Verifies that a string is lowercased.\n *\n * @category string filters\n * @since 1.0.0\n */\nconst lowercased = annotations => self => self.pipe(filter(a => a === a.toLowerCase(), {\n  typeId: LowercasedTypeId,\n  description: \"a lowercase string\",\n  ...annotations\n}));\n/**\n * @category string constructors\n * @since 1.0.0\n */\nconst Lowercased = /*#__PURE__*/$String.pipe( /*#__PURE__*/lowercased({\n  identifier: \"Lowercased\",\n  title: \"Lowercased\"\n}));\n/**\n * @category type id\n * @since 1.0.0\n */\nconst UppercasedTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/Uppercased\");\n/**\n * Verifies that a string is uppercased.\n *\n * @category string filters\n * @since 1.0.0\n */\nconst uppercased = annotations => self => self.pipe(filter(a => a === a.toUpperCase(), {\n  typeId: UppercasedTypeId,\n  description: \"an uppercase string\",\n  ...annotations\n}));\n/**\n * @category string constructors\n * @since 1.0.0\n */\nconst Uppercased = /*#__PURE__*/$String.pipe( /*#__PURE__*/uppercased({\n  identifier: \"Uppercased\",\n  title: \"Uppercased\"\n}));\n/**\n * @category type id\n * @since 1.0.0\n */\nconst LengthTypeId = _internal_filters_js__WEBPACK_IMPORTED_MODULE_16__.LengthTypeId;\n/**\n * @category string filters\n * @since 1.0.0\n */\nconst length = (length, annotations) => self => {\n  const minLength = effect_Predicate__WEBPACK_IMPORTED_MODULE_8__.isObject(length) ? Math.max(0, Math.floor(length.min)) : Math.max(0, Math.floor(length));\n  const maxLength = effect_Predicate__WEBPACK_IMPORTED_MODULE_8__.isObject(length) ? Math.max(minLength, Math.floor(length.max)) : minLength;\n  if (minLength !== maxLength) {\n    return self.pipe(filter(a => a.length >= minLength && a.length <= maxLength, {\n      typeId: LengthTypeId,\n      description: `a string at least ${minLength} character(s) and at most ${maxLength} character(s) long`,\n      jsonSchema: {\n        minLength,\n        maxLength\n      },\n      ...annotations\n    }));\n  }\n  return self.pipe(filter(a => a.length === minLength, {\n    typeId: LengthTypeId,\n    description: minLength === 1 ? `a single character` : `a string ${minLength} character(s) long`,\n    jsonSchema: {\n      minLength,\n      maxLength: minLength\n    },\n    ...annotations\n  }));\n};\n/**\n * A schema representing a single character.\n *\n * @category string constructors\n * @since 1.0.0\n */\nconst Char = /*#__PURE__*/$String.pipe( /*#__PURE__*/length(1, {\n  identifier: \"Char\"\n}));\n/**\n * @category string filters\n * @since 1.0.0\n */\nconst nonEmpty = annotations => minLength(1, {\n  description: \"a non empty string\",\n  ...annotations\n});\n/**\n * This schema converts a string to lowercase.\n *\n * @category string transformations\n * @since 1.0.0\n */\nconst Lowercase = /*#__PURE__*/transform($String, Lowercased, {\n  decode: s => s.toLowerCase(),\n  encode: effect_Function__WEBPACK_IMPORTED_MODULE_11__.identity\n}).annotations({\n  identifier: \"Lowercase\"\n});\n/**\n * This schema converts a string to uppercase.\n *\n * @category string transformations\n * @since 1.0.0\n */\nconst Uppercase = /*#__PURE__*/transform($String, Uppercased, {\n  decode: s => s.toUpperCase(),\n  encode: effect_Function__WEBPACK_IMPORTED_MODULE_11__.identity\n}).annotations({\n  identifier: \"Uppercase\"\n});\n/**\n * @category string constructors\n * @since 1.0.0\n */\nconst Trimmed = /*#__PURE__*/$String.pipe( /*#__PURE__*/trimmed({\n  identifier: \"Trimmed\",\n  title: \"Trimmed\"\n}));\n/**\n * This schema allows removing whitespaces from the beginning and end of a string.\n *\n * @category string transformations\n * @since 1.0.0\n */\nconst Trim = /*#__PURE__*/transform($String, Trimmed, {\n  decode: s => s.trim(),\n  encode: effect_Function__WEBPACK_IMPORTED_MODULE_11__.identity\n}).annotations({\n  identifier: \"Trim\"\n});\n/**\n * Returns a schema that allows splitting a string into an array of strings.\n *\n * @category string transformations\n * @since 1.0.0\n */\nconst split = separator => transform($String, $Array($String), {\n  decode: effect_String__WEBPACK_IMPORTED_MODULE_17__.split(separator),\n  encode: effect_Array__WEBPACK_IMPORTED_MODULE_9__.join(separator)\n});\nconst JsonString = /*#__PURE__*/$String.annotations({\n  [_AST_js__WEBPACK_IMPORTED_MODULE_0__.IdentifierAnnotationId]: \"JsonString\",\n  [_AST_js__WEBPACK_IMPORTED_MODULE_0__.TitleAnnotationId]: \"JsonString\",\n  [_AST_js__WEBPACK_IMPORTED_MODULE_0__.DescriptionAnnotationId]: \"a JSON string\"\n});\n/**\n * The `ParseJson` combinator provides a method to convert JSON strings into the `unknown` type using the underlying\n * functionality of `JSON.parse`. It also utilizes `JSON.stringify` for encoding.\n *\n * You can optionally provide a `ParseJsonOptions` to configure both `JSON.parse` and `JSON.stringify` executions.\n *\n * Optionally, you can pass a schema `Schema<A, I, R>` to obtain an `A` type instead of `unknown`.\n *\n * @example\n * import * as S from \"@effect/schema/Schema\"\n *\n * assert.deepStrictEqual(S.decodeUnknownSync(S.parseJson())(`{\"a\":\"1\"}`), { a: \"1\" })\n * assert.deepStrictEqual(S.decodeUnknownSync(S.parseJson(S.Struct({ a: S.NumberFromString })))(`{\"a\":\"1\"}`), { a: 1 })\n *\n * @category string transformations\n * @since 1.0.0\n */\nconst parseJson = (schema, o) => {\n  if (isSchema(schema)) {\n    return compose(parseJson(o), schema);\n  }\n  const options = schema;\n  return transformOrFail(JsonString, Unknown, {\n    decode: (s, _, ast) => _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__[\"try\"]({\n      try: () => JSON.parse(s, options?.reviver),\n      catch: e => new _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.Type(ast, s, e.message)\n    }),\n    encode: (u, _, ast) => _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__[\"try\"]({\n      try: () => JSON.stringify(u, options?.replacer, options?.space),\n      catch: e => new _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.Type(ast, u, e.message)\n    })\n  });\n};\n/**\n * @category string constructors\n * @since 1.0.0\n */\nconst NonEmpty = /*#__PURE__*/$String.pipe( /*#__PURE__*/nonEmpty({\n  identifier: \"NonEmpty\",\n  title: \"NonEmpty\"\n}));\n/**\n * @category type id\n * @since 1.0.0\n */\nconst UUIDTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/UUID\");\nconst uuidRegex = /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/i;\n/**\n * Represents a Universally Unique Identifier (UUID).\n *\n * This schema ensures that the provided string adheres to the standard UUID format.\n *\n * @category string constructors\n * @since 1.0.0\n */\nconst UUID = /*#__PURE__*/$String.pipe( /*#__PURE__*/pattern(uuidRegex, {\n  typeId: UUIDTypeId,\n  identifier: \"UUID\",\n  title: \"UUID\",\n  description: \"a Universally Unique Identifier\",\n  arbitrary: () => fc => fc.uuid()\n}));\n/**\n * @category type id\n * @since 1.0.0\n */\nconst ULIDTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/ULID\");\nconst ulidRegex = /^[0-7][0-9A-HJKMNP-TV-Z]{25}$/i;\n/**\n * Represents a Universally Unique Lexicographically Sortable Identifier (ULID).\n *\n * ULIDs are designed to be compact, URL-safe, and ordered, making them suitable for use as identifiers.\n * This schema ensures that the provided string adheres to the standard ULID format.\n *\n * @category string constructors\n * @since 1.0.0\n */\nconst ULID = /*#__PURE__*/$String.pipe( /*#__PURE__*/pattern(ulidRegex, {\n  typeId: ULIDTypeId,\n  identifier: \"ULID\",\n  title: \"ULID\",\n  description: \"a Universally Unique Lexicographically Sortable Identifier\",\n  arbitrary: () => fc => fc.ulid()\n}));\n/**\n * @category type id\n * @since 1.0.0\n */\nconst FiniteTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/Finite\");\n/**\n * Ensures that the provided value is a finite number.\n *\n * This schema filters out non-finite numeric values, allowing only finite numbers to pass through.\n *\n * @category number filters\n * @since 1.0.0\n */\nconst finite = annotations => self => self.pipe(filter(a => Number.isFinite(a), {\n  typeId: FiniteTypeId,\n  description: \"a finite number\",\n  ...annotations\n}));\n/**\n * @category type id\n * @since 1.0.0\n */\nconst GreaterThanTypeId = _internal_filters_js__WEBPACK_IMPORTED_MODULE_16__.GreaterThanTypeId;\n/**\n * This filter checks whether the provided number is greater than the specified minimum.\n *\n * @category number filters\n * @since 1.0.0\n */\nconst greaterThan = (min, annotations) => self => self.pipe(filter(a => a > min, {\n  typeId: GreaterThanTypeId,\n  description: min === 0 ? \"a positive number\" : `a number greater than ${min}`,\n  jsonSchema: {\n    exclusiveMinimum: min\n  },\n  ...annotations\n}));\n/**\n * @category type id\n * @since 1.0.0\n */\nconst GreaterThanOrEqualToTypeId = _internal_filters_js__WEBPACK_IMPORTED_MODULE_16__.GreaterThanOrEqualToTypeId;\n/**\n * This filter checks whether the provided number is greater than or equal to the specified minimum.\n *\n * @category number filters\n * @since 1.0.0\n */\nconst greaterThanOrEqualTo = (min, annotations) => self => self.pipe(filter(a => a >= min, {\n  typeId: GreaterThanOrEqualToTypeId,\n  description: min === 0 ? \"a non-negative number\" : `a number greater than or equal to ${min}`,\n  jsonSchema: {\n    minimum: min\n  },\n  ...annotations\n}));\n/**\n * @category type id\n * @since 1.0.0\n */\nconst MultipleOfTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/MultipleOf\");\n/**\n * @category number filters\n * @since 1.0.0\n */\nconst multipleOf = (divisor, annotations) => self => self.pipe(filter(a => effect_Number__WEBPACK_IMPORTED_MODULE_18__.remainder(a, divisor) === 0, {\n  typeId: MultipleOfTypeId,\n  description: `a number divisible by ${divisor}`,\n  jsonSchema: {\n    multipleOf: Math.abs(divisor)\n  },\n  // spec requires positive divisor\n  ...annotations\n}));\n/**\n * @category type id\n * @since 1.0.0\n */\nconst IntTypeId = _internal_filters_js__WEBPACK_IMPORTED_MODULE_16__.IntTypeId;\n/**\n * @category number filters\n * @since 1.0.0\n */\nconst int = annotations => self => self.pipe(filter(a => Number.isSafeInteger(a), {\n  typeId: IntTypeId,\n  title: \"integer\",\n  description: \"an integer\",\n  jsonSchema: {\n    type: \"integer\"\n  },\n  ...annotations\n}));\n/**\n * @category type id\n * @since 1.0.0\n */\nconst LessThanTypeId = _internal_filters_js__WEBPACK_IMPORTED_MODULE_16__.LessThanTypeId;\n/**\n * This filter checks whether the provided number is less than the specified maximum.\n *\n * @category number filters\n * @since 1.0.0\n */\nconst lessThan = (max, annotations) => self => self.pipe(filter(a => a < max, {\n  typeId: LessThanTypeId,\n  description: max === 0 ? \"a negative number\" : `a number less than ${max}`,\n  jsonSchema: {\n    exclusiveMaximum: max\n  },\n  ...annotations\n}));\n/**\n * @category type id\n * @since 1.0.0\n */\nconst LessThanOrEqualToTypeId = _internal_filters_js__WEBPACK_IMPORTED_MODULE_16__.LessThanOrEqualToTypeId;\n/**\n * This schema checks whether the provided number is less than or equal to the specified maximum.\n *\n * @category number filters\n * @since 1.0.0\n */\nconst lessThanOrEqualTo = (max, annotations) => self => self.pipe(filter(a => a <= max, {\n  typeId: LessThanOrEqualToTypeId,\n  description: max === 0 ? \"a non-positive number\" : `a number less than or equal to ${max}`,\n  jsonSchema: {\n    maximum: max\n  },\n  ...annotations\n}));\n/**\n * @category type id\n * @since 1.0.0\n */\nconst BetweenTypeId = _internal_filters_js__WEBPACK_IMPORTED_MODULE_16__.BetweenTypeId;\n/**\n * This filter checks whether the provided number falls within the specified minimum and maximum values.\n *\n * @category number filters\n * @since 1.0.0\n */\nconst between = (min, max, annotations) => self => self.pipe(filter(a => a >= min && a <= max, {\n  typeId: BetweenTypeId,\n  description: `a number between ${min} and ${max}`,\n  jsonSchema: {\n    maximum: max,\n    minimum: min\n  },\n  ...annotations\n}));\n/**\n * @category type id\n * @since 1.0.0\n */\nconst NonNaNTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/NonNaN\");\n/**\n * @category number filters\n * @since 1.0.0\n */\nconst nonNaN = annotations => self => self.pipe(filter(a => !Number.isNaN(a), {\n  typeId: NonNaNTypeId,\n  description: \"a number excluding NaN\",\n  ...annotations\n}));\n/**\n * @category number filters\n * @since 1.0.0\n */\nconst positive = annotations => greaterThan(0, annotations);\n/**\n * @category number filters\n * @since 1.0.0\n */\nconst negative = annotations => lessThan(0, annotations);\n/**\n * @category number filters\n * @since 1.0.0\n */\nconst nonPositive = annotations => lessThanOrEqualTo(0, annotations);\n/**\n * @category number filters\n * @since 1.0.0\n */\nconst nonNegative = annotations => greaterThanOrEqualTo(0, annotations);\n/**\n * Clamps a number between a minimum and a maximum value.\n *\n * @category number transformations\n * @since 1.0.0\n */\nconst clamp = (minimum, maximum) => self => transform(self, self.pipe(typeSchema, between(minimum, maximum)), {\n  strict: false,\n  decode: self => effect_Number__WEBPACK_IMPORTED_MODULE_18__.clamp(self, {\n    minimum,\n    maximum\n  }),\n  encode: effect_Function__WEBPACK_IMPORTED_MODULE_11__.identity\n});\n/**\n * This schema transforms a `string` into a `number` by parsing the string using the `Number` function.\n *\n * It returns an error if the value can't be converted (for example when non-numeric characters are provided).\n *\n * The following special string values are supported: \"NaN\", \"Infinity\", \"-Infinity\".\n *\n * @category number constructors\n * @since 1.0.0\n */\nconst NumberFromString = /*#__PURE__*/transformOrFail($String, $Number, {\n  decode: (s, _, ast) => _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.fromOption(effect_Number__WEBPACK_IMPORTED_MODULE_18__.parse(s), () => new _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.Type(ast, s)),\n  encode: n => _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.succeed(String(n))\n}).annotations({\n  identifier: \"NumberFromString\"\n});\n/**\n * @category number constructors\n * @since 1.0.0\n */\nconst Finite = /*#__PURE__*/$Number.pipe( /*#__PURE__*/finite({\n  identifier: \"Finite\",\n  title: \"Finite\"\n}));\n/**\n * @category number constructors\n * @since 1.0.0\n */\nconst Int = /*#__PURE__*/$Number.pipe( /*#__PURE__*/int({\n  identifier: \"Int\",\n  title: \"Int\"\n}));\n/**\n * @category number constructors\n * @since 1.0.0\n */\nconst NonNaN = /*#__PURE__*/$Number.pipe( /*#__PURE__*/nonNaN({\n  identifier: \"NonNaN\",\n  title: \"NonNaN\"\n}));\n/**\n * @category number constructors\n * @since 1.0.0\n */\nconst Positive = /*#__PURE__*/$Number.pipe( /*#__PURE__*/positive({\n  identifier: \"Positive\",\n  title: \"Positive\"\n}));\n/**\n * @category number constructors\n * @since 1.0.0\n */\nconst Negative = /*#__PURE__*/$Number.pipe( /*#__PURE__*/negative({\n  identifier: \"Negative\",\n  title: \"Negative\"\n}));\n/**\n * @category number constructors\n * @since 1.0.0\n */\nconst NonPositive = /*#__PURE__*/$Number.pipe( /*#__PURE__*/nonPositive({\n  identifier: \"NonPositive\",\n  title: \"NonPositive\"\n}));\n/**\n * @category number constructors\n * @since 1.0.0\n */\nconst NonNegative = /*#__PURE__*/$Number.pipe( /*#__PURE__*/nonNegative({\n  identifier: \"NonNegative\",\n  title: \"NonNegative\"\n}));\n/**\n * @category type id\n * @since 1.0.0\n */\nconst JsonNumberTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/JsonNumber\");\n/**\n * The `JsonNumber` is a schema for representing JSON numbers. It ensures that the provided value is a valid\n * number by filtering out `NaN` and `(+/-) Infinity`. This is useful when you want to validate and represent numbers in JSON\n * format.\n *\n * @example\n * import * as S from \"@effect/schema/Schema\"\n *\n * const is = S.is(S.JsonNumber)\n *\n * assert.deepStrictEqual(is(42), true)\n * assert.deepStrictEqual(is(Number.NaN), false)\n * assert.deepStrictEqual(is(Number.POSITIVE_INFINITY), false)\n * assert.deepStrictEqual(is(Number.NEGATIVE_INFINITY), false)\n *\n * @category number constructors\n * @since 1.0.0\n */\nconst JsonNumber = /*#__PURE__*/$Number.pipe( /*#__PURE__*/filter(n => !Number.isNaN(n) && Number.isFinite(n), {\n  typeId: JsonNumberTypeId,\n  identifier: \"JsonNumber\",\n  title: \"JSON-compatible number\",\n  description: \"a JSON-compatible number, excluding NaN, +Infinity, and -Infinity\",\n  jsonSchema: {\n    type: \"number\"\n  }\n}));\n/**\n * @category boolean transformations\n * @since 1.0.0\n */\nconst Not = /*#__PURE__*/transform($Boolean, $Boolean, {\n  decode: effect_Boolean__WEBPACK_IMPORTED_MODULE_19__.not,\n  encode: effect_Boolean__WEBPACK_IMPORTED_MODULE_19__.not\n});\nconst $Symbol = /*#__PURE__*/transform($String, SymbolFromSelf, {\n  strict: false,\n  decode: s => Symbol.for(s),\n  encode: sym => sym.description\n}).annotations({\n  identifier: \"symbol\"\n});\n\n/**\n * @category type id\n * @since 1.0.0\n */\nconst GreaterThanBigIntTypeId = _internal_filters_js__WEBPACK_IMPORTED_MODULE_16__.GreaterThanBigintTypeId;\n/**\n * @category bigint filters\n * @since 1.0.0\n */\nconst greaterThanBigInt = (min, annotations) => self => self.pipe(filter(a => a > min, {\n  typeId: {\n    id: GreaterThanBigIntTypeId,\n    annotation: {\n      min\n    }\n  },\n  description: min === 0n ? \"a positive bigint\" : `a bigint greater than ${min}n`,\n  ...annotations\n}));\n/**\n * @category type id\n * @since 1.0.0\n */\nconst GreaterThanOrEqualToBigIntTypeId = _internal_filters_js__WEBPACK_IMPORTED_MODULE_16__.GreaterThanOrEqualToBigIntTypeId;\n/**\n * @category bigint filters\n * @since 1.0.0\n */\nconst greaterThanOrEqualToBigInt = (min, annotations) => self => self.pipe(filter(a => a >= min, {\n  typeId: {\n    id: GreaterThanOrEqualToBigIntTypeId,\n    annotation: {\n      min\n    }\n  },\n  description: min === 0n ? \"a non-negative bigint\" : `a bigint greater than or equal to ${min}n`,\n  ...annotations\n}));\n/**\n * @category type id\n * @since 1.0.0\n */\nconst LessThanBigIntTypeId = _internal_filters_js__WEBPACK_IMPORTED_MODULE_16__.LessThanBigIntTypeId;\n/**\n * @category bigint filters\n * @since 1.0.0\n */\nconst lessThanBigInt = (max, annotations) => self => self.pipe(filter(a => a < max, {\n  typeId: {\n    id: LessThanBigIntTypeId,\n    annotation: {\n      max\n    }\n  },\n  description: max === 0n ? \"a negative bigint\" : `a bigint less than ${max}n`,\n  ...annotations\n}));\n/**\n * @category type id\n * @since 1.0.0\n */\nconst LessThanOrEqualToBigIntTypeId = _internal_filters_js__WEBPACK_IMPORTED_MODULE_16__.LessThanOrEqualToBigIntTypeId;\n/**\n * @category bigint filters\n * @since 1.0.0\n */\nconst lessThanOrEqualToBigInt = (max, annotations) => self => self.pipe(filter(a => a <= max, {\n  typeId: {\n    id: LessThanOrEqualToBigIntTypeId,\n    annotation: {\n      max\n    }\n  },\n  description: max === 0n ? \"a non-positive bigint\" : `a bigint less than or equal to ${max}n`,\n  ...annotations\n}));\n/**\n * @category type id\n * @since 1.0.0\n */\nconst BetweenBigIntTypeId = _internal_filters_js__WEBPACK_IMPORTED_MODULE_16__.BetweenBigintTypeId;\n/**\n * @category bigint filters\n * @since 1.0.0\n */\nconst betweenBigInt = (min, max, annotations) => self => self.pipe(filter(a => a >= min && a <= max, {\n  typeId: {\n    id: BetweenBigIntTypeId,\n    annotation: {\n      max,\n      min\n    }\n  },\n  description: `a bigint between ${min}n and ${max}n`,\n  ...annotations\n}));\n/**\n * @category bigint filters\n * @since 1.0.0\n */\nconst positiveBigInt = annotations => greaterThanBigInt(0n, annotations);\n/**\n * @category bigint filters\n * @since 1.0.0\n */\nconst negativeBigInt = annotations => lessThanBigInt(0n, annotations);\n/**\n * @category bigint filters\n * @since 1.0.0\n */\nconst nonNegativeBigInt = annotations => greaterThanOrEqualToBigInt(0n, annotations);\n/**\n * @category bigint filters\n * @since 1.0.0\n */\nconst nonPositiveBigInt = annotations => lessThanOrEqualToBigInt(0n, annotations);\n/**\n * Clamps a bigint between a minimum and a maximum value.\n *\n * @category bigint transformations\n * @since 1.0.0\n */\nconst clampBigInt = (minimum, maximum) => self => transform(self, self.pipe(typeSchema, betweenBigInt(minimum, maximum)), {\n  strict: false,\n  decode: self => effect_BigInt__WEBPACK_IMPORTED_MODULE_20__.clamp(self, {\n    minimum,\n    maximum\n  }),\n  encode: effect_Function__WEBPACK_IMPORTED_MODULE_11__.identity\n});\nconst bigint = /*#__PURE__*/transformOrFail($String, BigIntFromSelf, {\n  decode: (s, _, ast) => _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.fromOption(effect_BigInt__WEBPACK_IMPORTED_MODULE_20__.fromString(s), () => new _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.Type(ast, s)),\n  encode: n => _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.succeed(String(n))\n}).annotations({\n  identifier: \"bigint\"\n});\n\n/**\n * @category bigint constructors\n * @since 1.0.0\n */\nconst PositiveBigIntFromSelf = /*#__PURE__*/BigIntFromSelf.pipe( /*#__PURE__*/positiveBigInt({\n  identifier: \"PositiveBigintFromSelf\",\n  title: \"PositiveBigintFromSelf\"\n}));\n/**\n * @category bigint constructors\n * @since 1.0.0\n */\nconst PositiveBigInt = /*#__PURE__*/bigint.pipe( /*#__PURE__*/positiveBigInt({\n  identifier: \"PositiveBigint\",\n  title: \"PositiveBigint\"\n}));\n/**\n * @category bigint constructors\n * @since 1.0.0\n */\nconst NegativeBigIntFromSelf = /*#__PURE__*/BigIntFromSelf.pipe( /*#__PURE__*/negativeBigInt({\n  identifier: \"NegativeBigintFromSelf\",\n  title: \"NegativeBigintFromSelf\"\n}));\n/**\n * @category bigint constructors\n * @since 1.0.0\n */\nconst NegativeBigInt = /*#__PURE__*/bigint.pipe( /*#__PURE__*/negativeBigInt({\n  identifier: \"NegativeBigint\",\n  title: \"NegativeBigint\"\n}));\n/**\n * @category bigint constructors\n * @since 1.0.0\n */\nconst NonPositiveBigIntFromSelf = /*#__PURE__*/BigIntFromSelf.pipe( /*#__PURE__*/nonPositiveBigInt({\n  identifier: \"NonPositiveBigintFromSelf\",\n  title: \"NonPositiveBigintFromSelf\"\n}));\n/**\n * @category bigint constructors\n * @since 1.0.0\n */\nconst NonPositiveBigInt = /*#__PURE__*/bigint.pipe( /*#__PURE__*/nonPositiveBigInt({\n  identifier: \"NonPositiveBigint\",\n  title: \"NonPositiveBigint\"\n}));\n/**\n * @category bigint constructors\n * @since 1.0.0\n */\nconst NonNegativeBigIntFromSelf = /*#__PURE__*/BigIntFromSelf.pipe( /*#__PURE__*/nonNegativeBigInt({\n  identifier: \"NonNegativeBigintFromSelf\",\n  title: \"NonNegativeBigintFromSelf\"\n}));\n/**\n * @category bigint constructors\n * @since 1.0.0\n */\nconst NonNegativeBigInt = /*#__PURE__*/bigint.pipe( /*#__PURE__*/nonNegativeBigInt({\n  identifier: \"NonNegativeBigint\",\n  title: \"NonNegativeBigint\"\n}));\n/**\n * This schema transforms a `number` into a `bigint` by parsing the number using the `BigInt` function.\n *\n * It returns an error if the value can't be safely encoded as a `number` due to being out of range.\n *\n * @category bigint transformations\n * @since 1.0.0\n */\nconst BigIntFromNumber = /*#__PURE__*/transformOrFail($Number, BigIntFromSelf, {\n  decode: (n, _, ast) => _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.fromOption(effect_BigInt__WEBPACK_IMPORTED_MODULE_20__.fromNumber(n), () => new _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.Type(ast, n)),\n  encode: (b, _, ast) => _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.fromOption(effect_BigInt__WEBPACK_IMPORTED_MODULE_20__.toNumber(b), () => new _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.Type(ast, b))\n}).annotations({\n  identifier: \"BigintFromNumber\"\n});\n/**\n * @category Secret constructors\n * @since 1.0.0\n */\nconst SecretFromSelf = /*#__PURE__*/declare(effect_Secret__WEBPACK_IMPORTED_MODULE_21__.isSecret, {\n  identifier: \"SecretFromSelf\",\n  pretty: () => secret => String(secret),\n  arbitrary: () => fc => fc.string().map(_ => effect_Secret__WEBPACK_IMPORTED_MODULE_21__.fromString(_))\n});\n/**\n * A schema that transforms a `string` into a `Secret`.\n *\n * @category Secret transformations\n * @since 1.0.0\n */\nconst Secret = /*#__PURE__*/transform($String, SecretFromSelf, {\n  strict: false,\n  decode: str => effect_Secret__WEBPACK_IMPORTED_MODULE_21__.fromString(str),\n  encode: secret => effect_Secret__WEBPACK_IMPORTED_MODULE_21__.value(secret)\n}).annotations({\n  identifier: \"Secret\"\n});\n/**\n * @category Duration constructors\n * @since 1.0.0\n */\nconst DurationFromSelf = /*#__PURE__*/declare(effect_Duration__WEBPACK_IMPORTED_MODULE_22__.isDuration, {\n  identifier: \"DurationFromSelf\",\n  pretty: () => String,\n  arbitrary: () => fc => fc.oneof(fc.constant(effect_Duration__WEBPACK_IMPORTED_MODULE_22__.infinity), fc.bigUint().map(_ => effect_Duration__WEBPACK_IMPORTED_MODULE_22__.nanos(_)), fc.bigUint().map(_ => effect_Duration__WEBPACK_IMPORTED_MODULE_22__.micros(_)), fc.maxSafeNat().map(_ => effect_Duration__WEBPACK_IMPORTED_MODULE_22__.millis(_)), fc.maxSafeNat().map(_ => effect_Duration__WEBPACK_IMPORTED_MODULE_22__.seconds(_)), fc.maxSafeNat().map(_ => effect_Duration__WEBPACK_IMPORTED_MODULE_22__.minutes(_)), fc.maxSafeNat().map(_ => effect_Duration__WEBPACK_IMPORTED_MODULE_22__.hours(_)), fc.maxSafeNat().map(_ => effect_Duration__WEBPACK_IMPORTED_MODULE_22__.days(_)), fc.maxSafeNat().map(_ => effect_Duration__WEBPACK_IMPORTED_MODULE_22__.weeks(_))),\n  equivalence: () => effect_Duration__WEBPACK_IMPORTED_MODULE_22__.Equivalence\n});\n/**\n * A schema that transforms a `bigint` tuple into a `Duration`.\n * Treats the value as the number of nanoseconds.\n *\n * @category Duration transformations\n * @since 1.0.0\n */\nconst DurationFromNanos = /*#__PURE__*/transformOrFail(BigIntFromSelf, DurationFromSelf, {\n  decode: nanos => _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.succeed(effect_Duration__WEBPACK_IMPORTED_MODULE_22__.nanos(nanos)),\n  encode: (duration, _, ast) => effect_Option__WEBPACK_IMPORTED_MODULE_10__.match(effect_Duration__WEBPACK_IMPORTED_MODULE_22__.toNanos(duration), {\n    onNone: () => _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.fail(new _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.Type(ast, duration)),\n    onSome: val => _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.succeed(val)\n  })\n}).annotations({\n  identifier: \"DurationFromNanos\"\n});\n/**\n * A schema that transforms a `number` tuple into a `Duration`.\n * Treats the value as the number of milliseconds.\n *\n * @category Duration transformations\n * @since 1.0.0\n */\nconst DurationFromMillis = /*#__PURE__*/transform($Number, DurationFromSelf, {\n  decode: ms => effect_Duration__WEBPACK_IMPORTED_MODULE_22__.millis(ms),\n  encode: n => effect_Duration__WEBPACK_IMPORTED_MODULE_22__.toMillis(n)\n}).annotations({\n  identifier: \"DurationFromMillis\"\n});\nconst hrTime = /*#__PURE__*/Tuple( /*#__PURE__*/NonNegative.pipe( /*#__PURE__*/finite({\n  [_AST_js__WEBPACK_IMPORTED_MODULE_0__.TitleAnnotationId]: \"seconds\",\n  [_AST_js__WEBPACK_IMPORTED_MODULE_0__.DescriptionAnnotationId]: \"seconds\"\n})), /*#__PURE__*/NonNegative.pipe( /*#__PURE__*/finite({\n  [_AST_js__WEBPACK_IMPORTED_MODULE_0__.TitleAnnotationId]: \"nanos\",\n  [_AST_js__WEBPACK_IMPORTED_MODULE_0__.DescriptionAnnotationId]: \"nanos\"\n})));\n/**\n * A schema that transforms a `[number, number]` tuple into a `Duration`.\n *\n * @category Duration transformations\n * @since 1.0.0\n */\nconst Duration = /*#__PURE__*/transform(hrTime, DurationFromSelf, {\n  decode: ([seconds, nanos]) => effect_Duration__WEBPACK_IMPORTED_MODULE_22__.nanos(BigInt(seconds) * BigInt(1e9) + BigInt(nanos)),\n  encode: duration => effect_Duration__WEBPACK_IMPORTED_MODULE_22__.toHrTime(duration)\n}).annotations({\n  identifier: \"Duration\"\n});\n/**\n * Clamps a `Duration` between a minimum and a maximum value.\n *\n * @category Duration transformations\n * @since 1.0.0\n */\nconst clampDuration = (minimum, maximum) => self => transform(self, self.pipe(typeSchema, betweenDuration(minimum, maximum)), {\n  strict: false,\n  decode: self => effect_Duration__WEBPACK_IMPORTED_MODULE_22__.clamp(self, {\n    minimum,\n    maximum\n  }),\n  encode: effect_Function__WEBPACK_IMPORTED_MODULE_11__.identity\n});\n/**\n * @category type id\n * @since 1.0.0\n */\nconst LessThanDurationTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/LessThanDuration\");\n/**\n * @category Duration filters\n * @since 1.0.0\n */\nconst lessThanDuration = (max, annotations) => self => self.pipe(filter(a => effect_Duration__WEBPACK_IMPORTED_MODULE_22__.lessThan(a, max), {\n  typeId: {\n    id: LessThanDurationTypeId,\n    annotation: {\n      max\n    }\n  },\n  description: `a Duration less than ${effect_Duration__WEBPACK_IMPORTED_MODULE_22__.decode(max)}`,\n  ...annotations\n}));\n/**\n * @category type id\n * @since 1.0.0\n */\nconst LessThanOrEqualToDurationTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/LessThanOrEqualToDuration\");\n/**\n * @category Duration filters\n * @since 1.0.0\n */\nconst lessThanOrEqualToDuration = (max, annotations) => self => self.pipe(filter(a => effect_Duration__WEBPACK_IMPORTED_MODULE_22__.lessThanOrEqualTo(a, max), {\n  typeId: {\n    id: LessThanDurationTypeId,\n    annotation: {\n      max\n    }\n  },\n  description: `a Duration less than or equal to ${effect_Duration__WEBPACK_IMPORTED_MODULE_22__.decode(max)}`,\n  ...annotations\n}));\n/**\n * @category type id\n * @since 1.0.0\n */\nconst GreaterThanDurationTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/GreaterThanDuration\");\n/**\n * @category Duration filters\n * @since 1.0.0\n */\nconst greaterThanDuration = (min, annotations) => self => self.pipe(filter(a => effect_Duration__WEBPACK_IMPORTED_MODULE_22__.greaterThan(a, min), {\n  typeId: {\n    id: GreaterThanDurationTypeId,\n    annotation: {\n      min\n    }\n  },\n  description: `a Duration greater than ${effect_Duration__WEBPACK_IMPORTED_MODULE_22__.decode(min)}`,\n  ...annotations\n}));\n/**\n * @category type id\n * @since 1.0.0\n */\nconst GreaterThanOrEqualToDurationTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/GreaterThanOrEqualToDuration\");\n/**\n * @category Duration filters\n * @since 1.0.0\n */\nconst greaterThanOrEqualToDuration = (min, annotations) => self => self.pipe(filter(a => effect_Duration__WEBPACK_IMPORTED_MODULE_22__.greaterThanOrEqualTo(a, min), {\n  typeId: {\n    id: GreaterThanOrEqualToDurationTypeId,\n    annotation: {\n      min\n    }\n  },\n  description: `a Duration greater than or equal to ${effect_Duration__WEBPACK_IMPORTED_MODULE_22__.decode(min)}`,\n  ...annotations\n}));\n/**\n * @category type id\n * @since 1.0.0\n */\nconst BetweenDurationTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/BetweenDuration\");\n/**\n * @category Duration filters\n * @since 1.0.0\n */\nconst betweenDuration = (minimum, maximum, annotations) => self => self.pipe(filter(a => effect_Duration__WEBPACK_IMPORTED_MODULE_22__.between(a, {\n  minimum,\n  maximum\n}), {\n  typeId: {\n    id: BetweenDurationTypeId,\n    annotation: {\n      maximum,\n      minimum\n    }\n  },\n  description: `a Duration between ${effect_Duration__WEBPACK_IMPORTED_MODULE_22__.decode(minimum)} and ${effect_Duration__WEBPACK_IMPORTED_MODULE_22__.decode(maximum)}`,\n  ...annotations\n}));\n/**\n * @category Uint8Array constructors\n * @since 1.0.0\n */\nconst Uint8ArrayFromSelf = /*#__PURE__*/declare(effect_Predicate__WEBPACK_IMPORTED_MODULE_8__.isUint8Array, {\n  identifier: \"Uint8ArrayFromSelf\",\n  pretty: () => u8arr => `new Uint8Array(${JSON.stringify(Array.from(u8arr))})`,\n  arbitrary: () => fc => fc.uint8Array(),\n  equivalence: () => effect_Array__WEBPACK_IMPORTED_MODULE_9__.getEquivalence(effect_Equal__WEBPACK_IMPORTED_MODULE_23__.equals)\n});\nconst $Uint8Array = /*#__PURE__*/transform($Array($Number.pipe(between(0, 255, {\n  title: \"8-bit unsigned integer\",\n  description: \"a 8-bit unsigned integer\"\n}))).annotations({\n  description: \"an array of 8-bit unsigned integers\"\n}), Uint8ArrayFromSelf, {\n  decode: numbers => Uint8Array.from(numbers),\n  encode: uint8Array => Array.from(uint8Array)\n}).annotations({\n  identifier: \"Uint8Array\"\n});\n\nconst makeEncodingTransformation = (id, decode, encode) => transformOrFail($String, Uint8ArrayFromSelf, {\n  strict: false,\n  decode: (s, _, ast) => effect_Either__WEBPACK_IMPORTED_MODULE_6__.mapLeft(decode(s), decodeException => new _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.Type(ast, s, decodeException.message)),\n  encode: u => _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.succeed(encode(u))\n}).annotations({\n  identifier: id\n});\n/**\n * @category Encoding transformations\n * @since 1.0.0\n */\nconst Base64 = /*#__PURE__*/makeEncodingTransformation(\"Base64\", effect_Encoding__WEBPACK_IMPORTED_MODULE_24__.decodeBase64, effect_Encoding__WEBPACK_IMPORTED_MODULE_24__.encodeBase64);\n/**\n * @category Encoding transformations\n * @since 1.0.0\n */\nconst Base64Url = /*#__PURE__*/makeEncodingTransformation(\"Base64Url\", effect_Encoding__WEBPACK_IMPORTED_MODULE_24__.decodeBase64Url, effect_Encoding__WEBPACK_IMPORTED_MODULE_24__.encodeBase64Url);\n/**\n * @category Encoding transformations\n * @since 1.0.0\n */\nconst Hex = /*#__PURE__*/makeEncodingTransformation(\"Hex\", effect_Encoding__WEBPACK_IMPORTED_MODULE_24__.decodeHex, effect_Encoding__WEBPACK_IMPORTED_MODULE_24__.encodeHex);\n/**\n * @category type id\n * @since 1.0.0\n */\nconst MinItemsTypeId = _internal_filters_js__WEBPACK_IMPORTED_MODULE_16__.MinItemsTypeId;\n/**\n * @category ReadonlyArray filters\n * @since 1.0.0\n */\nconst minItems = (n, annotations) => self => self.pipe(filter(a => a.length >= n, {\n  typeId: MinItemsTypeId,\n  description: `an array of at least ${n} items`,\n  jsonSchema: {\n    minItems: n\n  },\n  ...annotations\n}));\n/**\n * @category type id\n * @since 1.0.0\n */\nconst MaxItemsTypeId = _internal_filters_js__WEBPACK_IMPORTED_MODULE_16__.MaxItemsTypeId;\n/**\n * @category ReadonlyArray filters\n * @since 1.0.0\n */\nconst maxItems = (n, annotations) => self => self.pipe(filter(a => a.length <= n, {\n  typeId: MaxItemsTypeId,\n  description: `an array of at most ${n} items`,\n  jsonSchema: {\n    maxItems: n\n  },\n  ...annotations\n}));\n/**\n * @category type id\n * @since 1.0.0\n */\nconst ItemsCountTypeId = _internal_filters_js__WEBPACK_IMPORTED_MODULE_16__.ItemsCountTypeId;\n/**\n * @category ReadonlyArray filters\n * @since 1.0.0\n */\nconst itemsCount = (n, annotations) => self => self.pipe(filter(a => a.length === n, {\n  typeId: ItemsCountTypeId,\n  description: `an array of exactly ${n} item(s)`,\n  jsonSchema: {\n    minItems: n,\n    maxItems: n\n  },\n  ...annotations\n}));\n/**\n * @category ReadonlyArray transformations\n * @since 1.0.0\n */\nconst getNumberIndexedAccess = self => make(_AST_js__WEBPACK_IMPORTED_MODULE_0__.getNumberIndexedAccess(self.ast));\n/**\n * Get the first element of a `ReadonlyArray`, or `None` if the array is empty.\n *\n * @category ReadonlyArray transformations\n * @since 1.0.0\n */\nconst head = self => transform(self, OptionFromSelf(getNumberIndexedAccess(typeSchema(self))), {\n  decode: effect_Array__WEBPACK_IMPORTED_MODULE_9__.head,\n  encode: effect_Option__WEBPACK_IMPORTED_MODULE_10__.match({\n    onNone: () => [],\n    onSome: effect_Array__WEBPACK_IMPORTED_MODULE_9__.of\n  })\n});\n/**\n * Retrieves the first element of a `ReadonlyArray`.\n *\n * If the array is empty, it returns the `fallback` argument if provided; otherwise, it fails.\n *\n * @category ReadonlyArray transformations\n * @since 1.0.0\n */\nconst headOrElse = /*#__PURE__*/(0,effect_Function__WEBPACK_IMPORTED_MODULE_11__.dual)(args => isSchema(args[0]), (self, fallback) => transformOrFail(self, getNumberIndexedAccess(typeSchema(self)), {\n  decode: (as, _, ast) => as.length > 0 ? _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.succeed(as[0]) : fallback ? _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.succeed(fallback()) : _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.fail(new _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.Type(ast, as)),\n  encode: a => _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.succeed(effect_Array__WEBPACK_IMPORTED_MODULE_9__.of(a))\n}));\n/**\n * @category type id\n * @since 1.0.0\n */\nconst ValidDateTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/ValidDate\");\n/**\n * A filter that **excludes invalid** dates (e.g., `new Date(\"Invalid Date\")` is rejected).\n *\n * @category Date filters\n * @since 1.0.0\n */\nconst validDate = annotations => self => self.pipe(filter(a => !Number.isNaN(a.getTime()), {\n  typeId: ValidDateTypeId,\n  description: \"a valid Date\",\n  ...annotations\n}));\n/**\n * Represents a schema for handling potentially **invalid** `Date` instances (e.g., `new Date(\"Invalid Date\")` is not rejected).\n *\n * @category Date constructors\n * @since 1.0.0\n */\nconst DateFromSelf = /*#__PURE__*/declare(effect_Predicate__WEBPACK_IMPORTED_MODULE_8__.isDate, {\n  identifier: \"DateFromSelf\",\n  description: \"a potentially invalid Date instance\",\n  pretty: () => date => `new Date(${JSON.stringify(date)})`,\n  arbitrary: () => fc => fc.date({\n    noInvalidDate: false\n  }),\n  equivalence: () => effect_Equivalence__WEBPACK_IMPORTED_MODULE_25__.Date\n});\n/**\n * Represents a schema for handling only **valid** dates. For example, `new Date(\"Invalid Date\")` is rejected, even though it is an instance of `Date`.\n *\n * @category Date constructors\n * @since 1.0.0\n */\nconst ValidDateFromSelf = /*#__PURE__*/DateFromSelf.pipe( /*#__PURE__*/validDate({\n  identifier: \"ValidDateFromSelf\",\n  description: \"a valid Date instance\"\n}));\n/**\n * Represents a schema that converts a `string` into a (potentially invalid) `Date` (e.g., `new Date(\"Invalid Date\")` is not rejected).\n *\n * @category Date transformations\n * @since 1.0.0\n */\nconst DateFromString = /*#__PURE__*/transform($String, DateFromSelf, {\n  decode: s => new Date(s),\n  encode: n => n.toISOString()\n}).annotations({\n  identifier: \"DateFromString\"\n});\nconst $Date = /*#__PURE__*/DateFromString.pipe( /*#__PURE__*/validDate({\n  identifier: \"Date\"\n}));\n\nconst OptionNoneEncoded = /*#__PURE__*/Struct({\n  _tag: Literal(\"None\")\n}).annotations({\n  description: \"NoneEncoded\"\n});\nconst optionSomeEncoded = value => Struct({\n  _tag: Literal(\"Some\"),\n  value\n}).annotations({\n  description: `SomeEncoded<${format(value)}>`\n});\nconst optionEncoded = value => Union(OptionNoneEncoded, optionSomeEncoded(value)).annotations({\n  description: `OptionEncoded<${format(value)}>`\n});\nconst optionDecode = input => input._tag === \"None\" ? effect_Option__WEBPACK_IMPORTED_MODULE_10__.none() : effect_Option__WEBPACK_IMPORTED_MODULE_10__.some(input.value);\nconst optionArbitrary = value => fc => fc.oneof(fc.record({\n  _tag: fc.constant(\"None\")\n}), fc.record({\n  _tag: fc.constant(\"Some\"),\n  value: value(fc)\n})).map(optionDecode);\nconst optionPretty = value => effect_Option__WEBPACK_IMPORTED_MODULE_10__.match({\n  onNone: () => \"none()\",\n  onSome: a => `some(${value(a)})`\n});\nconst optionParse = decodeUnknown => (u, options, ast) => effect_Option__WEBPACK_IMPORTED_MODULE_10__.isOption(u) ? effect_Option__WEBPACK_IMPORTED_MODULE_10__.isNone(u) ? _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.succeed(effect_Option__WEBPACK_IMPORTED_MODULE_10__.none()) : _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.map(decodeUnknown(u.value, options), effect_Option__WEBPACK_IMPORTED_MODULE_10__.some) : _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.fail(new _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.Type(ast, u));\n/**\n * @category Option transformations\n * @since 1.0.0\n */\nconst OptionFromSelf = value => {\n  return declare([value], {\n    decode: value => optionParse(_ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.decodeUnknown(value)),\n    encode: value => optionParse(_ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.encodeUnknown(value))\n  }, {\n    description: `Option<${format(value)}>`,\n    pretty: optionPretty,\n    arbitrary: optionArbitrary,\n    equivalence: effect_Option__WEBPACK_IMPORTED_MODULE_10__.getEquivalence\n  });\n};\nconst makeNoneEncoded = {\n  _tag: \"None\"\n};\nconst makeSomeEncoded = value => ({\n  _tag: \"Some\",\n  value\n});\n/**\n * @category Option transformations\n * @since 1.0.0\n */\nconst Option = value => {\n  const value_ = asSchema(value);\n  return transform(optionEncoded(value_), OptionFromSelf(typeSchema(value_)), {\n    decode: optionDecode,\n    encode: effect_Option__WEBPACK_IMPORTED_MODULE_10__.match({\n      onNone: () => makeNoneEncoded,\n      onSome: makeSomeEncoded\n    })\n  });\n};\n/**\n * @category Option transformations\n * @since 1.0.0\n */\nconst OptionFromNullOr = value => {\n  const value_ = asSchema(value);\n  return transform(NullOr(value_), OptionFromSelf(typeSchema(value_)), {\n    decode: effect_Option__WEBPACK_IMPORTED_MODULE_10__.fromNullable,\n    encode: effect_Option__WEBPACK_IMPORTED_MODULE_10__.getOrNull\n  });\n};\n/**\n * @category Option transformations\n * @since 1.0.0\n */\nconst OptionFromNullishOr = (value, onNoneEncoding) => {\n  const value_ = asSchema(value);\n  return transform(NullishOr(value_), OptionFromSelf(typeSchema(value_)), {\n    decode: effect_Option__WEBPACK_IMPORTED_MODULE_10__.fromNullable,\n    encode: onNoneEncoding === null ? effect_Option__WEBPACK_IMPORTED_MODULE_10__.getOrNull : effect_Option__WEBPACK_IMPORTED_MODULE_10__.getOrUndefined\n  });\n};\n/**\n * @category Option transformations\n * @since 1.0.0\n */\nconst OptionFromUndefinedOr = value => {\n  const value_ = asSchema(value);\n  return transform(UndefinedOr(value_), OptionFromSelf(typeSchema(value_)), {\n    decode: effect_Option__WEBPACK_IMPORTED_MODULE_10__.fromNullable,\n    encode: effect_Option__WEBPACK_IMPORTED_MODULE_10__.getOrUndefined\n  });\n};\nconst rightEncoded = right => Struct({\n  _tag: Literal(\"Right\"),\n  right\n}).annotations({\n  description: `RightEncoded<${format(right)}>`\n});\nconst leftEncoded = left => Struct({\n  _tag: Literal(\"Left\"),\n  left\n}).annotations({\n  description: `LeftEncoded<${format(left)}>`\n});\nconst eitherEncoded = (right, left) => Union(rightEncoded(right), leftEncoded(left)).annotations({\n  description: `EitherEncoded<${format(left)}, ${format(right)}>`\n});\nconst eitherDecode = input => input._tag === \"Left\" ? effect_Either__WEBPACK_IMPORTED_MODULE_6__.left(input.left) : effect_Either__WEBPACK_IMPORTED_MODULE_6__.right(input.right);\nconst eitherArbitrary = (right, left) => fc => fc.oneof(fc.record({\n  _tag: fc.constant(\"Left\"),\n  left: left(fc)\n}), fc.record({\n  _tag: fc.constant(\"Right\"),\n  right: right(fc)\n})).map(eitherDecode);\nconst eitherPretty = (right, left) => effect_Either__WEBPACK_IMPORTED_MODULE_6__.match({\n  onLeft: e => `left(${left(e)})`,\n  onRight: a => `right(${right(a)})`\n});\nconst eitherParse = (parseRight, decodeUnknownLeft) => (u, options, ast) => effect_Either__WEBPACK_IMPORTED_MODULE_6__.isEither(u) ? effect_Either__WEBPACK_IMPORTED_MODULE_6__.match(u, {\n  onLeft: left => _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.map(decodeUnknownLeft(left, options), effect_Either__WEBPACK_IMPORTED_MODULE_6__.left),\n  onRight: right => _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.map(parseRight(right, options), effect_Either__WEBPACK_IMPORTED_MODULE_6__.right)\n}) : _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.fail(new _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.Type(ast, u));\n/**\n * @category Either transformations\n * @since 1.0.0\n */\nconst EitherFromSelf = ({\n  left,\n  right\n}) => {\n  return declare([right, left], {\n    decode: (right, left) => eitherParse(_ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.decodeUnknown(right), _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.decodeUnknown(left)),\n    encode: (right, left) => eitherParse(_ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.encodeUnknown(right), _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.encodeUnknown(left))\n  }, {\n    description: `Either<${format(right)}, ${format(left)}>`,\n    pretty: eitherPretty,\n    arbitrary: eitherArbitrary,\n    equivalence: (right, left) => effect_Either__WEBPACK_IMPORTED_MODULE_6__.getEquivalence({\n      left,\n      right\n    })\n  });\n};\nconst makeLeftEncoded = left => ({\n  _tag: \"Left\",\n  left\n});\nconst makeRightEncoded = right => ({\n  _tag: \"Right\",\n  right\n});\n/**\n * @category Either transformations\n * @since 1.0.0\n */\nconst Either = ({\n  left,\n  right\n}) => {\n  const right_ = asSchema(right);\n  const left_ = asSchema(left);\n  return transform(eitherEncoded(right_, left_), EitherFromSelf({\n    left: typeSchema(left_),\n    right: typeSchema(right_)\n  }), {\n    decode: eitherDecode,\n    encode: effect_Either__WEBPACK_IMPORTED_MODULE_6__.match({\n      onLeft: makeLeftEncoded,\n      onRight: makeRightEncoded\n    })\n  });\n};\n/**\n * @example\n * import * as Schema from \"@effect/schema/Schema\"\n *\n * // Schema<string | number, Either<string, number>>\n * Schema.EitherFromUnion({ left: Schema.String, right: Schema.Number })\n *\n * @category Either transformations\n * @since 1.0.0\n */\nconst EitherFromUnion = ({\n  left,\n  right\n}) => {\n  const right_ = asSchema(right);\n  const left_ = asSchema(left);\n  const toright = typeSchema(right_);\n  const toleft = typeSchema(left_);\n  const fromRight = transform(right_, rightEncoded(toright), {\n    decode: makeRightEncoded,\n    encode: r => r.right\n  });\n  const fromLeft = transform(left_, leftEncoded(toleft), {\n    decode: makeLeftEncoded,\n    encode: l => l.left\n  });\n  return transform(Union(fromRight, fromLeft), EitherFromSelf({\n    left: toleft,\n    right: toright\n  }), {\n    decode: from => from._tag === \"Left\" ? effect_Either__WEBPACK_IMPORTED_MODULE_6__.left(from.left) : effect_Either__WEBPACK_IMPORTED_MODULE_6__.right(from.right),\n    encode: effect_Either__WEBPACK_IMPORTED_MODULE_6__.match({\n      onLeft: makeLeftEncoded,\n      onRight: makeRightEncoded\n    })\n  });\n};\nconst mapArbitrary = (key, value) => fc => fc.array(fc.tuple(key(fc), value(fc))).map(as => new Map(as));\nconst readonlyMapPretty = (key, value) => map => `new Map([${Array.from(map.entries()).map(([k, v]) => `[${key(k)}, ${value(v)}]`).join(\", \")}])`;\nconst readonlyMapEquivalence = (key, value) => {\n  const arrayEquivalence = effect_Array__WEBPACK_IMPORTED_MODULE_9__.getEquivalence(effect_Equivalence__WEBPACK_IMPORTED_MODULE_25__.make(([ka, va], [kb, vb]) => key(ka, kb) && value(va, vb)));\n  return effect_Equivalence__WEBPACK_IMPORTED_MODULE_25__.make((a, b) => arrayEquivalence(Array.from(a.entries()), Array.from(b.entries())));\n};\nconst readonlyMapParse = decodeUnknown => (u, options, ast) => effect_Predicate__WEBPACK_IMPORTED_MODULE_8__.isMap(u) ? _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.map(decodeUnknown(Array.from(u.entries()), options), as => new Map(as)) : _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.fail(new _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.Type(ast, u));\nconst mapFromSelf_ = (key, value, description) => declare([key, value], {\n  decode: (Key, Value) => readonlyMapParse(_ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.decodeUnknown($Array(Tuple(Key, Value)))),\n  encode: (Key, Value) => readonlyMapParse(_ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.encodeUnknown($Array(Tuple(Key, Value))))\n}, {\n  description,\n  pretty: readonlyMapPretty,\n  arbitrary: mapArbitrary,\n  equivalence: readonlyMapEquivalence\n});\n/**\n * @category ReadonlyMap\n * @since 1.0.0\n */\nconst ReadonlyMapFromSelf = ({\n  key,\n  value\n}) => mapFromSelf_(key, value, `ReadonlyMap<${format(key)}, ${format(value)}>`);\n/**\n * @category Map\n * @since 1.0.0\n */\nconst MapFromSelf = ({\n  key,\n  value\n}) => mapFromSelf_(key, value, `Map<${format(key)}, ${format(value)}>`);\n/**\n * @category ReadonlyMap transformations\n * @since 1.0.0\n */\nconst ReadonlyMap = ({\n  key,\n  value\n}) => {\n  const key_ = asSchema(key);\n  const value_ = asSchema(value);\n  return transform($Array(Tuple(key_, value_)), ReadonlyMapFromSelf({\n    key: typeSchema(key_),\n    value: typeSchema(value_)\n  }), {\n    decode: as => new Map(as),\n    encode: map => Array.from(map.entries())\n  });\n};\nconst map = ({\n  key,\n  value\n}) => {\n  const key_ = asSchema(key);\n  const value_ = asSchema(value);\n  return transform($Array(Tuple(key_, value_)), MapFromSelf({\n    key: typeSchema(key_),\n    value: typeSchema(value_)\n  }), {\n    decode: as => new Map(as),\n    encode: map => Array.from(map.entries())\n  });\n};\n\nconst setArbitrary = item => fc => fc.array(item(fc)).map(as => new Set(as));\nconst readonlySetPretty = item => set => `new Set([${Array.from(set.values()).map(a => item(a)).join(\", \")}])`;\nconst readonlySetEquivalence = item => {\n  const arrayEquivalence = effect_Array__WEBPACK_IMPORTED_MODULE_9__.getEquivalence(item);\n  return effect_Equivalence__WEBPACK_IMPORTED_MODULE_25__.make((a, b) => arrayEquivalence(Array.from(a.values()), Array.from(b.values())));\n};\nconst readonlySetParse = decodeUnknown => (u, options, ast) => effect_Predicate__WEBPACK_IMPORTED_MODULE_8__.isSet(u) ? _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.map(decodeUnknown(Array.from(u.values()), options), as => new Set(as)) : _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.fail(new _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.Type(ast, u));\nconst setFromSelf_ = (value, description) => declare([value], {\n  decode: item => readonlySetParse(_ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.decodeUnknown($Array(item))),\n  encode: item => readonlySetParse(_ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.encodeUnknown($Array(item)))\n}, {\n  description,\n  pretty: readonlySetPretty,\n  arbitrary: setArbitrary,\n  equivalence: readonlySetEquivalence\n});\n/**\n * @category ReadonlySet\n * @since 1.0.0\n */\nconst ReadonlySetFromSelf = value => setFromSelf_(value, `ReadonlySet<${format(value)}>`);\n/**\n * @category Set\n * @since 1.0.0\n */\nconst SetFromSelf = value => setFromSelf_(value, `Set<${format(value)}>`);\n/**\n * @category ReadonlySet transformations\n * @since 1.0.0\n */\nconst ReadonlySet = value => {\n  const value_ = asSchema(value);\n  return transform($Array(value_), ReadonlySetFromSelf(typeSchema(value_)), {\n    decode: as => new Set(as),\n    encode: set => Array.from(set)\n  });\n};\nconst set = value => {\n  const value_ = asSchema(value);\n  return transform($Array(value_), SetFromSelf(typeSchema(value_)), {\n    decode: as => new Set(as),\n    encode: set => Array.from(set)\n  });\n};\n\nconst bigDecimalPretty = () => val => `BigDecimal(${effect_BigDecimal__WEBPACK_IMPORTED_MODULE_26__.format(effect_BigDecimal__WEBPACK_IMPORTED_MODULE_26__.normalize(val))})`;\nconst bigDecimalArbitrary = () => fc => fc.tuple(fc.bigInt(), fc.integer()).map(([value, scale]) => effect_BigDecimal__WEBPACK_IMPORTED_MODULE_26__.make(value, scale));\n/**\n * @category BigDecimal constructors\n * @since 1.0.0\n */\nconst BigDecimalFromSelf = /*#__PURE__*/declare(effect_BigDecimal__WEBPACK_IMPORTED_MODULE_26__.isBigDecimal, {\n  identifier: \"BigDecimalFromSelf\",\n  pretty: bigDecimalPretty,\n  arbitrary: bigDecimalArbitrary,\n  equivalence: () => effect_BigDecimal__WEBPACK_IMPORTED_MODULE_26__.Equivalence\n});\n/**\n * @category BigDecimal transformations\n * @since 1.0.0\n */\nconst BigDecimal = /*#__PURE__*/transformOrFail($String, BigDecimalFromSelf, {\n  decode: (num, _, ast) => effect_BigDecimal__WEBPACK_IMPORTED_MODULE_26__.fromString(num).pipe(effect_Option__WEBPACK_IMPORTED_MODULE_10__.match({\n    onNone: () => _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.fail(new _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.Type(ast, num)),\n    onSome: val => _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.succeed(effect_BigDecimal__WEBPACK_IMPORTED_MODULE_26__.normalize(val))\n  })),\n  encode: val => _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.succeed(effect_BigDecimal__WEBPACK_IMPORTED_MODULE_26__.format(effect_BigDecimal__WEBPACK_IMPORTED_MODULE_26__.normalize(val)))\n}).annotations({\n  identifier: \"BigDecimal\"\n});\n/**\n * A schema that transforms a `number` into a `BigDecimal`.\n * When encoding, this Schema will produce incorrect results if the BigDecimal exceeds the 64-bit range of a number.\n *\n * @category BigDecimal transformations\n * @since 1.0.0\n */\nconst BigDecimalFromNumber = /*#__PURE__*/transformOrFail($Number, BigDecimalFromSelf, {\n  decode: num => _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.succeed(effect_BigDecimal__WEBPACK_IMPORTED_MODULE_26__.fromNumber(num)),\n  encode: val => _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.succeed(effect_BigDecimal__WEBPACK_IMPORTED_MODULE_26__.unsafeToNumber(val))\n}).annotations({\n  identifier: \"BigDecimalFromNumber\"\n});\n/**\n * @category type id\n * @since 1.0.0\n */\nconst GreaterThanBigDecimalTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/GreaterThanBigDecimal\");\n/**\n * @category BigDecimal filters\n * @since 1.0.0\n */\nconst greaterThanBigDecimal = (min, annotations) => self => self.pipe(filter(a => effect_BigDecimal__WEBPACK_IMPORTED_MODULE_26__.greaterThan(a, min), {\n  typeId: {\n    id: GreaterThanBigDecimalTypeId,\n    annotation: {\n      min\n    }\n  },\n  description: `a BigDecimal greater than ${effect_BigDecimal__WEBPACK_IMPORTED_MODULE_26__.format(min)}`,\n  ...annotations\n}));\n/**\n * @category type id\n * @since 1.0.0\n */\nconst GreaterThanOrEqualToBigDecimalTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/GreaterThanOrEqualToBigDecimal\");\n/**\n * @category BigDecimal filters\n * @since 1.0.0\n */\nconst greaterThanOrEqualToBigDecimal = (min, annotations) => self => self.pipe(filter(a => effect_BigDecimal__WEBPACK_IMPORTED_MODULE_26__.greaterThanOrEqualTo(a, min), {\n  typeId: {\n    id: GreaterThanOrEqualToBigDecimalTypeId,\n    annotation: {\n      min\n    }\n  },\n  description: `a BigDecimal greater than or equal to ${effect_BigDecimal__WEBPACK_IMPORTED_MODULE_26__.format(min)}`,\n  ...annotations\n}));\n/**\n * @category type id\n * @since 1.0.0\n */\nconst LessThanBigDecimalTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/LessThanBigDecimal\");\n/**\n * @category BigDecimal filters\n * @since 1.0.0\n */\nconst lessThanBigDecimal = (max, annotations) => self => self.pipe(filter(a => effect_BigDecimal__WEBPACK_IMPORTED_MODULE_26__.lessThan(a, max), {\n  typeId: {\n    id: LessThanBigDecimalTypeId,\n    annotation: {\n      max\n    }\n  },\n  description: `a BigDecimal less than ${effect_BigDecimal__WEBPACK_IMPORTED_MODULE_26__.format(max)}`,\n  ...annotations\n}));\n/**\n * @category type id\n * @since 1.0.0\n */\nconst LessThanOrEqualToBigDecimalTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/LessThanOrEqualToBigDecimal\");\n/**\n * @category BigDecimal filters\n * @since 1.0.0\n */\nconst lessThanOrEqualToBigDecimal = (max, annotations) => self => self.pipe(filter(a => effect_BigDecimal__WEBPACK_IMPORTED_MODULE_26__.lessThanOrEqualTo(a, max), {\n  typeId: {\n    id: LessThanOrEqualToBigDecimalTypeId,\n    annotation: {\n      max\n    }\n  },\n  description: `a BigDecimal less than or equal to ${effect_BigDecimal__WEBPACK_IMPORTED_MODULE_26__.format(max)}`,\n  ...annotations\n}));\n/**\n * @category type id\n * @since 1.0.0\n */\nconst PositiveBigDecimalTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/PositiveBigDecimal\");\n/**\n * @category BigDecimal filters\n * @since 1.0.0\n */\nconst positiveBigDecimal = annotations => self => self.pipe(filter(a => effect_BigDecimal__WEBPACK_IMPORTED_MODULE_26__.isPositive(a), {\n  typeId: {\n    id: PositiveBigDecimalTypeId,\n    annotation: {}\n  },\n  description: `a positive BigDecimal`,\n  ...annotations\n}));\n/**\n * @category BigDecimal constructors\n * @since 1.0.0\n */\nconst PositiveBigDecimalFromSelf = /*#__PURE__*/BigDecimalFromSelf.pipe( /*#__PURE__*/positiveBigDecimal({\n  identifier: \"PositiveBigDecimalFromSelf\",\n  title: \"PositiveBigDecimalFromSelf\"\n}));\n/**\n * @category type id\n * @since 1.0.0\n */\nconst NonNegativeBigDecimalTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/NonNegativeBigDecimal\");\n/**\n * @category BigDecimal filters\n * @since 1.0.0\n */\nconst nonNegativeBigDecimal = annotations => self => self.pipe(filter(a => a.value >= 0n, {\n  typeId: {\n    id: NonNegativeBigDecimalTypeId,\n    annotation: {}\n  },\n  description: `a non-negative BigDecimal`,\n  ...annotations\n}));\n/**\n * @category BigDecimal constructors\n * @since 1.0.0\n */\nconst NonNegativeBigDecimalFromSelf = /*#__PURE__*/BigDecimalFromSelf.pipe( /*#__PURE__*/nonNegativeBigDecimal({\n  identifier: \"NonNegativeBigDecimalFromSelf\",\n  title: \"NonNegativeBigDecimalFromSelf\"\n}));\n/**\n * @category type id\n * @since 1.0.0\n */\nconst NegativeBigDecimalTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/NegativeBigDecimal\");\n/**\n * @category BigDecimal filters\n * @since 1.0.0\n */\nconst negativeBigDecimal = annotations => self => self.pipe(filter(a => effect_BigDecimal__WEBPACK_IMPORTED_MODULE_26__.isNegative(a), {\n  typeId: {\n    id: NegativeBigDecimalTypeId,\n    annotation: {}\n  },\n  description: `a negative BigDecimal`,\n  ...annotations\n}));\n/**\n * @category BigDecimal constructors\n * @since 1.0.0\n */\nconst NegativeBigDecimalFromSelf = /*#__PURE__*/BigDecimalFromSelf.pipe( /*#__PURE__*/negativeBigDecimal({\n  identifier: \"NegativeBigDecimalFromSelf\",\n  title: \"NegativeBigDecimalFromSelf\"\n}));\n/**\n * @category type id\n * @since 1.0.0\n */\nconst NonPositiveBigDecimalTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/NonPositiveBigDecimal\");\n/**\n * @category BigDecimal filters\n * @since 1.0.0\n */\nconst nonPositiveBigDecimal = annotations => self => self.pipe(filter(a => a.value <= 0n, {\n  typeId: {\n    id: NonPositiveBigDecimalTypeId,\n    annotation: {}\n  },\n  description: `a non-positive BigDecimal`,\n  ...annotations\n}));\n/**\n * @category BigDecimal constructors\n * @since 1.0.0\n */\nconst NonPositiveBigDecimalFromSelf = /*#__PURE__*/BigDecimalFromSelf.pipe( /*#__PURE__*/nonPositiveBigDecimal({\n  identifier: \"NonPositiveBigDecimalFromSelf\",\n  title: \"NonPositiveBigDecimalFromSelf\"\n}));\n/**\n * @category type id\n * @since 1.0.0\n */\nconst BetweenBigDecimalTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/BetweenBigDecimal\");\n/**\n * @category BigDecimal filters\n * @since 1.0.0\n */\nconst betweenBigDecimal = (minimum, maximum, annotations) => self => self.pipe(filter(a => effect_BigDecimal__WEBPACK_IMPORTED_MODULE_26__.between(a, {\n  minimum,\n  maximum\n}), {\n  typeId: {\n    id: BetweenBigDecimalTypeId,\n    annotation: {\n      maximum,\n      minimum\n    }\n  },\n  description: `a BigDecimal between ${effect_BigDecimal__WEBPACK_IMPORTED_MODULE_26__.format(minimum)} and ${effect_BigDecimal__WEBPACK_IMPORTED_MODULE_26__.format(maximum)}`,\n  ...annotations\n}));\n/**\n * Clamps a `BigDecimal` between a minimum and a maximum value.\n *\n * @category BigDecimal transformations\n * @since 1.0.0\n */\nconst clampBigDecimal = (minimum, maximum) => self => transform(self, self.pipe(typeSchema, betweenBigDecimal(minimum, maximum)), {\n  strict: false,\n  decode: self => effect_BigDecimal__WEBPACK_IMPORTED_MODULE_26__.clamp(self, {\n    minimum,\n    maximum\n  }),\n  encode: effect_Function__WEBPACK_IMPORTED_MODULE_11__.identity\n});\nconst chunkArbitrary = item => fc => fc.array(item(fc)).map(effect_Chunk__WEBPACK_IMPORTED_MODULE_27__.fromIterable);\nconst chunkPretty = item => c => `Chunk(${effect_Chunk__WEBPACK_IMPORTED_MODULE_27__.toReadonlyArray(c).map(item).join(\", \")})`;\nconst chunkParse = decodeUnknown => (u, options, ast) => effect_Chunk__WEBPACK_IMPORTED_MODULE_27__.isChunk(u) ? effect_Chunk__WEBPACK_IMPORTED_MODULE_27__.isEmpty(u) ? _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.succeed(effect_Chunk__WEBPACK_IMPORTED_MODULE_27__.empty()) : _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.map(decodeUnknown(effect_Chunk__WEBPACK_IMPORTED_MODULE_27__.toReadonlyArray(u), options), effect_Chunk__WEBPACK_IMPORTED_MODULE_27__.fromIterable) : _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.fail(new _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.Type(ast, u));\n/**\n * @category Chunk transformations\n * @since 1.0.0\n */\nconst ChunkFromSelf = value => {\n  return declare([value], {\n    decode: item => chunkParse(_ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.decodeUnknown($Array(item))),\n    encode: item => chunkParse(_ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.encodeUnknown($Array(item)))\n  }, {\n    description: `Chunk<${format(value)}>`,\n    pretty: chunkPretty,\n    arbitrary: chunkArbitrary,\n    equivalence: effect_Chunk__WEBPACK_IMPORTED_MODULE_27__.getEquivalence\n  });\n};\n/**\n * @category Chunk transformations\n * @since 1.0.0\n */\nconst Chunk = value => {\n  const value_ = asSchema(value);\n  return transform($Array(value_), ChunkFromSelf(typeSchema(value_)), {\n    decode: as => as.length === 0 ? effect_Chunk__WEBPACK_IMPORTED_MODULE_27__.empty() : effect_Chunk__WEBPACK_IMPORTED_MODULE_27__.fromIterable(as),\n    encode: effect_Chunk__WEBPACK_IMPORTED_MODULE_27__.toReadonlyArray\n  });\n};\nconst toData = a => Array.isArray(a) ? effect_Data__WEBPACK_IMPORTED_MODULE_28__.array(a) : effect_Data__WEBPACK_IMPORTED_MODULE_28__.struct(a);\nconst dataArbitrary = item => fc => item(fc).map(toData);\nconst dataPretty = item => d => `Data(${item(d)})`;\nconst dataParse = decodeUnknown => (u, options, ast) => effect_Equal__WEBPACK_IMPORTED_MODULE_23__.isEqual(u) ? _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.map(decodeUnknown(u, options), toData) : _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.fail(new _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.Type(ast, u));\n/**\n * @category Data transformations\n * @since 1.0.0\n */\nconst DataFromSelf = item => {\n  return declare([item], {\n    decode: item => dataParse(_ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.decodeUnknown(item)),\n    encode: item => dataParse(_ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.encodeUnknown(item))\n  }, {\n    description: `Data<${format(item)}>`,\n    pretty: dataPretty,\n    arbitrary: dataArbitrary\n  });\n};\n/**\n * @category Data transformations\n * @since 1.0.0\n */\nconst Data = item => transform(item, DataFromSelf(typeSchema(item)), {\n  strict: false,\n  decode: toData,\n  encode: a => Array.isArray(a) ? Array.from(a) : Object.assign({}, a)\n});\n/**\n * @category classes\n * @since 1.0.0\n */\nconst Class = identifier => (fields, annotations) => makeClass({\n  kind: \"Class\",\n  identifier,\n  fields,\n  Base: effect_Data__WEBPACK_IMPORTED_MODULE_28__.Class,\n  annotations\n});\n/**\n * @category classes\n * @since 1.0.0\n */\nconst TaggedClass = identifier => (tag, fields, annotations) => makeClass({\n  kind: \"TaggedClass\",\n  identifier: identifier ?? tag,\n  fields: extendFields({\n    _tag: Literal(tag)\n  }, fields),\n  Base: effect_Data__WEBPACK_IMPORTED_MODULE_28__.Class,\n  tag: {\n    _tag: tag\n  },\n  annotations\n});\n/**\n * @category classes\n * @since 1.0.0\n */\nconst TaggedError = identifier => (tag, fields, annotations) => {\n  class Base extends effect_Data__WEBPACK_IMPORTED_MODULE_28__.Error {}\n  ;\n  Base.prototype.name = tag;\n  return makeClass({\n    kind: \"TaggedError\",\n    identifier: identifier ?? tag,\n    fields: extendFields({\n      _tag: Literal(tag)\n    }, fields),\n    Base,\n    tag: {\n      _tag: tag\n    },\n    annotations,\n    toStringOverride(self) {\n      if (effect_Predicate__WEBPACK_IMPORTED_MODULE_8__.isString(self.message) && self.message.length > 0) {\n        let message = `${self._tag}: ${self.message}`;\n        if (effect_Predicate__WEBPACK_IMPORTED_MODULE_8__.isString(self.stack)) {\n          message = `${message}\\n${self.stack.split(\"\\n\").slice(1).join(\"\\n\")}`;\n        }\n        return message;\n      }\n    }\n  });\n};\n/**\n * @category classes\n * @since 1.0.0\n */\nconst TaggedRequest = identifier => (tag, Failure, Success, fields, annotations) => {\n  class SerializableRequest extends effect_Request__WEBPACK_IMPORTED_MODULE_29__.Class {\n    get [_internal_serializable_js__WEBPACK_IMPORTED_MODULE_30__.symbol]() {\n      return this.constructor;\n    }\n    get [_internal_serializable_js__WEBPACK_IMPORTED_MODULE_30__.symbolResult]() {\n      return {\n        Failure,\n        Success\n      };\n    }\n  }\n  return makeClass({\n    kind: \"TaggedRequest\",\n    identifier: identifier ?? tag,\n    fields: extendFields({\n      _tag: Literal(tag)\n    }, fields),\n    Base: SerializableRequest,\n    tag: {\n      _tag: tag\n    },\n    annotations\n  });\n};\nconst extendFields = (a, b) => {\n  const out = {\n    ...a\n  };\n  for (const name of _internal_util_js__WEBPACK_IMPORTED_MODULE_12__.ownKeys(b)) {\n    if (name in a) {\n      throw new Error(_internal_errors_js__WEBPACK_IMPORTED_MODULE_15__.getDuplicatePropertySignatureErrorMessage(name));\n    }\n    out[name] = b[name];\n  }\n  return out;\n};\nconst makeClass = ({\n  Base,\n  annotations,\n  fields,\n  fromSchema,\n  identifier,\n  kind,\n  tag,\n  toStringOverride\n}) => {\n  const classSymbol = Symbol.for(`@effect/schema/${kind}/${identifier}`);\n  const schema = fromSchema ?? Struct(fields);\n  const from = effect_Option__WEBPACK_IMPORTED_MODULE_10__.match(_AST_js__WEBPACK_IMPORTED_MODULE_0__.getTitleAnnotation(schema.ast), {\n    onNone: () => schema.annotations({\n      title: `${identifier} (Encoded side)`\n    }),\n    onSome: () => schema\n  });\n  return class extends Base {\n    constructor(props = {}, disableValidation = false) {\n      if (tag !== undefined) {\n        props = {\n          ...props,\n          ...tag\n        };\n      }\n      if (disableValidation !== true) {\n        props = _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.validateSync(schema)(props);\n      }\n      super(props, true);\n    }\n    // ----------------\n    // Schema interface\n    // ----------------\n    static [TypeId] = variance;\n    static get ast() {\n      const toSchema = typeSchema(schema);\n      const guard = _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.is(toSchema);\n      const fallbackInstanceOf = u => effect_Predicate__WEBPACK_IMPORTED_MODULE_8__.hasProperty(u, classSymbol) && guard(u);\n      const encode = _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.encodeUnknown(toSchema);\n      const declaration = declare([toSchema], {\n        decode: () => (input, _, ast) => input instanceof this || fallbackInstanceOf(input) ? _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.succeed(input) : _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.fail(new _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.Type(ast, input)),\n        encode: () => (input, options) => input instanceof this ? _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.succeed(input) : _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.map(encode(input, options), props => new this(props, true))\n      }, {\n        identifier,\n        title: identifier,\n        description: `an instance of ${identifier}`,\n        pretty: pretty => self => `${identifier}(${pretty(self)})`,\n        arbitrary: arb => fc => arb(fc).map(props => new this(props)),\n        equivalence: effect_Function__WEBPACK_IMPORTED_MODULE_11__.identity,\n        [_AST_js__WEBPACK_IMPORTED_MODULE_0__.SurrogateAnnotationId]: toSchema.ast,\n        ...annotations\n      });\n      const transformation = transform(from, declaration, {\n        decode: input => new this(input, true),\n        encode: effect_Function__WEBPACK_IMPORTED_MODULE_11__.identity\n      }).annotations({\n        [_AST_js__WEBPACK_IMPORTED_MODULE_0__.SurrogateAnnotationId]: schema.ast\n      });\n      return transformation.ast;\n    }\n    static pipe() {\n      return (0,effect_Pipeable__WEBPACK_IMPORTED_MODULE_4__.pipeArguments)(this, arguments);\n    }\n    static annotations(annotations) {\n      return make(this.ast).annotations(annotations);\n    }\n    static toString() {\n      return `(${String(from)} <-> ${identifier})`;\n    }\n    // ----------------\n    // Class interface\n    // ----------------\n    static fields = {\n      ...fields\n    };\n    static identifier = identifier;\n    static extend(identifier) {\n      return (newFields, annotations) => {\n        const extendedFields = extendFields(fields, newFields);\n        return makeClass({\n          kind,\n          identifier,\n          fields: extendedFields,\n          Base: this,\n          tag,\n          annotations\n        });\n      };\n    }\n    static transformOrFail(identifier) {\n      return (newFields, options, annotations) => {\n        const transformedFields = extendFields(fields, newFields);\n        return makeClass({\n          kind,\n          identifier,\n          fromSchema: transformOrFail(schema, typeSchema(Struct(transformedFields)), options),\n          fields: transformedFields,\n          Base: this,\n          tag,\n          annotations\n        });\n      };\n    }\n    static transformOrFailFrom(identifier) {\n      return (newFields, options, annotations) => {\n        const transformedFields = extendFields(fields, newFields);\n        return makeClass({\n          kind,\n          identifier,\n          fromSchema: transformOrFail(encodedSchema(schema), Struct(transformedFields), options),\n          fields: transformedFields,\n          Base: this,\n          tag,\n          annotations\n        });\n      };\n    }\n    // ----------------\n    // other\n    // ----------------\n    get [classSymbol]() {\n      return classSymbol;\n    }\n    toString() {\n      if (toStringOverride !== undefined) {\n        const out = toStringOverride(this);\n        if (out !== undefined) {\n          return out;\n        }\n      }\n      return `${identifier}({ ${_internal_util_js__WEBPACK_IMPORTED_MODULE_12__.ownKeys(fields).map(p => `${_internal_util_js__WEBPACK_IMPORTED_MODULE_12__.formatPropertyKey(p)}: ${_internal_util_js__WEBPACK_IMPORTED_MODULE_12__.formatUnknown(this[p])}`).join(\", \")} })`;\n    }\n  };\n};\nconst FiberIdNoneEncoded = /*#__PURE__*/Struct({\n  _tag: Literal(\"None\")\n}).annotations({\n  identifier: \"FiberIdNoneEncoded\"\n});\nconst FiberIdRuntimeEncoded = /*#__PURE__*/Struct({\n  _tag: Literal(\"Runtime\"),\n  id: Int.annotations({\n    title: \"id\",\n    description: \"id\"\n  }),\n  startTimeMillis: Int.annotations({\n    title: \"startTimeMillis\",\n    description: \"startTimeMillis\"\n  })\n}).annotations({\n  identifier: \"FiberIdRuntimeEncoded\"\n});\nconst FiberIdCompositeEncoded = /*#__PURE__*/Struct({\n  _tag: Literal(\"Composite\"),\n  left: suspend(() => FiberIdEncoded),\n  right: suspend(() => FiberIdEncoded)\n}).annotations({\n  identifier: \"FiberIdCompositeEncoded\"\n});\nconst FiberIdEncoded = /*#__PURE__*/Union(FiberIdNoneEncoded, FiberIdRuntimeEncoded, FiberIdCompositeEncoded).annotations({\n  identifier: \"FiberIdEncoded\"\n});\nconst fiberIdArbitrary = fc => fc.letrec(tie => ({\n  None: fc.record({\n    _tag: fc.constant(\"None\")\n  }),\n  Runtime: fc.record({\n    _tag: fc.constant(\"Runtime\"),\n    id: fc.integer(),\n    startTimeMillis: fc.integer()\n  }),\n  Composite: fc.record({\n    _tag: fc.constant(\"Composite\"),\n    left: tie(\"FiberId\"),\n    right: tie(\"FiberId\")\n  }),\n  FiberId: fc.oneof(tie(\"None\"), tie(\"Runtime\"), tie(\"Composite\"))\n})).FiberId.map(fiberIdDecode);\nconst fiberIdPretty = fiberId => {\n  switch (fiberId._tag) {\n    case \"None\":\n      return \"FiberId.none\";\n    case \"Runtime\":\n      return `FiberId.runtime(${fiberId.id}, ${fiberId.startTimeMillis})`;\n    case \"Composite\":\n      return `FiberId.composite(${fiberIdPretty(fiberId.right)}, ${fiberIdPretty(fiberId.left)})`;\n  }\n};\n/**\n * @category FiberId constructors\n * @since 1.0.0\n */\nconst FiberIdFromSelf = /*#__PURE__*/declare(effect_FiberId__WEBPACK_IMPORTED_MODULE_31__.isFiberId, {\n  identifier: \"FiberIdFromSelf\",\n  pretty: () => fiberIdPretty,\n  arbitrary: () => fiberIdArbitrary\n});\nconst fiberIdDecode = input => {\n  switch (input._tag) {\n    case \"None\":\n      return effect_FiberId__WEBPACK_IMPORTED_MODULE_31__.none;\n    case \"Runtime\":\n      return effect_FiberId__WEBPACK_IMPORTED_MODULE_31__.runtime(input.id, input.startTimeMillis);\n    case \"Composite\":\n      return effect_FiberId__WEBPACK_IMPORTED_MODULE_31__.composite(fiberIdDecode(input.left), fiberIdDecode(input.right));\n  }\n};\nconst fiberIdEncode = input => {\n  switch (input._tag) {\n    case \"None\":\n      return {\n        _tag: \"None\"\n      };\n    case \"Runtime\":\n      return {\n        _tag: \"Runtime\",\n        id: input.id,\n        startTimeMillis: input.startTimeMillis\n      };\n    case \"Composite\":\n      return {\n        _tag: \"Composite\",\n        left: fiberIdEncode(input.left),\n        right: fiberIdEncode(input.right)\n      };\n  }\n};\n/**\n * @category FiberId transformations\n * @since 1.0.0\n */\nconst FiberId = /*#__PURE__*/transform(FiberIdEncoded, FiberIdFromSelf, {\n  decode: fiberIdDecode,\n  encode: fiberIdEncode\n}).annotations({\n  identifier: \"FiberId\"\n});\nconst causeDieEncoded = defect => Struct({\n  _tag: Literal(\"Die\"),\n  defect\n});\nconst CauseEmptyEncoded = /*#__PURE__*/Struct({\n  _tag: /*#__PURE__*/Literal(\"Empty\")\n});\nconst causeFailEncoded = error => Struct({\n  _tag: Literal(\"Fail\"),\n  error\n});\nconst CauseInterruptEncoded = /*#__PURE__*/Struct({\n  _tag: /*#__PURE__*/Literal(\"Interrupt\"),\n  fiberId: FiberIdEncoded\n});\nconst causeParallelEncoded = causeEncoded => Struct({\n  _tag: Literal(\"Parallel\"),\n  left: causeEncoded,\n  right: causeEncoded\n});\nconst causeSequentialEncoded = causeEncoded => Struct({\n  _tag: Literal(\"Sequential\"),\n  left: causeEncoded,\n  right: causeEncoded\n});\nconst causeEncoded = (error, defect) => {\n  const recur = suspend(() => out);\n  const out = Union(CauseEmptyEncoded, causeFailEncoded(error), causeDieEncoded(defect), CauseInterruptEncoded, causeSequentialEncoded(recur), causeParallelEncoded(recur)).annotations({\n    description: `CauseEncoded<${format(error)}>`\n  });\n  return out;\n};\nconst causeArbitrary = (error, defect) => fc => fc.letrec(tie => ({\n  Empty: fc.record({\n    _tag: fc.constant(\"Empty\")\n  }),\n  Fail: fc.record({\n    _tag: fc.constant(\"Fail\"),\n    error: error(fc)\n  }),\n  Die: fc.record({\n    _tag: fc.constant(\"Die\"),\n    defect: defect(fc)\n  }),\n  Interrupt: fc.record({\n    _tag: fc.constant(\"Interrupt\"),\n    fiberId: fiberIdArbitrary(fc)\n  }),\n  Sequential: fc.record({\n    _tag: fc.constant(\"Sequential\"),\n    left: tie(\"Cause\"),\n    right: tie(\"Cause\")\n  }),\n  Parallel: fc.record({\n    _tag: fc.constant(\"Parallel\"),\n    left: tie(\"Cause\"),\n    right: tie(\"Cause\")\n  }),\n  Cause: fc.oneof(tie(\"Empty\"), tie(\"Fail\"), tie(\"Die\"), tie(\"Interrupt\"), tie(\"Sequential\"), tie(\"Parallel\"))\n})).Cause.map(causeDecode);\nconst causePretty = error => cause => {\n  const f = cause => {\n    switch (cause._tag) {\n      case \"Empty\":\n        return \"Cause.empty\";\n      case \"Fail\":\n        return `Cause.fail(${error(cause.error)})`;\n      case \"Die\":\n        return `Cause.die(${effect_Cause__WEBPACK_IMPORTED_MODULE_32__.pretty(cause)})`;\n      case \"Interrupt\":\n        return `Cause.interrupt(${fiberIdPretty(cause.fiberId)})`;\n      case \"Sequential\":\n        return `Cause.sequential(${f(cause.left)}, ${f(cause.right)})`;\n      case \"Parallel\":\n        return `Cause.parallel(${f(cause.left)}, ${f(cause.right)})`;\n    }\n  };\n  return f(cause);\n};\nconst causeParse = decodeUnknown => (u, options, ast) => effect_Cause__WEBPACK_IMPORTED_MODULE_32__.isCause(u) ? _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.map(decodeUnknown(causeEncode(u), options), causeDecode) : _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.fail(new _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.Type(ast, u));\n/**\n * @category Cause transformations\n * @since 1.0.0\n */\nconst CauseFromSelf = ({\n  defect = Unknown,\n  error\n}) => {\n  return declare([error, defect], {\n    decode: (error, defect) => causeParse(_ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.decodeUnknown(causeEncoded(error, defect))),\n    encode: (error, defect) => causeParse(_ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.encodeUnknown(causeEncoded(error, defect)))\n  }, {\n    description: `Cause<${format(error)}>`,\n    pretty: causePretty,\n    arbitrary: causeArbitrary\n  });\n};\nfunction causeDecode(cause) {\n  switch (cause._tag) {\n    case \"Empty\":\n      return effect_Cause__WEBPACK_IMPORTED_MODULE_32__.empty;\n    case \"Fail\":\n      return effect_Cause__WEBPACK_IMPORTED_MODULE_32__.fail(cause.error);\n    case \"Die\":\n      return effect_Cause__WEBPACK_IMPORTED_MODULE_32__.die(cause.defect);\n    case \"Interrupt\":\n      return effect_Cause__WEBPACK_IMPORTED_MODULE_32__.interrupt(fiberIdDecode(cause.fiberId));\n    case \"Sequential\":\n      return effect_Cause__WEBPACK_IMPORTED_MODULE_32__.sequential(causeDecode(cause.left), causeDecode(cause.right));\n    case \"Parallel\":\n      return effect_Cause__WEBPACK_IMPORTED_MODULE_32__.parallel(causeDecode(cause.left), causeDecode(cause.right));\n  }\n}\nfunction causeEncode(cause) {\n  switch (cause._tag) {\n    case \"Empty\":\n      return {\n        _tag: \"Empty\"\n      };\n    case \"Fail\":\n      return {\n        _tag: \"Fail\",\n        error: cause.error\n      };\n    case \"Die\":\n      return {\n        _tag: \"Die\",\n        defect: cause.defect\n      };\n    case \"Interrupt\":\n      return {\n        _tag: \"Interrupt\",\n        fiberId: cause.fiberId\n      };\n    case \"Sequential\":\n      return {\n        _tag: \"Sequential\",\n        left: causeEncode(cause.left),\n        right: causeEncode(cause.right)\n      };\n    case \"Parallel\":\n      return {\n        _tag: \"Parallel\",\n        left: causeEncode(cause.left),\n        right: causeEncode(cause.right)\n      };\n  }\n}\n/**\n * @category Cause transformations\n * @since 1.0.0\n */\nconst CauseDefectUnknown = /*#__PURE__*/transform(Unknown, Unknown, {\n  decode: u => {\n    if (effect_Predicate__WEBPACK_IMPORTED_MODULE_8__.isObject(u) && \"message\" in u && typeof u.message === \"string\") {\n      const err = new Error(u.message, {\n        cause: u\n      });\n      if (\"name\" in u && typeof u.name === \"string\") {\n        err.name = u.name;\n      }\n      err.stack = \"stack\" in u && typeof u.stack === \"string\" ? u.stack : \"\";\n      return err;\n    }\n    return String(u);\n  },\n  encode: defect => {\n    if (defect instanceof Error) {\n      return {\n        name: defect.name,\n        message: defect.message\n      };\n    }\n    return String(defect);\n  }\n});\n/**\n * @category Cause transformations\n * @since 1.0.0\n */\nconst Cause = ({\n  defect = CauseDefectUnknown,\n  error\n}) => {\n  const error_ = asSchema(error);\n  return transform(causeEncoded(error_, defect), CauseFromSelf({\n    error: typeSchema(error_),\n    defect: typeSchema(defect)\n  }), {\n    decode: causeDecode,\n    encode: causeEncode\n  });\n};\nconst exitFailureEncoded = (error, defect) => Struct({\n  _tag: Literal(\"Failure\"),\n  cause: causeEncoded(error, defect)\n}).annotations({\n  description: `FailureEncoded<${format(error)}>`\n});\nconst exitSuccessEncoded = value => Struct({\n  _tag: Literal(\"Success\"),\n  value\n}).annotations({\n  description: `SuccessEncoded<${format(value)}>`\n});\nconst exitEncoded = (value, error, defect) => Union(exitFailureEncoded(error, defect), exitSuccessEncoded(value)).annotations({\n  description: `ExitEncoded<${format(value)}, ${format(error)}>`\n});\nconst exitDecode = input => {\n  switch (input._tag) {\n    case \"Failure\":\n      return effect_Exit__WEBPACK_IMPORTED_MODULE_33__.failCause(causeDecode(input.cause));\n    case \"Success\":\n      return effect_Exit__WEBPACK_IMPORTED_MODULE_33__.succeed(input.value);\n  }\n};\nconst exitArbitrary = (value, error, defect) => fc => fc.oneof(fc.record({\n  _tag: fc.constant(\"Failure\"),\n  cause: causeArbitrary(error, defect)(fc)\n}), fc.record({\n  _tag: fc.constant(\"Success\"),\n  value: value(fc)\n})).map(exitDecode);\nconst exitPretty = (value, error) => exit => exit._tag === \"Failure\" ? `Exit.failCause(${causePretty(error)(exit.cause)})` : `Exit.succeed(${value(exit.value)})`;\nconst exitParse = (decodeUnknownValue, decodeUnknownCause) => (u, options, ast) => effect_Exit__WEBPACK_IMPORTED_MODULE_33__.isExit(u) ? effect_Exit__WEBPACK_IMPORTED_MODULE_33__.match(u, {\n  onFailure: cause => _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.map(decodeUnknownCause(cause, options), effect_Exit__WEBPACK_IMPORTED_MODULE_33__.failCause),\n  onSuccess: value => _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.map(decodeUnknownValue(value, options), effect_Exit__WEBPACK_IMPORTED_MODULE_33__.succeed)\n}) : _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.fail(new _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.Type(ast, u));\n/**\n * @category Exit transformations\n * @since 1.0.0\n */\nconst ExitFromSelf = ({\n  defect = Unknown,\n  failure,\n  success\n}) => declare([success, failure, defect], {\n  decode: (success, failure, defect) => exitParse(_ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.decodeUnknown(success), _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.decodeUnknown(CauseFromSelf({\n    error: failure,\n    defect\n  }))),\n  encode: (success, failure, defect) => exitParse(_ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.encodeUnknown(success), _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.encodeUnknown(CauseFromSelf({\n    error: failure,\n    defect\n  })))\n}, {\n  description: `Exit<${format(success)}, ${format(failure)}>`,\n  pretty: exitPretty,\n  arbitrary: exitArbitrary\n});\n/**\n * @category Exit transformations\n * @since 1.0.0\n */\nconst Exit = ({\n  defect = CauseDefectUnknown,\n  failure,\n  success\n}) => {\n  const success_ = asSchema(success);\n  const failure_ = asSchema(failure);\n  return transform(exitEncoded(success_, failure_, defect), ExitFromSelf({\n    failure: typeSchema(failure_),\n    success: typeSchema(success_),\n    defect: typeSchema(defect)\n  }), {\n    decode: exitDecode,\n    encode: exit => exit._tag === \"Failure\" ? {\n      _tag: \"Failure\",\n      cause: exit.cause\n    } : {\n      _tag: \"Success\",\n      value: exit.value\n    }\n  });\n};\nconst hashSetArbitrary = item => fc => fc.array(item(fc)).map(as => effect_HashSet__WEBPACK_IMPORTED_MODULE_34__.fromIterable(as));\nconst hashSetPretty = item => set => `HashSet(${Array.from(set).map(a => item(a)).join(\", \")})`;\nconst hashSetEquivalence = item => {\n  const arrayEquivalence = effect_Array__WEBPACK_IMPORTED_MODULE_9__.getEquivalence(item);\n  return effect_Equivalence__WEBPACK_IMPORTED_MODULE_25__.make((a, b) => arrayEquivalence(Array.from(a), Array.from(b)));\n};\nconst hashSetParse = decodeUnknown => (u, options, ast) => effect_HashSet__WEBPACK_IMPORTED_MODULE_34__.isHashSet(u) ? _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.map(decodeUnknown(Array.from(u), options), as => effect_HashSet__WEBPACK_IMPORTED_MODULE_34__.fromIterable(as)) : _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.fail(new _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.Type(ast, u));\n/**\n * @category HashSet transformations\n * @since 1.0.0\n */\nconst HashSetFromSelf = value => {\n  return declare([value], {\n    decode: item => hashSetParse(_ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.decodeUnknown($Array(item))),\n    encode: item => hashSetParse(_ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.encodeUnknown($Array(item)))\n  }, {\n    description: `HashSet<${format(value)}>`,\n    pretty: hashSetPretty,\n    arbitrary: hashSetArbitrary,\n    equivalence: hashSetEquivalence\n  });\n};\n/**\n * @category HashSet transformations\n * @since 1.0.0\n */\nconst HashSet = value => {\n  const value_ = asSchema(value);\n  return transform($Array(value_), HashSetFromSelf(typeSchema(value_)), {\n    decode: as => effect_HashSet__WEBPACK_IMPORTED_MODULE_34__.fromIterable(as),\n    encode: set => Array.from(set)\n  });\n};\nconst hashMapArbitrary = (key, value) => fc => fc.array(fc.tuple(key(fc), value(fc))).map(as => effect_HashMap__WEBPACK_IMPORTED_MODULE_35__.fromIterable(as));\nconst hashMapPretty = (key, value) => map => `HashMap([${Array.from(map).map(([k, v]) => `[${key(k)}, ${value(v)}]`).join(\", \")}])`;\nconst hashMapEquivalence = (key, value) => {\n  const arrayEquivalence = effect_Array__WEBPACK_IMPORTED_MODULE_9__.getEquivalence(effect_Equivalence__WEBPACK_IMPORTED_MODULE_25__.make(([ka, va], [kb, vb]) => key(ka, kb) && value(va, vb)));\n  return effect_Equivalence__WEBPACK_IMPORTED_MODULE_25__.make((a, b) => arrayEquivalence(Array.from(a), Array.from(b)));\n};\nconst hashMapParse = decodeUnknown => (u, options, ast) => effect_HashMap__WEBPACK_IMPORTED_MODULE_35__.isHashMap(u) ? _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.map(decodeUnknown(Array.from(u), options), as => effect_HashMap__WEBPACK_IMPORTED_MODULE_35__.fromIterable(as)) : _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.fail(new _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.Type(ast, u));\n/**\n * @category HashMap transformations\n * @since 1.0.0\n */\nconst HashMapFromSelf = ({\n  key,\n  value\n}) => {\n  return declare([key, value], {\n    decode: (key, value) => hashMapParse(_ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.decodeUnknown($Array(Tuple(key, value)))),\n    encode: (key, value) => hashMapParse(_ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.encodeUnknown($Array(Tuple(key, value))))\n  }, {\n    description: `HashMap<${format(key)}, ${format(value)}>`,\n    pretty: hashMapPretty,\n    arbitrary: hashMapArbitrary,\n    equivalence: hashMapEquivalence\n  });\n};\n/**\n * @category HashMap transformations\n * @since 1.0.0\n */\nconst HashMap = ({\n  key,\n  value\n}) => {\n  const key_ = asSchema(key);\n  const value_ = asSchema(value);\n  return transform($Array(Tuple(key_, value_)), HashMapFromSelf({\n    key: typeSchema(key_),\n    value: typeSchema(value_)\n  }), {\n    decode: as => effect_HashMap__WEBPACK_IMPORTED_MODULE_35__.fromIterable(as),\n    encode: map => Array.from(map)\n  });\n};\nconst listArbitrary = item => fc => fc.array(item(fc)).map(as => effect_List__WEBPACK_IMPORTED_MODULE_36__.fromIterable(as));\nconst listPretty = item => set => `List(${Array.from(set).map(a => item(a)).join(\", \")})`;\nconst listEquivalence = item => {\n  const arrayEquivalence = effect_Array__WEBPACK_IMPORTED_MODULE_9__.getEquivalence(item);\n  return effect_Equivalence__WEBPACK_IMPORTED_MODULE_25__.make((a, b) => arrayEquivalence(Array.from(a), Array.from(b)));\n};\nconst listParse = decodeUnknown => (u, options, ast) => effect_List__WEBPACK_IMPORTED_MODULE_36__.isList(u) ? _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.map(decodeUnknown(Array.from(u), options), as => effect_List__WEBPACK_IMPORTED_MODULE_36__.fromIterable(as)) : _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.fail(new _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.Type(ast, u));\n/**\n * @category List transformations\n * @since 1.0.0\n */\nconst ListFromSelf = value => {\n  return declare([value], {\n    decode: item => listParse(_ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.decodeUnknown($Array(item))),\n    encode: item => listParse(_ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.encodeUnknown($Array(item)))\n  }, {\n    description: `List<${format(value)}>`,\n    pretty: listPretty,\n    arbitrary: listArbitrary,\n    equivalence: listEquivalence\n  });\n};\n/**\n * @category List transformations\n * @since 1.0.0\n */\nconst List = value => {\n  const value_ = asSchema(value);\n  return transform($Array(value_), ListFromSelf(typeSchema(value_)), {\n    decode: as => effect_List__WEBPACK_IMPORTED_MODULE_36__.fromIterable(as),\n    encode: set => Array.from(set)\n  });\n};\nconst sortedSetArbitrary = (item, ord) => fc => fc.array(item(fc)).map(as => effect_SortedSet__WEBPACK_IMPORTED_MODULE_37__.fromIterable(as, ord));\nconst sortedSetPretty = item => set => `new SortedSet([${Array.from(effect_SortedSet__WEBPACK_IMPORTED_MODULE_37__.values(set)).map(a => item(a)).join(\", \")}])`;\nconst sortedSetParse = (decodeUnknown, ord) => (u, options, ast) => effect_SortedSet__WEBPACK_IMPORTED_MODULE_37__.isSortedSet(u) ? _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.map(decodeUnknown(Array.from(effect_SortedSet__WEBPACK_IMPORTED_MODULE_37__.values(u)), options), as => effect_SortedSet__WEBPACK_IMPORTED_MODULE_37__.fromIterable(as, ord)) : _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.fail(new _ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.Type(ast, u));\n/**\n * @category SortedSet transformations\n * @since 1.0.0\n */\nconst SortedSetFromSelf = (value, ordA, ordI) => {\n  return declare([value], {\n    decode: item => sortedSetParse(_ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.decodeUnknown($Array(item)), ordA),\n    encode: item => sortedSetParse(_ParseResult_js__WEBPACK_IMPORTED_MODULE_5__.encodeUnknown($Array(item)), ordI)\n  }, {\n    description: `SortedSet<${format(value)}>`,\n    pretty: sortedSetPretty,\n    arbitrary: arb => sortedSetArbitrary(arb, ordA),\n    equivalence: () => effect_SortedSet__WEBPACK_IMPORTED_MODULE_37__.getEquivalence()\n  });\n};\n/**\n * @category SortedSet transformations\n * @since 1.0.0\n */\nconst SortedSet = (value, ordA) => {\n  const value_ = asSchema(value);\n  const to = typeSchema(value_);\n  return transform($Array(value_), SortedSetFromSelf(to, ordA, ordA), {\n    decode: as => effect_SortedSet__WEBPACK_IMPORTED_MODULE_37__.fromIterable(as, ordA),\n    encode: set => Array.from(effect_SortedSet__WEBPACK_IMPORTED_MODULE_37__.values(set))\n  });\n};\n/**\n * Converts an arbitrary value to a `boolean` by testing whether it is truthy.\n * Uses `!!val` to coerce the value to a `boolean`.\n *\n * @see https://developer.mozilla.org/docs/Glossary/Truthy\n * @category boolean constructors\n * @since 1.0.0\n */\nconst BooleanFromUnknown = /*#__PURE__*/transform(Unknown, $Boolean, {\n  decode: effect_Predicate__WEBPACK_IMPORTED_MODULE_8__.isTruthy,\n  encode: effect_Function__WEBPACK_IMPORTED_MODULE_11__.identity\n}).annotations({\n  identifier: \"BooleanFromUnknown\"\n});\n//# sourceMappingURL=Schema.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVmZmVjdC9zY2hlbWEvZGlzdC9lc20vU2NoZW1hLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDdUM7QUFDVTtBQUNSO0FBQ0U7QUFDSjtBQUNBO0FBQ0E7QUFDRjtBQUNRO0FBQ0w7QUFDQztBQUNHO0FBQ047QUFDWTtBQUNiO0FBQ007QUFDTTtBQUNOO0FBQ0E7QUFDTjtBQUNJO0FBQ0E7QUFDTztBQUNGO0FBQ0o7QUFDRDtBQUNNO0FBQ047QUFDSTtBQUNiO0FBQ2lCO0FBQ0Q7QUFDRTtBQUNVO0FBQ2hCO0FBQ0k7QUFDVDtBQUNhO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUscURBQW9CO0FBQzlCO0FBQ0EsTUFBTTtBQUNOLFVBQVUscURBQW9CO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLHdEQUF1QjtBQUN6QyxxQkFBcUIs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Qyw4QkFBOEIscURBQWlCO0FBQy9DLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLFVBQVUsc0RBQWtCO0FBQzVCLFVBQVUsc0RBQVE7QUFDbEIsQ0FBQztBQUNEO0FBQ0EsQ0FBQztBQUNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWNhZGVteS8uL25vZGVfbW9kdWxlcy9AZWZmZWN0L3NjaGVtYS9kaXN0L2VzbS9TY2hlbWEuanM/ZTE4ZCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5pbXBvcnQgKiBhcyBhcnJheV8gZnJvbSBcImVmZmVjdC9BcnJheVwiO1xuaW1wb3J0ICogYXMgYmlnRGVjaW1hbF8gZnJvbSBcImVmZmVjdC9CaWdEZWNpbWFsXCI7XG5pbXBvcnQgKiBhcyBiaWdJbnRfIGZyb20gXCJlZmZlY3QvQmlnSW50XCI7XG5pbXBvcnQgKiBhcyBib29sZWFuXyBmcm9tIFwiZWZmZWN0L0Jvb2xlYW5cIjtcbmltcG9ydCAqIGFzIGJyYW5kXyBmcm9tIFwiZWZmZWN0L0JyYW5kXCI7XG5pbXBvcnQgKiBhcyBjYXVzZV8gZnJvbSBcImVmZmVjdC9DYXVzZVwiO1xuaW1wb3J0ICogYXMgY2h1bmtfIGZyb20gXCJlZmZlY3QvQ2h1bmtcIjtcbmltcG9ydCAqIGFzIGRhdGFfIGZyb20gXCJlZmZlY3QvRGF0YVwiO1xuaW1wb3J0ICogYXMgZHVyYXRpb25fIGZyb20gXCJlZmZlY3QvRHVyYXRpb25cIjtcbmltcG9ydCAqIGFzIEVmZmVjdCBmcm9tIFwiZWZmZWN0L0VmZmVjdFwiO1xuaW1wb3J0ICogYXMgZWl0aGVyXyBmcm9tIFwiZWZmZWN0L0VpdGhlclwiO1xuaW1wb3J0ICogYXMgRW5jb2RpbmcgZnJvbSBcImVmZmVjdC9FbmNvZGluZ1wiO1xuaW1wb3J0ICogYXMgRXF1YWwgZnJvbSBcImVmZmVjdC9FcXVhbFwiO1xuaW1wb3J0ICogYXMgRXF1aXZhbGVuY2UgZnJvbSBcImVmZmVjdC9FcXVpdmFsZW5jZVwiO1xuaW1wb3J0ICogYXMgZXhpdF8gZnJvbSBcImVmZmVjdC9FeGl0XCI7XG5pbXBvcnQgKiBhcyBmaWJlcklkXyBmcm9tIFwiZWZmZWN0L0ZpYmVySWRcIjtcbmltcG9ydCB7IGR1YWwsIGlkZW50aXR5IH0gZnJvbSBcImVmZmVjdC9GdW5jdGlvblwiO1xuaW1wb3J0ICogYXMgaGFzaE1hcF8gZnJvbSBcImVmZmVjdC9IYXNoTWFwXCI7XG5pbXBvcnQgKiBhcyBoYXNoU2V0XyBmcm9tIFwiZWZmZWN0L0hhc2hTZXRcIjtcbmltcG9ydCAqIGFzIGxpc3RfIGZyb20gXCJlZmZlY3QvTGlzdFwiO1xuaW1wb3J0ICogYXMgbnVtYmVyXyBmcm9tIFwiZWZmZWN0L051bWJlclwiO1xuaW1wb3J0ICogYXMgb3B0aW9uXyBmcm9tIFwiZWZmZWN0L09wdGlvblwiO1xuaW1wb3J0IHsgcGlwZUFyZ3VtZW50cyB9IGZyb20gXCJlZmZlY3QvUGlwZWFibGVcIjtcbmltcG9ydCAqIGFzIFByZWRpY2F0ZSBmcm9tIFwiZWZmZWN0L1ByZWRpY2F0ZVwiO1xuaW1wb3J0ICogYXMgUmVxdWVzdCBmcm9tIFwiZWZmZWN0L1JlcXVlc3RcIjtcbmltcG9ydCAqIGFzIHNlY3JldF8gZnJvbSBcImVmZmVjdC9TZWNyZXRcIjtcbmltcG9ydCAqIGFzIHNvcnRlZFNldF8gZnJvbSBcImVmZmVjdC9Tb3J0ZWRTZXRcIjtcbmltcG9ydCAqIGFzIHN0cmluZ18gZnJvbSBcImVmZmVjdC9TdHJpbmdcIjtcbmltcG9ydCAqIGFzIGFyYml0cmFyeV8gZnJvbSBcIi4vQXJiaXRyYXJ5LmpzXCI7XG5pbXBvcnQgKiBhcyBBU1QgZnJvbSBcIi4vQVNULmpzXCI7XG5pbXBvcnQgKiBhcyBlcXVpdmFsZW5jZV8gZnJvbSBcIi4vRXF1aXZhbGVuY2UuanNcIjtcbmltcG9ydCAqIGFzIGVycm9yc18gZnJvbSBcIi4vaW50ZXJuYWwvZXJyb3JzLmpzXCI7XG5pbXBvcnQgKiBhcyBmaWx0ZXJzXyBmcm9tIFwiLi9pbnRlcm5hbC9maWx0ZXJzLmpzXCI7XG5pbXBvcnQgKiBhcyBzZXJpYWxpemFibGVfIGZyb20gXCIuL2ludGVybmFsL3NlcmlhbGl6YWJsZS5qc1wiO1xuaW1wb3J0ICogYXMgdXRpbF8gZnJvbSBcIi4vaW50ZXJuYWwvdXRpbC5qc1wiO1xuaW1wb3J0ICogYXMgUGFyc2VSZXN1bHQgZnJvbSBcIi4vUGFyc2VSZXN1bHQuanNcIjtcbmltcG9ydCAqIGFzIHByZXR0eV8gZnJvbSBcIi4vUHJldHR5LmpzXCI7XG5pbXBvcnQgKiBhcyBUcmVlRm9ybWF0dGVyIGZyb20gXCIuL1RyZWVGb3JtYXR0ZXIuanNcIjtcbi8qKlxuICogQHNpbmNlIDEuMC4wXG4gKiBAY2F0ZWdvcnkgc3ltYm9sXG4gKi9cbmV4cG9ydCBjb25zdCBUeXBlSWQgPSAvKiNfX1BVUkVfXyovU3ltYm9sLmZvcihcIkBlZmZlY3Qvc2NoZW1hL1NjaGVtYVwiKTtcbmNvbnN0IHZhcmlhbmNlID0ge1xuICAvKiBjOCBpZ25vcmUgbmV4dCAqL1xuICBfQTogXyA9PiBfLFxuICAvKiBjOCBpZ25vcmUgbmV4dCAqL1xuICBfSTogXyA9PiBfLFxuICAvKiBjOCBpZ25vcmUgbmV4dCAqL1xuICBfUjogXyA9PiBfXG59O1xuY29uc3QgdG9BU1RBbm5vdGF0aW9ucyA9IGFubm90YXRpb25zID0+IHtcbiAgaWYgKCFhbm5vdGF0aW9ucykge1xuICAgIHJldHVybiB7fTtcbiAgfVxuICBjb25zdCBvdXQgPSB7fTtcbiAgLy8gc3ltYm9scyBhcmUgcmVzZXJ2ZWQgZm9yIGN1c3RvbSBhbm5vdGF0aW9uc1xuICBjb25zdCBjdXN0b20gPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKGFubm90YXRpb25zKTtcbiAgZm9yIChjb25zdCBzeW0gb2YgY3VzdG9tKSB7XG4gICAgb3V0W3N5bV0gPSBhbm5vdGF0aW9uc1tzeW1dO1xuICB9XG4gIC8vIHN0cmluZyBrZXlzIGFyZSByZXNlcnZlZCBhcyAvc2NoZW1hIG5hbWVzcGFjZVxuICBpZiAoYW5ub3RhdGlvbnMudHlwZUlkICE9PSB1bmRlZmluZWQpIHtcbiAgICBjb25zdCB0eXBlSWQgPSBhbm5vdGF0aW9ucy50eXBlSWQ7XG4gICAgaWYgKHR5cGVvZiB0eXBlSWQgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgIG91dFtBU1QuVHlwZUFubm90YXRpb25JZF0gPSB0eXBlSWQuaWQ7XG4gICAgICBvdXRbdHlwZUlkLmlkXSA9IHR5cGVJZC5hbm5vdGF0aW9uO1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXRbQVNULlR5cGVBbm5vdGF0aW9uSWRdID0gdHlwZUlkO1xuICAgIH1cbiAgfVxuICBjb25zdCBtb3ZlID0gKGZyb20sIHRvKSA9PiB7XG4gICAgaWYgKGFubm90YXRpb25zW2Zyb21dICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIG91dFt0b10gPSBhbm5vdGF0aW9uc1tmcm9tXTtcbiAgICB9XG4gIH07XG4gIG1vdmUoXCJtZXNzYWdlXCIsIEFTVC5NZXNzYWdlQW5ub3RhdGlvbklkKTtcbiAgbW92ZShcImlkZW50aWZpZXJcIiwgQVNULklkZW50aWZpZXJBbm5vdGF0aW9uSWQpO1xuICBtb3ZlKFwidGl0bGVcIiwgQVNULlRpdGxlQW5ub3RhdGlvbklkKTtcbiAgbW92ZShcImRlc2NyaXB0aW9uXCIsIEFTVC5EZXNjcmlwdGlvbkFubm90YXRpb25JZCk7XG4gIG1vdmUoXCJleGFtcGxlc1wiLCBBU1QuRXhhbXBsZXNBbm5vdGF0aW9uSWQpO1xuICBtb3ZlKFwiZGVmYXVsdFwiLCBBU1QuRGVmYXVsdEFubm90YXRpb25JZCk7XG4gIG1vdmUoXCJkb2N1bWVudGF0aW9uXCIsIEFTVC5Eb2N1bWVudGF0aW9uQW5ub3RhdGlvbklkKTtcbiAgbW92ZShcImpzb25TY2hlbWFcIiwgQVNULkpTT05TY2hlbWFBbm5vdGF0aW9uSWQpO1xuICBtb3ZlKFwiYXJiaXRyYXJ5XCIsIGFyYml0cmFyeV8uQXJiaXRyYXJ5SG9va0lkKTtcbiAgbW92ZShcInByZXR0eVwiLCBwcmV0dHlfLlByZXR0eUhvb2tJZCk7XG4gIG1vdmUoXCJlcXVpdmFsZW5jZVwiLCBlcXVpdmFsZW5jZV8uRXF1aXZhbGVuY2VIb29rSWQpO1xuICBtb3ZlKFwiY29uY3VycmVuY3lcIiwgQVNULkNvbmN1cnJlbmN5QW5ub3RhdGlvbklkKTtcbiAgbW92ZShcImJhdGNoaW5nXCIsIEFTVC5CYXRjaGluZ0Fubm90YXRpb25JZCk7XG4gIG1vdmUoXCJwYXJzZUlzc3VlVGl0bGVcIiwgQVNULlBhcnNlSXNzdWVUaXRsZUFubm90YXRpb25JZCk7XG4gIHJldHVybiBvdXQ7XG59O1xuY2xhc3MgU2NoZW1hSW1wbCB7XG4gIGFzdDtcbiAgW1R5cGVJZF0gPSB2YXJpYW5jZTtcbiAgY29uc3RydWN0b3IoYXN0KSB7XG4gICAgdGhpcy5hc3QgPSBhc3Q7XG4gIH1cbiAgcGlwZSgpIHtcbiAgICByZXR1cm4gcGlwZUFyZ3VtZW50cyh0aGlzLCBhcmd1bWVudHMpO1xuICB9XG4gIGFubm90YXRpb25zKGFubm90YXRpb25zKSB7XG4gICAgcmV0dXJuIG5ldyBTY2hlbWFJbXBsKEFTVC5hbm5vdGF0aW9ucyh0aGlzLmFzdCwgdG9BU1RBbm5vdGF0aW9ucyhhbm5vdGF0aW9ucykpKTtcbiAgfVxuICB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gU3RyaW5nKHRoaXMuYXN0KTtcbiAgfVxufVxuLyoqXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IGFzU2NoZW1hID0gc2NoZW1hID0+IHNjaGVtYTtcbi8qKlxuICogQGNhdGVnb3J5IGhhc2hpbmdcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5leHBvcnQgY29uc3QgaGFzaCA9IHNjaGVtYSA9PiBBU1QuaGFzaChzY2hlbWEuYXN0KTtcbi8qKlxuICogQGNhdGVnb3J5IGZvcm1hdHRpbmdcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5leHBvcnQgY29uc3QgZm9ybWF0ID0gc2NoZW1hID0+IFN0cmluZyhzY2hlbWEuYXN0KTtcbi8qKlxuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBlbmNvZGVkU2NoZW1hID0gc2NoZW1hID0+IG1ha2UoQVNULmVuY29kZWRBU1Qoc2NoZW1hLmFzdCkpO1xuLyoqXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IHR5cGVTY2hlbWEgPSBzY2hlbWEgPT4gbWFrZShBU1QudHlwZUFTVChzY2hlbWEuYXN0KSk7XG4vKiBjOCBpZ25vcmUgc3RhcnQgKi9cbmV4cG9ydCB7XG4vKipcbiAqIEBjYXRlZ29yeSB2YWxpZGF0aW9uXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuYXNzZXJ0cyxcbi8qKlxuICogQGNhdGVnb3J5IGRlY29kaW5nXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZGVjb2RlT3B0aW9uLFxuLyoqXG4gKiBAY2F0ZWdvcnkgZGVjb2RpbmdcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5kZWNvZGVTeW5jLFxuLyoqXG4gKiBAY2F0ZWdvcnkgZGVjb2RpbmdcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5kZWNvZGVVbmtub3duT3B0aW9uLFxuLyoqXG4gKiBAY2F0ZWdvcnkgZGVjb2RpbmdcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5kZWNvZGVVbmtub3duU3luYyxcbi8qKlxuICogQGNhdGVnb3J5IGVuY29kaW5nXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZW5jb2RlT3B0aW9uLFxuLyoqXG4gKiBAY2F0ZWdvcnkgZW5jb2RpbmdcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5lbmNvZGVTeW5jLFxuLyoqXG4gKiBAY2F0ZWdvcnkgZW5jb2RpbmdcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5lbmNvZGVVbmtub3duT3B0aW9uLFxuLyoqXG4gKiBAY2F0ZWdvcnkgZW5jb2RpbmdcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5lbmNvZGVVbmtub3duU3luYyxcbi8qKlxuICogQGNhdGVnb3J5IHZhbGlkYXRpb25cbiAqIEBzaW5jZSAxLjAuMFxuICovXG5pcyxcbi8qKlxuICogQGNhdGVnb3J5IHZhbGlkYXRpb25cbiAqIEBzaW5jZSAxLjAuMFxuICovXG52YWxpZGF0ZU9wdGlvbixcbi8qKlxuICogQGNhdGVnb3J5IHZhbGlkYXRpb25cbiAqIEBzaW5jZSAxLjAuMFxuICovXG52YWxpZGF0ZVN5bmMgfSBmcm9tIFwiLi9QYXJzZVJlc3VsdC5qc1wiO1xuLyogYzggaWdub3JlIGVuZCAqL1xuLyoqXG4gKiBAY2F0ZWdvcnkgZW5jb2RpbmdcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5leHBvcnQgY29uc3QgZW5jb2RlVW5rbm93biA9IChzY2hlbWEsIG9wdGlvbnMpID0+IHtcbiAgY29uc3QgZW5jb2RlVW5rbm93biA9IFBhcnNlUmVzdWx0LmVuY29kZVVua25vd24oc2NoZW1hLCBvcHRpb25zKTtcbiAgcmV0dXJuICh1LCBvdmVycmlkZU9wdGlvbnMpID0+IFBhcnNlUmVzdWx0Lm1hcEVycm9yKGVuY29kZVVua25vd24odSwgb3ZlcnJpZGVPcHRpb25zKSwgUGFyc2VSZXN1bHQucGFyc2VFcnJvcik7XG59O1xuLyoqXG4gKiBAY2F0ZWdvcnkgZW5jb2RpbmdcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5leHBvcnQgY29uc3QgZW5jb2RlVW5rbm93bkVpdGhlciA9IChzY2hlbWEsIG9wdGlvbnMpID0+IHtcbiAgY29uc3QgZW5jb2RlVW5rbm93bkVpdGhlciA9IFBhcnNlUmVzdWx0LmVuY29kZVVua25vd25FaXRoZXIoc2NoZW1hLCBvcHRpb25zKTtcbiAgcmV0dXJuICh1LCBvdmVycmlkZU9wdGlvbnMpID0+IGVpdGhlcl8ubWFwTGVmdChlbmNvZGVVbmtub3duRWl0aGVyKHUsIG92ZXJyaWRlT3B0aW9ucyksIFBhcnNlUmVzdWx0LnBhcnNlRXJyb3IpO1xufTtcbi8qKlxuICogQGNhdGVnb3J5IGVuY29kaW5nXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IGVuY29kZVVua25vd25Qcm9taXNlID0gKHNjaGVtYSwgb3B0aW9ucykgPT4ge1xuICBjb25zdCBwYXJzZXIgPSBlbmNvZGVVbmtub3duKHNjaGVtYSwgb3B0aW9ucyk7XG4gIHJldHVybiAodSwgb3ZlcnJpZGVPcHRpb25zKSA9PiBFZmZlY3QucnVuUHJvbWlzZShwYXJzZXIodSwgb3ZlcnJpZGVPcHRpb25zKSk7XG59O1xuLyoqXG4gKiBAY2F0ZWdvcnkgZW5jb2RpbmdcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5leHBvcnQgY29uc3QgZW5jb2RlID0gZW5jb2RlVW5rbm93bjtcbi8qKlxuICogQGNhdGVnb3J5IGVuY29kaW5nXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IGVuY29kZUVpdGhlciA9IGVuY29kZVVua25vd25FaXRoZXI7XG4vKipcbiAqIEBjYXRlZ29yeSBlbmNvZGluZ1xuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBlbmNvZGVQcm9taXNlID0gZW5jb2RlVW5rbm93blByb21pc2U7XG4vKipcbiAqIEBjYXRlZ29yeSBkZWNvZGluZ1xuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBkZWNvZGVVbmtub3duID0gKHNjaGVtYSwgb3B0aW9ucykgPT4ge1xuICBjb25zdCBkZWNvZGVVbmtub3duID0gUGFyc2VSZXN1bHQuZGVjb2RlVW5rbm93bihzY2hlbWEsIG9wdGlvbnMpO1xuICByZXR1cm4gKHUsIG92ZXJyaWRlT3B0aW9ucykgPT4gUGFyc2VSZXN1bHQubWFwRXJyb3IoZGVjb2RlVW5rbm93bih1LCBvdmVycmlkZU9wdGlvbnMpLCBQYXJzZVJlc3VsdC5wYXJzZUVycm9yKTtcbn07XG4vKipcbiAqIEBjYXRlZ29yeSBkZWNvZGluZ1xuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBkZWNvZGVVbmtub3duRWl0aGVyID0gKHNjaGVtYSwgb3B0aW9ucykgPT4ge1xuICBjb25zdCBkZWNvZGVVbmtub3duRWl0aGVyID0gUGFyc2VSZXN1bHQuZGVjb2RlVW5rbm93bkVpdGhlcihzY2hlbWEsIG9wdGlvbnMpO1xuICByZXR1cm4gKHUsIG92ZXJyaWRlT3B0aW9ucykgPT4gZWl0aGVyXy5tYXBMZWZ0KGRlY29kZVVua25vd25FaXRoZXIodSwgb3ZlcnJpZGVPcHRpb25zKSwgUGFyc2VSZXN1bHQucGFyc2VFcnJvcik7XG59O1xuLyoqXG4gKiBAY2F0ZWdvcnkgZGVjb2RpbmdcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5leHBvcnQgY29uc3QgZGVjb2RlVW5rbm93blByb21pc2UgPSAoc2NoZW1hLCBvcHRpb25zKSA9PiB7XG4gIGNvbnN0IHBhcnNlciA9IGRlY29kZVVua25vd24oc2NoZW1hLCBvcHRpb25zKTtcbiAgcmV0dXJuICh1LCBvdmVycmlkZU9wdGlvbnMpID0+IEVmZmVjdC5ydW5Qcm9taXNlKHBhcnNlcih1LCBvdmVycmlkZU9wdGlvbnMpKTtcbn07XG4vKipcbiAqIEBjYXRlZ29yeSBkZWNvZGluZ1xuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBkZWNvZGUgPSBkZWNvZGVVbmtub3duO1xuLyoqXG4gKiBAY2F0ZWdvcnkgZGVjb2RpbmdcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5leHBvcnQgY29uc3QgZGVjb2RlRWl0aGVyID0gZGVjb2RlVW5rbm93bkVpdGhlcjtcbi8qKlxuICogQGNhdGVnb3J5IGRlY29kaW5nXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IGRlY29kZVByb21pc2UgPSBkZWNvZGVVbmtub3duUHJvbWlzZTtcbi8qKlxuICogQGNhdGVnb3J5IHZhbGlkYXRpb25cbiAqIEBzaW5jZSAxLjAuMFxuICovXG5leHBvcnQgY29uc3QgdmFsaWRhdGUgPSAoc2NoZW1hLCBvcHRpb25zKSA9PiB7XG4gIGNvbnN0IHZhbGlkYXRlID0gUGFyc2VSZXN1bHQudmFsaWRhdGUoc2NoZW1hLCBvcHRpb25zKTtcbiAgcmV0dXJuICh1LCBvdmVycmlkZU9wdGlvbnMpID0+IFBhcnNlUmVzdWx0Lm1hcEVycm9yKHZhbGlkYXRlKHUsIG92ZXJyaWRlT3B0aW9ucyksIFBhcnNlUmVzdWx0LnBhcnNlRXJyb3IpO1xufTtcbi8qKlxuICogQGNhdGVnb3J5IHZhbGlkYXRpb25cbiAqIEBzaW5jZSAxLjAuMFxuICovXG5leHBvcnQgY29uc3QgdmFsaWRhdGVFaXRoZXIgPSAoc2NoZW1hLCBvcHRpb25zKSA9PiB7XG4gIGNvbnN0IHZhbGlkYXRlRWl0aGVyID0gUGFyc2VSZXN1bHQudmFsaWRhdGVFaXRoZXIoc2NoZW1hLCBvcHRpb25zKTtcbiAgcmV0dXJuICh1LCBvdmVycmlkZU9wdGlvbnMpID0+IGVpdGhlcl8ubWFwTGVmdCh2YWxpZGF0ZUVpdGhlcih1LCBvdmVycmlkZU9wdGlvbnMpLCBQYXJzZVJlc3VsdC5wYXJzZUVycm9yKTtcbn07XG4vKipcbiAqIEBjYXRlZ29yeSB2YWxpZGF0aW9uXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IHZhbGlkYXRlUHJvbWlzZSA9IChzY2hlbWEsIG9wdGlvbnMpID0+IHtcbiAgY29uc3QgcGFyc2VyID0gdmFsaWRhdGUoc2NoZW1hLCBvcHRpb25zKTtcbiAgcmV0dXJuICh1LCBvdmVycmlkZU9wdGlvbnMpID0+IEVmZmVjdC5ydW5Qcm9taXNlKHBhcnNlcih1LCBvdmVycmlkZU9wdGlvbnMpKTtcbn07XG4vKipcbiAqIFRlc3RzIGlmIGEgdmFsdWUgaXMgYSBgU2NoZW1hYC5cbiAqXG4gKiBAY2F0ZWdvcnkgZ3VhcmRzXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IGlzU2NoZW1hID0gdSA9PiBQcmVkaWNhdGUuaGFzUHJvcGVydHkodSwgVHlwZUlkKSAmJiBQcmVkaWNhdGUuaXNPYmplY3QodVtUeXBlSWRdKTtcbi8qKlxuICogQGNhdGVnb3J5IGNvbnN0cnVjdG9yc1xuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBtYWtlID0gYXN0ID0+IG5ldyBTY2hlbWFJbXBsKGFzdCk7XG5jbGFzcyBMaXRlcmFsSW1wbCBleHRlbmRzIFNjaGVtYUltcGwge1xuICBzdGF0aWMgYXN0ID0gbGl0ZXJhbHMgPT4ge1xuICAgIHJldHVybiBBU1QuaXNNZW1iZXJzKGxpdGVyYWxzKSA/IEFTVC5Vbmlvbi5tYWtlKEFTVC5tYXBNZW1iZXJzKGxpdGVyYWxzLCBsaXRlcmFsID0+IG5ldyBBU1QuTGl0ZXJhbChsaXRlcmFsKSkpIDogbmV3IEFTVC5MaXRlcmFsKGxpdGVyYWxzWzBdKTtcbiAgfTtcbiAgbGl0ZXJhbHM7XG4gIGNvbnN0cnVjdG9yKGxpdGVyYWxzLCBhc3QgPSBMaXRlcmFsSW1wbC5hc3QobGl0ZXJhbHMpKSB7XG4gICAgc3VwZXIoYXN0KTtcbiAgICB0aGlzLmxpdGVyYWxzID0gWy4uLmxpdGVyYWxzXTtcbiAgfVxuICBhbm5vdGF0aW9ucyhhbm5vdGF0aW9ucykge1xuICAgIHJldHVybiBuZXcgTGl0ZXJhbEltcGwodGhpcy5saXRlcmFscywgQVNULmFubm90YXRpb25zKHRoaXMuYXN0LCB0b0FTVEFubm90YXRpb25zKGFubm90YXRpb25zKSkpO1xuICB9XG59XG5leHBvcnQgZnVuY3Rpb24gTGl0ZXJhbCguLi5saXRlcmFscykge1xuICByZXR1cm4gYXJyYXlfLmlzTm9uRW1wdHlSZWFkb25seUFycmF5KGxpdGVyYWxzKSA/IG5ldyBMaXRlcmFsSW1wbChsaXRlcmFscykgOiBOZXZlcjtcbn1cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBgU2NoZW1hYCBmcm9tIGEgbGl0ZXJhbCBzY2hlbWEuXG4gKlxuICogQGV4YW1wbGVcbiAqIGltcG9ydCAqIGFzIFMgZnJvbSBcIkBlZmZlY3Qvc2NoZW1hL1NjaGVtYVwiXG4gKiBpbXBvcnQgeyBFaXRoZXIgfSBmcm9tIFwiZWZmZWN0XCJcbiAqXG4gKiBjb25zdCBzY2hlbWEgPSBTLkxpdGVyYWwoXCJhXCIsIFwiYlwiLCBcImNcIikucGlwZShTLnBpY2tMaXRlcmFsKFwiYVwiLCBcImJcIikpXG4gKlxuICogYXNzZXJ0LmRlZXBTdHJpY3RFcXVhbChTLmRlY29kZVN5bmMoc2NoZW1hKShcImFcIiksIFwiYVwiKVxuICogYXNzZXJ0LmRlZXBTdHJpY3RFcXVhbChTLmRlY29kZVN5bmMoc2NoZW1hKShcImJcIiksIFwiYlwiKVxuICogYXNzZXJ0LnN0cmljdEVxdWFsKEVpdGhlci5pc0xlZnQoUy5kZWNvZGVVbmtub3duRWl0aGVyKHNjaGVtYSkoXCJjXCIpKSwgdHJ1ZSlcbiAqXG4gKiBAY2F0ZWdvcnkgY29uc3RydWN0b3JzXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IHBpY2tMaXRlcmFsID0gKC4uLmxpdGVyYWxzKSA9PiBfc2NoZW1hID0+IExpdGVyYWwoLi4ubGl0ZXJhbHMpO1xuLyoqXG4gKiBAY2F0ZWdvcnkgY29uc3RydWN0b3JzXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IFVuaXF1ZVN5bWJvbEZyb21TZWxmID0gc3ltYm9sID0+IG1ha2UobmV3IEFTVC5VbmlxdWVTeW1ib2woc3ltYm9sKSk7XG5jbGFzcyBFbnVtc0ltcGwgZXh0ZW5kcyBTY2hlbWFJbXBsIHtcbiAgZW51bXM7XG4gIHN0YXRpYyBhc3QgPSBlbnVtcyA9PiB7XG4gICAgcmV0dXJuIG5ldyBBU1QuRW51bXMoT2JqZWN0LmtleXMoZW51bXMpLmZpbHRlcihrZXkgPT4gdHlwZW9mIGVudW1zW2VudW1zW2tleV1dICE9PSBcIm51bWJlclwiKS5tYXAoa2V5ID0+IFtrZXksIGVudW1zW2tleV1dKSk7XG4gIH07XG4gIGNvbnN0cnVjdG9yKGVudW1zLCBhc3QgPSBFbnVtc0ltcGwuYXN0KGVudW1zKSkge1xuICAgIHN1cGVyKGFzdCk7XG4gICAgdGhpcy5lbnVtcyA9IGVudW1zO1xuICB9XG4gIGFubm90YXRpb25zKGFubm90YXRpb25zKSB7XG4gICAgcmV0dXJuIG5ldyBFbnVtc0ltcGwodGhpcy5lbnVtcywgQVNULmFubm90YXRpb25zKHRoaXMuYXN0LCB0b0FTVEFubm90YXRpb25zKGFubm90YXRpb25zKSkpO1xuICB9XG59XG4vKipcbiAqIEBjYXRlZ29yeSBjb25zdHJ1Y3RvcnNcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5leHBvcnQgY29uc3QgRW51bXMgPSBlbnVtcyA9PiBuZXcgRW51bXNJbXBsKGVudW1zKTtcbi8qKlxuICogQGNhdGVnb3J5IGNvbnN0cnVjdG9yc1xuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBUZW1wbGF0ZUxpdGVyYWwgPSAoLi4uW2hlYWQsIC4uLnRhaWxdKSA9PiB7XG4gIGxldCB0eXBlcyA9IGdldFRlbXBsYXRlTGl0ZXJhbHMoaGVhZC5hc3QpO1xuICBmb3IgKGNvbnN0IHNwYW4gb2YgdGFpbCkge1xuICAgIHR5cGVzID0gYXJyYXlfLmZsYXRNYXAodHlwZXMsIGEgPT4gZ2V0VGVtcGxhdGVMaXRlcmFscyhzcGFuLmFzdCkubWFwKGIgPT4gY29tYmluZVRlbXBsYXRlTGl0ZXJhbHMoYSwgYikpKTtcbiAgfVxuICByZXR1cm4gbWFrZShBU1QuVW5pb24ubWFrZSh0eXBlcykpO1xufTtcbmNvbnN0IGNvbWJpbmVUZW1wbGF0ZUxpdGVyYWxzID0gKGEsIGIpID0+IHtcbiAgaWYgKEFTVC5pc0xpdGVyYWwoYSkpIHtcbiAgICByZXR1cm4gQVNULmlzTGl0ZXJhbChiKSA/IG5ldyBBU1QuTGl0ZXJhbChTdHJpbmcoYS5saXRlcmFsKSArIFN0cmluZyhiLmxpdGVyYWwpKSA6IEFTVC5UZW1wbGF0ZUxpdGVyYWwubWFrZShTdHJpbmcoYS5saXRlcmFsKSArIGIuaGVhZCwgYi5zcGFucyk7XG4gIH1cbiAgaWYgKEFTVC5pc0xpdGVyYWwoYikpIHtcbiAgICByZXR1cm4gQVNULlRlbXBsYXRlTGl0ZXJhbC5tYWtlKGEuaGVhZCwgYXJyYXlfLm1vZGlmeU5vbkVtcHR5TGFzdChhLnNwYW5zLCBzcGFuID0+IG5ldyBBU1QuVGVtcGxhdGVMaXRlcmFsU3BhbihzcGFuLnR5cGUsIHNwYW4ubGl0ZXJhbCArIFN0cmluZyhiLmxpdGVyYWwpKSkpO1xuICB9XG4gIHJldHVybiBBU1QuVGVtcGxhdGVMaXRlcmFsLm1ha2UoYS5oZWFkLCBhcnJheV8uYXBwZW5kQWxsKGFycmF5Xy5tb2RpZnlOb25FbXB0eUxhc3QoYS5zcGFucywgc3BhbiA9PiBuZXcgQVNULlRlbXBsYXRlTGl0ZXJhbFNwYW4oc3Bhbi50eXBlLCBzcGFuLmxpdGVyYWwgKyBTdHJpbmcoYi5oZWFkKSkpLCBiLnNwYW5zKSk7XG59O1xuY29uc3QgZ2V0VGVtcGxhdGVMaXRlcmFscyA9IGFzdCA9PiB7XG4gIHN3aXRjaCAoYXN0Ll90YWcpIHtcbiAgICBjYXNlIFwiTGl0ZXJhbFwiOlxuICAgICAgcmV0dXJuIFthc3RdO1xuICAgIGNhc2UgXCJOdW1iZXJLZXl3b3JkXCI6XG4gICAgY2FzZSBcIlN0cmluZ0tleXdvcmRcIjpcbiAgICAgIHJldHVybiBbQVNULlRlbXBsYXRlTGl0ZXJhbC5tYWtlKFwiXCIsIFtuZXcgQVNULlRlbXBsYXRlTGl0ZXJhbFNwYW4oYXN0LCBcIlwiKV0pXTtcbiAgICBjYXNlIFwiVW5pb25cIjpcbiAgICAgIHJldHVybiBhcnJheV8uZmxhdE1hcChhc3QudHlwZXMsIGdldFRlbXBsYXRlTGl0ZXJhbHMpO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYHVuc3VwcG9ydGVkIHRlbXBsYXRlIGxpdGVyYWwgc3BhbiAoJHthc3R9KWApO1xuICB9XG59O1xuY29uc3QgZGVjbGFyZUNvbnN0cnVjdG9yID0gKHR5cGVQYXJhbWV0ZXJzLCBvcHRpb25zLCBhbm5vdGF0aW9ucykgPT4gbWFrZShuZXcgQVNULkRlY2xhcmF0aW9uKHR5cGVQYXJhbWV0ZXJzLm1hcCh0cCA9PiB0cC5hc3QpLCAoLi4udHlwZVBhcmFtZXRlcnMpID0+IG9wdGlvbnMuZGVjb2RlKC4uLnR5cGVQYXJhbWV0ZXJzLm1hcChtYWtlKSksICguLi50eXBlUGFyYW1ldGVycykgPT4gb3B0aW9ucy5lbmNvZGUoLi4udHlwZVBhcmFtZXRlcnMubWFwKG1ha2UpKSwgdG9BU1RBbm5vdGF0aW9ucyhhbm5vdGF0aW9ucykpKTtcbmNvbnN0IGRlY2xhcmVQcmltaXRpdmUgPSAoaXMsIGFubm90YXRpb25zKSA9PiB7XG4gIGNvbnN0IGRlY29kZVVua25vd24gPSAoKSA9PiAoaW5wdXQsIF8sIGFzdCkgPT4gaXMoaW5wdXQpID8gUGFyc2VSZXN1bHQuc3VjY2VlZChpbnB1dCkgOiBQYXJzZVJlc3VsdC5mYWlsKG5ldyBQYXJzZVJlc3VsdC5UeXBlKGFzdCwgaW5wdXQpKTtcbiAgY29uc3QgZW5jb2RlVW5rbm93biA9IGRlY29kZVVua25vd247XG4gIHJldHVybiBtYWtlKG5ldyBBU1QuRGVjbGFyYXRpb24oW10sIGRlY29kZVVua25vd24sIGVuY29kZVVua25vd24sIHRvQVNUQW5ub3RhdGlvbnMoYW5ub3RhdGlvbnMpKSk7XG59O1xuLyoqXG4gKiBUaGUgY29uc3RyYWludCBgUiBleHRlbmRzIFNjaGVtYS5Db250ZXh0PFBbbnVtYmVyXT5gIGVuZm9yY2VzIGRlcGVuZGVuY2llcyBzb2xlbHkgZnJvbSBgdHlwZVBhcmFtZXRlcnNgLlxuICogVGhpcyBlbnN1cmVzIHRoYXQgd2hlbiB5b3UgY2FsbCBgU2NoZW1hLnRvYCBvciBgU2NoZW1hLmZyb21gLCB5b3UgcmVjZWl2ZSBhIHNjaGVtYSB3aXRoIGEgYG5ldmVyYCBjb250ZXh0LlxuICpcbiAqIEBjYXRlZ29yeSBjb25zdHJ1Y3RvcnNcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5leHBvcnQgY29uc3QgZGVjbGFyZSA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJndW1lbnRzWzBdKSkge1xuICAgIGNvbnN0IHR5cGVQYXJhbWV0ZXJzID0gYXJndW1lbnRzWzBdO1xuICAgIGNvbnN0IG9wdGlvbnMgPSBhcmd1bWVudHNbMV07XG4gICAgY29uc3QgYW5ub3RhdGlvbnMgPSBhcmd1bWVudHNbMl07XG4gICAgcmV0dXJuIGRlY2xhcmVDb25zdHJ1Y3Rvcih0eXBlUGFyYW1ldGVycywgb3B0aW9ucywgYW5ub3RhdGlvbnMpO1xuICB9XG4gIGNvbnN0IGlzID0gYXJndW1lbnRzWzBdO1xuICBjb25zdCBhbm5vdGF0aW9ucyA9IGFyZ3VtZW50c1sxXTtcbiAgcmV0dXJuIGRlY2xhcmVQcmltaXRpdmUoaXMsIGFubm90YXRpb25zKTtcbn07XG4vKipcbiAqIEBjYXRlZ29yeSB0eXBlIGlkXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IEJyYW5kVHlwZUlkID0gLyojX19QVVJFX18qL1N5bWJvbC5mb3IoXCJAZWZmZWN0L3NjaGVtYS9UeXBlSWQvQnJhbmRcIik7XG4vKipcbiAqIEBjYXRlZ29yeSBjb25zdHJ1Y3RvcnNcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5leHBvcnQgY29uc3QgZnJvbUJyYW5kID0gKGNvbnN0cnVjdG9yLCBhbm5vdGF0aW9ucykgPT4gc2VsZiA9PiBtYWtlKG5ldyBBU1QuUmVmaW5lbWVudChzZWxmLmFzdCwgKGEsIF8sIGFzdCkgPT4ge1xuICBjb25zdCBlaXRoZXIgPSBjb25zdHJ1Y3Rvci5laXRoZXIoYSk7XG4gIHJldHVybiBlaXRoZXJfLmlzTGVmdChlaXRoZXIpID8gb3B0aW9uXy5zb21lKG5ldyBQYXJzZVJlc3VsdC5UeXBlKGFzdCwgYSwgZWl0aGVyLmxlZnQubWFwKHYgPT4gdi5tZXNzYWdlKS5qb2luKFwiLCBcIikpKSA6IG9wdGlvbl8ubm9uZSgpO1xufSwgdG9BU1RBbm5vdGF0aW9ucyh7XG4gIHR5cGVJZDoge1xuICAgIGlkOiBCcmFuZFR5cGVJZCxcbiAgICBhbm5vdGF0aW9uOiB7XG4gICAgICBjb25zdHJ1Y3RvclxuICAgIH1cbiAgfSxcbiAgLi4uYW5ub3RhdGlvbnNcbn0pKSk7XG4vKipcbiAqIEBjYXRlZ29yeSB0eXBlIGlkXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IEluc3RhbmNlT2ZUeXBlSWQgPSAvKiNfX1BVUkVfXyovU3ltYm9sLmZvcihcIkBlZmZlY3Qvc2NoZW1hL1R5cGVJZC9JbnN0YW5jZU9mXCIpO1xuLyoqXG4gKiBAY2F0ZWdvcnkgY29uc3RydWN0b3JzXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IGluc3RhbmNlT2YgPSAoY29uc3RydWN0b3IsIGFubm90YXRpb25zKSA9PiBkZWNsYXJlKHUgPT4gdSBpbnN0YW5jZW9mIGNvbnN0cnVjdG9yLCB7XG4gIHRpdGxlOiBjb25zdHJ1Y3Rvci5uYW1lLFxuICBkZXNjcmlwdGlvbjogYGFuIGluc3RhbmNlIG9mICR7Y29uc3RydWN0b3IubmFtZX1gLFxuICBwcmV0dHk6ICgpID0+IFN0cmluZyxcbiAgdHlwZUlkOiB7XG4gICAgaWQ6IEluc3RhbmNlT2ZUeXBlSWQsXG4gICAgYW5ub3RhdGlvbjoge1xuICAgICAgY29uc3RydWN0b3JcbiAgICB9XG4gIH0sXG4gIC4uLmFubm90YXRpb25zXG59KTtcbi8qKlxuICogQGNhdGVnb3J5IHByaW1pdGl2ZXNcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5leHBvcnQgY29uc3QgVW5kZWZpbmVkID0gLyojX19QVVJFX18qL21ha2UoQVNULnVuZGVmaW5lZEtleXdvcmQpO1xuLyoqXG4gKiBAY2F0ZWdvcnkgcHJpbWl0aXZlc1xuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBWb2lkID0gLyojX19QVVJFX18qL21ha2UoQVNULnZvaWRLZXl3b3JkKTtcbi8qKlxuICogQGNhdGVnb3J5IHByaW1pdGl2ZXNcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5leHBvcnQgY29uc3QgTnVsbCA9IC8qI19fUFVSRV9fKi9tYWtlKEFTVC5udWxsKTtcbi8qKlxuICogQGNhdGVnb3J5IHByaW1pdGl2ZXNcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5leHBvcnQgY29uc3QgTmV2ZXIgPSAvKiNfX1BVUkVfXyovbWFrZShBU1QubmV2ZXJLZXl3b3JkKTtcbi8qKlxuICogQGNhdGVnb3J5IHByaW1pdGl2ZXNcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5leHBvcnQgY29uc3QgVW5rbm93biA9IC8qI19fUFVSRV9fKi9tYWtlKEFTVC51bmtub3duS2V5d29yZCk7XG4vKipcbiAqIEBjYXRlZ29yeSBwcmltaXRpdmVzXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IEFueSA9IC8qI19fUFVSRV9fKi9tYWtlKEFTVC5hbnlLZXl3b3JkKTtcbmNvbnN0ICRTdHJpbmcgPSAvKiNfX1BVUkVfXyovbWFrZShBU1Quc3RyaW5nS2V5d29yZCk7XG5jb25zdCAkTnVtYmVyID0gLyojX19QVVJFX18qL21ha2UoQVNULm51bWJlcktleXdvcmQpO1xuY29uc3QgJEJvb2xlYW4gPSAvKiNfX1BVUkVfXyovbWFrZShBU1QuYm9vbGVhbktleXdvcmQpO1xuLyoqXG4gKiBAY2F0ZWdvcnkgcHJpbWl0aXZlc1xuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBCaWdJbnRGcm9tU2VsZiA9IC8qI19fUFVSRV9fKi9tYWtlKEFTVC5iaWdJbnRLZXl3b3JkKTtcbi8qKlxuICogQGNhdGVnb3J5IHByaW1pdGl2ZXNcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5leHBvcnQgY29uc3QgU3ltYm9sRnJvbVNlbGYgPSAvKiNfX1BVUkVfXyovbWFrZShBU1Quc3ltYm9sS2V5d29yZCk7XG5jb25zdCAkT2JqZWN0ID0gLyojX19QVVJFX18qL21ha2UoQVNULm9iamVjdEtleXdvcmQpO1xuZXhwb3J0IHtcbi8qKlxuICogQGNhdGVnb3J5IHByaW1pdGl2ZXNcbiAqIEBzaW5jZSAxLjAuMFxuICovXG4kQm9vbGVhbiBhcyBCb29sZWFuLFxuLyoqXG4gKiBAY2F0ZWdvcnkgcHJpbWl0aXZlc1xuICogQHNpbmNlIDEuMC4wXG4gKi9cbiROdW1iZXIgYXMgTnVtYmVyLFxuLyoqXG4gKiBAY2F0ZWdvcnkgcHJpbWl0aXZlc1xuICogQHNpbmNlIDEuMC4wXG4gKi9cbiRPYmplY3QgYXMgT2JqZWN0LFxuLyoqXG4gKiBAY2F0ZWdvcnkgcHJpbWl0aXZlc1xuICogQHNpbmNlIDEuMC4wXG4gKi9cbiRTdHJpbmcgYXMgU3RyaW5nIH07XG5jbGFzcyBVbmlvbkltcGwgZXh0ZW5kcyBTY2hlbWFJbXBsIHtcbiAgc3RhdGljIGFzdCA9IG1lbWJlcnMgPT4ge1xuICAgIHJldHVybiBBU1QuVW5pb24ubWVtYmVycyhtZW1iZXJzLm1hcChtID0+IG0uYXN0KSk7XG4gIH07XG4gIG1lbWJlcnM7XG4gIGNvbnN0cnVjdG9yKG1lbWJlcnMsIGFzdCA9IFVuaW9uSW1wbC5hc3QobWVtYmVycykpIHtcbiAgICBzdXBlcihhc3QpO1xuICAgIHRoaXMubWVtYmVycyA9IFsuLi5tZW1iZXJzXTtcbiAgfVxuICBhbm5vdGF0aW9ucyhhbm5vdGF0aW9ucykge1xuICAgIHJldHVybiBuZXcgVW5pb25JbXBsKHRoaXMubWVtYmVycywgQVNULmFubm90YXRpb25zKHRoaXMuYXN0LCB0b0FTVEFubm90YXRpb25zKGFubm90YXRpb25zKSkpO1xuICB9XG59XG5leHBvcnQgZnVuY3Rpb24gVW5pb24oLi4ubWVtYmVycykge1xuICByZXR1cm4gQVNULmlzTWVtYmVycyhtZW1iZXJzKSA/IG5ldyBVbmlvbkltcGwobWVtYmVycykgOiBhcnJheV8uaXNOb25FbXB0eVJlYWRvbmx5QXJyYXkobWVtYmVycykgPyBtZW1iZXJzWzBdIDogTmV2ZXI7XG59XG4vKipcbiAqIEBjYXRlZ29yeSBjb21iaW5hdG9yc1xuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBOdWxsT3IgPSBzZWxmID0+IFVuaW9uKHNlbGYsIE51bGwpO1xuLyoqXG4gKiBAY2F0ZWdvcnkgY29tYmluYXRvcnNcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5leHBvcnQgY29uc3QgVW5kZWZpbmVkT3IgPSBzZWxmID0+IFVuaW9uKHNlbGYsIFVuZGVmaW5lZCk7XG4vKipcbiAqIEBjYXRlZ29yeSBjb21iaW5hdG9yc1xuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBOdWxsaXNoT3IgPSBzZWxmID0+IFVuaW9uKHNlbGYsIE51bGwsIFVuZGVmaW5lZCk7XG4vKipcbiAqIEBjYXRlZ29yeSBjb21iaW5hdG9yc1xuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBrZXlvZiA9IHNlbGYgPT4gbWFrZShBU1Qua2V5b2Yoc2VsZi5hc3QpKTtcbi8qKlxuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBvcHRpb25hbEVsZW1lbnQgPSBzZWxmID0+IG5ldyBPcHRpb25hbEVsZW1lbnRJbXBsKHNlbGYpO1xuY2xhc3MgT3B0aW9uYWxFbGVtZW50SW1wbCB7XG4gIG9wdGlvbmFsRWxlbWVudDtcbiAgW1R5cGVJZF07XG4gIGNvbnN0cnVjdG9yKG9wdGlvbmFsRWxlbWVudCkge1xuICAgIHRoaXMub3B0aW9uYWxFbGVtZW50ID0gb3B0aW9uYWxFbGVtZW50O1xuICB9XG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiBgJHt0aGlzLm9wdGlvbmFsRWxlbWVudC5hc3R9P2A7XG4gIH1cbn1cbmNsYXNzIFR1cGxlVHlwZUltcGwgZXh0ZW5kcyBTY2hlbWFJbXBsIHtcbiAgZWxlbWVudHM7XG4gIHJlc3Q7XG4gIHN0YXRpYyBhc3QgPSAoZWxlbWVudHMsIHJlc3QpID0+IHtcbiAgICByZXR1cm4gbmV3IEFTVC5UdXBsZVR5cGUoZWxlbWVudHMubWFwKHNjaGVtYSA9PiBpc1NjaGVtYShzY2hlbWEpID8gbmV3IEFTVC5FbGVtZW50KHNjaGVtYS5hc3QsIGZhbHNlKSA6IG5ldyBBU1QuRWxlbWVudChzY2hlbWEub3B0aW9uYWxFbGVtZW50LmFzdCwgdHJ1ZSkpLCByZXN0Lm1hcChlID0+IGUuYXN0KSwgdHJ1ZSk7XG4gIH07XG4gIGNvbnN0cnVjdG9yKGVsZW1lbnRzLCByZXN0LCBhc3QgPSBUdXBsZVR5cGVJbXBsLmFzdChlbGVtZW50cywgcmVzdCkpIHtcbiAgICBzdXBlcihhc3QpO1xuICAgIHRoaXMuZWxlbWVudHMgPSBlbGVtZW50cztcbiAgICB0aGlzLnJlc3QgPSByZXN0O1xuICB9XG4gIGFubm90YXRpb25zKGFubm90YXRpb25zKSB7XG4gICAgcmV0dXJuIG5ldyBUdXBsZVR5cGVJbXBsKHRoaXMuZWxlbWVudHMsIHRoaXMucmVzdCwgQVNULmFubm90YXRpb25zKHRoaXMuYXN0LCB0b0FTVEFubm90YXRpb25zKGFubm90YXRpb25zKSkpO1xuICB9XG59XG5leHBvcnQgZnVuY3Rpb24gVHVwbGUoLi4uYXJncykge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheShhcmdzWzBdKSA/IG5ldyBUdXBsZVR5cGVJbXBsKGFyZ3NbMF0sIGFyZ3Muc2xpY2UoMSkpIDogbmV3IFR1cGxlVHlwZUltcGwoYXJncywgW10pO1xufVxuY2xhc3MgJEFycmF5SW1wbCBleHRlbmRzIFR1cGxlVHlwZUltcGwge1xuICB2YWx1ZTtcbiAgY29uc3RydWN0b3IodmFsdWUsIGFzdCkge1xuICAgIHN1cGVyKFtdLCBbdmFsdWVdLCBhc3QpO1xuICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgfVxuICBhbm5vdGF0aW9ucyhhbm5vdGF0aW9ucykge1xuICAgIHJldHVybiBuZXcgJEFycmF5SW1wbCh0aGlzLnZhbHVlLCBBU1QuYW5ub3RhdGlvbnModGhpcy5hc3QsIHRvQVNUQW5ub3RhdGlvbnMoYW5ub3RhdGlvbnMpKSk7XG4gIH1cbn1cbmNvbnN0ICRBcnJheSA9IHZhbHVlID0+IG5ldyAkQXJyYXlJbXBsKHZhbHVlKTtcbmV4cG9ydCB7XG4vKipcbiAqIEBjYXRlZ29yeSBjb25zdHJ1Y3RvcnNcbiAqIEBzaW5jZSAxLjAuMFxuICovXG4kQXJyYXkgYXMgQXJyYXkgfTtcbmNsYXNzIE5vbkVtcHR5QXJyYXlJbXBsIGV4dGVuZHMgVHVwbGVUeXBlSW1wbCB7XG4gIHZhbHVlO1xuICBjb25zdHJ1Y3Rvcih2YWx1ZSwgYXN0KSB7XG4gICAgc3VwZXIoW3ZhbHVlXSwgW3ZhbHVlXSwgYXN0KTtcbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gIH1cbiAgYW5ub3RhdGlvbnMoYW5ub3RhdGlvbnMpIHtcbiAgICByZXR1cm4gbmV3IE5vbkVtcHR5QXJyYXlJbXBsKHRoaXMudmFsdWUsIEFTVC5hbm5vdGF0aW9ucyh0aGlzLmFzdCwgdG9BU1RBbm5vdGF0aW9ucyhhbm5vdGF0aW9ucykpKTtcbiAgfVxufVxuLyoqXG4gKiBAY2F0ZWdvcnkgY29uc3RydWN0b3JzXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IE5vbkVtcHR5QXJyYXkgPSB2YWx1ZSA9PiBuZXcgTm9uRW1wdHlBcnJheUltcGwodmFsdWUpO1xuY29uc3QgZm9ybWF0VG9rZW4gPSBpc09wdGlvbmFsID0+IGlzT3B0aW9uYWwgPyBcIlxcXCI/OlxcXCJcIiA6IFwiXFxcIjpcXFwiXCI7XG4vKipcbiAqIEBjYXRlZ29yeSBQcm9wZXJ0eVNpZ25hdHVyZVxuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjbGFzcyBQcm9wZXJ0eVNpZ25hdHVyZURlY2xhcmF0aW9uIHtcbiAgdHlwZTtcbiAgaXNPcHRpb25hbDtcbiAgaXNSZWFkb25seTtcbiAgYW5ub3RhdGlvbnM7XG4gIC8qKlxuICAgKiBAc2luY2UgMS4wLjBcbiAgICovXG4gIF90YWcgPSBcIlByb3BlcnR5U2lnbmF0dXJlRGVjbGFyYXRpb25cIjtcbiAgY29uc3RydWN0b3IodHlwZSwgaXNPcHRpb25hbCwgaXNSZWFkb25seSwgYW5ub3RhdGlvbnMpIHtcbiAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgIHRoaXMuaXNPcHRpb25hbCA9IGlzT3B0aW9uYWw7XG4gICAgdGhpcy5pc1JlYWRvbmx5ID0gaXNSZWFkb25seTtcbiAgICB0aGlzLmFubm90YXRpb25zID0gYW5ub3RhdGlvbnM7XG4gIH1cbiAgLyoqXG4gICAqIEBzaW5jZSAxLjAuMFxuICAgKi9cbiAgdG9TdHJpbmcoKSB7XG4gICAgY29uc3QgdG9rZW4gPSBmb3JtYXRUb2tlbih0aGlzLmlzT3B0aW9uYWwpO1xuICAgIGNvbnN0IHR5cGUgPSBTdHJpbmcodGhpcy50eXBlKTtcbiAgICByZXR1cm4gYFByb3BlcnR5U2lnbmF0dXJlPCR7dG9rZW59LCAke3R5cGV9LCBuZXZlciwgJHt0b2tlbn0sICR7dHlwZX0+YDtcbiAgfVxufVxuLyoqXG4gKiBAY2F0ZWdvcnkgUHJvcGVydHlTaWduYXR1cmVcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5leHBvcnQgY2xhc3MgRnJvbVByb3BlcnR5U2lnbmF0dXJlIHtcbiAgdHlwZTtcbiAgaXNPcHRpb25hbDtcbiAgaXNSZWFkb25seTtcbiAgYW5ub3RhdGlvbnM7XG4gIGZyb21LZXk7XG4gIGNvbnN0cnVjdG9yKHR5cGUsIGlzT3B0aW9uYWwsIGlzUmVhZG9ubHksIGFubm90YXRpb25zLCBmcm9tS2V5KSB7XG4gICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICB0aGlzLmlzT3B0aW9uYWwgPSBpc09wdGlvbmFsO1xuICAgIHRoaXMuaXNSZWFkb25seSA9IGlzUmVhZG9ubHk7XG4gICAgdGhpcy5hbm5vdGF0aW9ucyA9IGFubm90YXRpb25zO1xuICAgIHRoaXMuZnJvbUtleSA9IGZyb21LZXk7XG4gIH1cbn1cbi8qKlxuICogQGNhdGVnb3J5IFByb3BlcnR5U2lnbmF0dXJlXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZXhwb3J0IGNsYXNzIFRvUHJvcGVydHlTaWduYXR1cmUge1xuICB0eXBlO1xuICBpc09wdGlvbmFsO1xuICBpc1JlYWRvbmx5O1xuICBhbm5vdGF0aW9ucztcbiAgY29uc3RydWN0b3IodHlwZSwgaXNPcHRpb25hbCwgaXNSZWFkb25seSwgYW5ub3RhdGlvbnMpIHtcbiAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgIHRoaXMuaXNPcHRpb25hbCA9IGlzT3B0aW9uYWw7XG4gICAgdGhpcy5pc1JlYWRvbmx5ID0gaXNSZWFkb25seTtcbiAgICB0aGlzLmFubm90YXRpb25zID0gYW5ub3RhdGlvbnM7XG4gIH1cbn1cbmNvbnN0IGZvcm1hdFByb3BlcnR5S2V5ID0gcCA9PiB7XG4gIGlmIChwID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gXCJuZXZlclwiO1xuICB9XG4gIGlmIChQcmVkaWNhdGUuaXNTdHJpbmcocCkpIHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkocCk7XG4gIH1cbiAgcmV0dXJuIFN0cmluZyhwKTtcbn07XG4vKipcbiAqIEBjYXRlZ29yeSBQcm9wZXJ0eVNpZ25hdHVyZVxuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjbGFzcyBQcm9wZXJ0eVNpZ25hdHVyZVRyYW5zZm9ybWF0aW9uIHtcbiAgZnJvbTtcbiAgdG87XG4gIGRlY29kZTtcbiAgZW5jb2RlO1xuICAvKipcbiAgICogQHNpbmNlIDEuMC4wXG4gICAqL1xuICBfdGFnID0gXCJQcm9wZXJ0eVNpZ25hdHVyZVRyYW5zZm9ybWF0aW9uXCI7XG4gIGNvbnN0cnVjdG9yKGZyb20sIHRvLCBkZWNvZGUsIGVuY29kZSkge1xuICAgIHRoaXMuZnJvbSA9IGZyb207XG4gICAgdGhpcy50byA9IHRvO1xuICAgIHRoaXMuZGVjb2RlID0gZGVjb2RlO1xuICAgIHRoaXMuZW5jb2RlID0gZW5jb2RlO1xuICB9XG4gIC8qKlxuICAgKiBAc2luY2UgMS4wLjBcbiAgICovXG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiBgUHJvcGVydHlTaWduYXR1cmU8JHtmb3JtYXRUb2tlbih0aGlzLnRvLmlzT3B0aW9uYWwpfSwgJHt0aGlzLnRvLnR5cGV9LCAke2Zvcm1hdFByb3BlcnR5S2V5KHRoaXMuZnJvbS5mcm9tS2V5KX0sICR7Zm9ybWF0VG9rZW4odGhpcy5mcm9tLmlzT3B0aW9uYWwpfSwgJHt0aGlzLmZyb20udHlwZX0+YDtcbiAgfVxufVxuLyoqXG4gKiBAc2luY2UgMS4wLjBcbiAqIEBjYXRlZ29yeSBzeW1ib2xcbiAqL1xuZXhwb3J0IGNvbnN0IFByb3BlcnR5U2lnbmF0dXJlVHlwZUlkID0gLyojX19QVVJFX18qL1N5bWJvbC5mb3IoXCJAZWZmZWN0L3NjaGVtYS9Qcm9wZXJ0eVNpZ25hdHVyZVwiKTtcbmNvbnN0IHByb3BlcnR5U2lnbmF0dXJlQW5ub3RhdGlvbnNfID0gKGFzdCwgYW5ub3RhdGlvbnMpID0+IHtcbiAgc3dpdGNoIChhc3QuX3RhZykge1xuICAgIGNhc2UgXCJQcm9wZXJ0eVNpZ25hdHVyZURlY2xhcmF0aW9uXCI6XG4gICAgICB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvcGVydHlTaWduYXR1cmVEZWNsYXJhdGlvbihhc3QudHlwZSwgYXN0LmlzT3B0aW9uYWwsIGFzdC5pc1JlYWRvbmx5LCB7XG4gICAgICAgICAgLi4uYXN0LmFubm90YXRpb25zLFxuICAgICAgICAgIC4uLmFubm90YXRpb25zXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIGNhc2UgXCJQcm9wZXJ0eVNpZ25hdHVyZVRyYW5zZm9ybWF0aW9uXCI6XG4gICAgICB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvcGVydHlTaWduYXR1cmVUcmFuc2Zvcm1hdGlvbihuZXcgRnJvbVByb3BlcnR5U2lnbmF0dXJlKGFzdC5mcm9tLnR5cGUsIGFzdC5mcm9tLmlzT3B0aW9uYWwsIGFzdC5mcm9tLmlzUmVhZG9ubHksIGFzdC5mcm9tLmFubm90YXRpb25zKSwgbmV3IFRvUHJvcGVydHlTaWduYXR1cmUoYXN0LnRvLnR5cGUsIGFzdC50by5pc09wdGlvbmFsLCBhc3QudG8uaXNSZWFkb25seSwge1xuICAgICAgICAgIC4uLmFzdC50by5hbm5vdGF0aW9ucyxcbiAgICAgICAgICAuLi5hbm5vdGF0aW9uc1xuICAgICAgICB9KSwgYXN0LmRlY29kZSwgYXN0LmVuY29kZSk7XG4gICAgICB9XG4gIH1cbn07XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY2xhc3MgUHJvcGVydHlTaWduYXR1cmVJbXBsIHtcbiAgYXN0O1xuICBbVHlwZUlkXTtcbiAgW1Byb3BlcnR5U2lnbmF0dXJlVHlwZUlkXSA9IG51bGw7XG4gIF9LZXk7XG4gIF9FbmNvZGVkVG9rZW47XG4gIF9UeXBlVG9rZW47XG4gIGNvbnN0cnVjdG9yKGFzdCkge1xuICAgIHRoaXMuYXN0ID0gYXN0O1xuICB9XG4gIHBpcGUoKSB7XG4gICAgcmV0dXJuIHBpcGVBcmd1bWVudHModGhpcywgYXJndW1lbnRzKTtcbiAgfVxuICBhbm5vdGF0aW9ucyhhbm5vdGF0aW9ucykge1xuICAgIHJldHVybiBuZXcgUHJvcGVydHlTaWduYXR1cmVJbXBsKHByb3BlcnR5U2lnbmF0dXJlQW5ub3RhdGlvbnNfKHRoaXMuYXN0LCB0b0FTVEFubm90YXRpb25zKGFubm90YXRpb25zKSkpO1xuICB9XG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiBTdHJpbmcodGhpcy5hc3QpO1xuICB9XG59XG4vKipcbiAqIEBjYXRlZ29yeSBQcm9wZXJ0eVNpZ25hdHVyZVxuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBwcm9wZXJ0eVNpZ25hdHVyZSA9IHNlbGYgPT4gbmV3IFByb3BlcnR5U2lnbmF0dXJlSW1wbChuZXcgUHJvcGVydHlTaWduYXR1cmVEZWNsYXJhdGlvbihzZWxmLmFzdCwgZmFsc2UsIHRydWUsIHt9KSk7XG4vKipcbiAqIEBjYXRlZ29yeSBQcm9wZXJ0eVNpZ25hdHVyZVxuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBmcm9tS2V5ID0gLyojX19QVVJFX18qL2R1YWwoMiwgKHNlbGYsIGtleSkgPT4ge1xuICBjb25zdCBhc3QgPSBzZWxmLmFzdDtcbiAgc3dpdGNoIChhc3QuX3RhZykge1xuICAgIGNhc2UgXCJQcm9wZXJ0eVNpZ25hdHVyZURlY2xhcmF0aW9uXCI6XG4gICAgICB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvcGVydHlTaWduYXR1cmVJbXBsKG5ldyBQcm9wZXJ0eVNpZ25hdHVyZVRyYW5zZm9ybWF0aW9uKG5ldyBGcm9tUHJvcGVydHlTaWduYXR1cmUoYXN0LnR5cGUsIGFzdC5pc09wdGlvbmFsLCBhc3QuaXNSZWFkb25seSwgYXN0LmFubm90YXRpb25zLCBrZXkpLCBuZXcgVG9Qcm9wZXJ0eVNpZ25hdHVyZShBU1QudHlwZUFTVChhc3QudHlwZSksIGFzdC5pc09wdGlvbmFsLCBhc3QuaXNSZWFkb25seSwge30pLCBpZGVudGl0eSwgaWRlbnRpdHkpKTtcbiAgICAgIH1cbiAgICBjYXNlIFwiUHJvcGVydHlTaWduYXR1cmVUcmFuc2Zvcm1hdGlvblwiOlxuICAgICAgcmV0dXJuIG5ldyBQcm9wZXJ0eVNpZ25hdHVyZUltcGwobmV3IFByb3BlcnR5U2lnbmF0dXJlVHJhbnNmb3JtYXRpb24obmV3IEZyb21Qcm9wZXJ0eVNpZ25hdHVyZShhc3QuZnJvbS50eXBlLCBhc3QuZnJvbS5pc09wdGlvbmFsLCBhc3QuZnJvbS5pc1JlYWRvbmx5LCBhc3QuZnJvbS5hbm5vdGF0aW9ucywga2V5KSwgYXN0LnRvLCBhc3QuZGVjb2RlLCBhc3QuZW5jb2RlKSk7XG4gIH1cbn0pO1xuLyoqXG4gKiAtIGBkZWNvZGVgOiBgbm9uZWAgYXMgYXJndW1lbnQgbWVhbnM6IHRoZSB2YWx1ZSBpcyBtaXNzaW5nIGluIHRoZSBpbnB1dFxuICogLSBgZW5jb2RlYDogYG5vbmVgIGFzIHJldHVybiB2YWx1ZSBtZWFuczogdGhlIHZhbHVlIHdpbGwgYmUgbWlzc2luZyBpbiB0aGUgb3V0cHV0XG4gKlxuICogQGNhdGVnb3J5IFByb3BlcnR5U2lnbmF0dXJlXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IG9wdGlvbmFsVG9SZXF1aXJlZCA9IChmcm9tLCB0bywgb3B0aW9ucykgPT4gbmV3IFByb3BlcnR5U2lnbmF0dXJlSW1wbChuZXcgUHJvcGVydHlTaWduYXR1cmVUcmFuc2Zvcm1hdGlvbihuZXcgRnJvbVByb3BlcnR5U2lnbmF0dXJlKGZyb20uYXN0LCB0cnVlLCB0cnVlLCB7fSwgdW5kZWZpbmVkKSwgbmV3IFRvUHJvcGVydHlTaWduYXR1cmUodG8uYXN0LCBmYWxzZSwgdHJ1ZSwge30pLCBvID0+IG9wdGlvbl8uc29tZShvcHRpb25zLmRlY29kZShvKSksIG9wdGlvbl8uZmxhdE1hcChvcHRpb25zLmVuY29kZSkpKTtcbi8qKlxuICogLSBgZGVjb2RlYDpcbiAqICAgLSBgbm9uZWAgYXMgYXJndW1lbnQgbWVhbnM6IHRoZSB2YWx1ZSBpcyBtaXNzaW5nIGluIHRoZSBpbnB1dFxuICogICAtIGBub25lYCBhcyByZXR1cm4gdmFsdWUgbWVhbnM6IHRoZSB2YWx1ZSB3aWxsIGJlIG1pc3NpbmcgaW4gdGhlIG91dHB1dFxuICogLSBgZW5jb2RlYDpcbiAqICAgLSBgbm9uZWAgYXMgYXJndW1lbnQgbWVhbnM6IHRoZSB2YWx1ZSBpcyBtaXNzaW5nIGluIHRoZSBpbnB1dFxuICogICAtIGBub25lYCBhcyByZXR1cm4gdmFsdWUgbWVhbnM6IHRoZSB2YWx1ZSB3aWxsIGJlIG1pc3NpbmcgaW4gdGhlIG91dHB1dFxuICpcbiAqIEBjYXRlZ29yeSBQcm9wZXJ0eVNpZ25hdHVyZVxuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBvcHRpb25hbFRvT3B0aW9uYWwgPSAoZnJvbSwgdG8sIG9wdGlvbnMpID0+IG5ldyBQcm9wZXJ0eVNpZ25hdHVyZUltcGwobmV3IFByb3BlcnR5U2lnbmF0dXJlVHJhbnNmb3JtYXRpb24obmV3IEZyb21Qcm9wZXJ0eVNpZ25hdHVyZShmcm9tLmFzdCwgdHJ1ZSwgdHJ1ZSwge30sIHVuZGVmaW5lZCksIG5ldyBUb1Byb3BlcnR5U2lnbmF0dXJlKHRvLmFzdCwgdHJ1ZSwgdHJ1ZSwge30pLCBvcHRpb25zLmRlY29kZSwgb3B0aW9ucy5lbmNvZGUpKTtcbi8qKlxuICogQGNhdGVnb3J5IFByb3BlcnR5U2lnbmF0dXJlXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IG9wdGlvbmFsID0gLyojX19QVVJFX18qL2R1YWwoYXJncyA9PiBpc1NjaGVtYShhcmdzWzBdKSwgKHNjaGVtYSwgb3B0aW9ucykgPT4ge1xuICBjb25zdCBpc0V4YWN0ID0gb3B0aW9ucz8uZXhhY3Q7XG4gIGNvbnN0IGRlZmF1bHRWYWx1ZSA9IG9wdGlvbnM/LmRlZmF1bHQ7XG4gIGNvbnN0IGlzTnVsbGFibGUgPSBvcHRpb25zPy5udWxsYWJsZTtcbiAgY29uc3QgYXNPcHRpb24gPSBvcHRpb25zPy5hcyA9PSBcIk9wdGlvblwiO1xuICBpZiAoaXNFeGFjdCkge1xuICAgIGlmIChkZWZhdWx0VmFsdWUpIHtcbiAgICAgIGlmIChpc051bGxhYmxlKSB7XG4gICAgICAgIHJldHVybiBvcHRpb25hbFRvUmVxdWlyZWQoTnVsbE9yKHNjaGVtYSksIHR5cGVTY2hlbWEoc2NoZW1hKSwge1xuICAgICAgICAgIGRlY29kZTogb3B0aW9uXy5tYXRjaCh7XG4gICAgICAgICAgICBvbk5vbmU6IGRlZmF1bHRWYWx1ZSxcbiAgICAgICAgICAgIG9uU29tZTogYSA9PiBhID09PSBudWxsID8gZGVmYXVsdFZhbHVlKCkgOiBhXG4gICAgICAgICAgfSksXG4gICAgICAgICAgZW5jb2RlOiBvcHRpb25fLnNvbWVcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gb3B0aW9uYWxUb1JlcXVpcmVkKHNjaGVtYSwgdHlwZVNjaGVtYShzY2hlbWEpLCB7XG4gICAgICAgICAgZGVjb2RlOiBvcHRpb25fLm1hdGNoKHtcbiAgICAgICAgICAgIG9uTm9uZTogZGVmYXVsdFZhbHVlLFxuICAgICAgICAgICAgb25Tb21lOiBpZGVudGl0eVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIGVuY29kZTogb3B0aW9uXy5zb21lXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoYXNPcHRpb24pIHtcbiAgICAgIGlmIChpc051bGxhYmxlKSB7XG4gICAgICAgIHJldHVybiBvcHRpb25hbFRvUmVxdWlyZWQoTnVsbE9yKHNjaGVtYSksIE9wdGlvbkZyb21TZWxmKHR5cGVTY2hlbWEoc2NoZW1hKSksIHtcbiAgICAgICAgICBkZWNvZGU6IG9wdGlvbl8uZmlsdGVyKFByZWRpY2F0ZS5pc05vdE51bGwpLFxuICAgICAgICAgIGVuY29kZTogaWRlbnRpdHlcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gb3B0aW9uYWxUb1JlcXVpcmVkKHNjaGVtYSwgT3B0aW9uRnJvbVNlbGYodHlwZVNjaGVtYShzY2hlbWEpKSwge1xuICAgICAgICAgIGRlY29kZTogaWRlbnRpdHksXG4gICAgICAgICAgZW5jb2RlOiBpZGVudGl0eVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGlzTnVsbGFibGUpIHtcbiAgICAgICAgcmV0dXJuIG9wdGlvbmFsVG9PcHRpb25hbChOdWxsT3Ioc2NoZW1hKSwgdHlwZVNjaGVtYShzY2hlbWEpLCB7XG4gICAgICAgICAgZGVjb2RlOiBvcHRpb25fLmZpbHRlcihQcmVkaWNhdGUuaXNOb3ROdWxsKSxcbiAgICAgICAgICBlbmNvZGU6IGlkZW50aXR5XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9wZXJ0eVNpZ25hdHVyZUltcGwobmV3IFByb3BlcnR5U2lnbmF0dXJlRGVjbGFyYXRpb24oc2NoZW1hLmFzdCwgdHJ1ZSwgdHJ1ZSwge30pKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGRlZmF1bHRWYWx1ZSkge1xuICAgICAgaWYgKGlzTnVsbGFibGUpIHtcbiAgICAgICAgcmV0dXJuIG9wdGlvbmFsVG9SZXF1aXJlZChOdWxsaXNoT3Ioc2NoZW1hKSwgdHlwZVNjaGVtYShzY2hlbWEpLCB7XG4gICAgICAgICAgZGVjb2RlOiBvcHRpb25fLm1hdGNoKHtcbiAgICAgICAgICAgIG9uTm9uZTogZGVmYXVsdFZhbHVlLFxuICAgICAgICAgICAgb25Tb21lOiBhID0+IGEgPT0gbnVsbCA/IGRlZmF1bHRWYWx1ZSgpIDogYVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIGVuY29kZTogb3B0aW9uXy5zb21lXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG9wdGlvbmFsVG9SZXF1aXJlZChVbmRlZmluZWRPcihzY2hlbWEpLCB0eXBlU2NoZW1hKHNjaGVtYSksIHtcbiAgICAgICAgICBkZWNvZGU6IG9wdGlvbl8ubWF0Y2goe1xuICAgICAgICAgICAgb25Ob25lOiBkZWZhdWx0VmFsdWUsXG4gICAgICAgICAgICBvblNvbWU6IGEgPT4gYSA9PT0gdW5kZWZpbmVkID8gZGVmYXVsdFZhbHVlKCkgOiBhXG4gICAgICAgICAgfSksXG4gICAgICAgICAgZW5jb2RlOiBvcHRpb25fLnNvbWVcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChhc09wdGlvbikge1xuICAgICAgaWYgKGlzTnVsbGFibGUpIHtcbiAgICAgICAgcmV0dXJuIG9wdGlvbmFsVG9SZXF1aXJlZChOdWxsaXNoT3Ioc2NoZW1hKSwgT3B0aW9uRnJvbVNlbGYodHlwZVNjaGVtYShzY2hlbWEpKSwge1xuICAgICAgICAgIGRlY29kZTogb3B0aW9uXy5maWx0ZXIoYSA9PiBhICE9IG51bGwpLFxuICAgICAgICAgIGVuY29kZTogaWRlbnRpdHlcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gb3B0aW9uYWxUb1JlcXVpcmVkKFVuZGVmaW5lZE9yKHNjaGVtYSksIE9wdGlvbkZyb21TZWxmKHR5cGVTY2hlbWEoc2NoZW1hKSksIHtcbiAgICAgICAgICBkZWNvZGU6IG9wdGlvbl8uZmlsdGVyKFByZWRpY2F0ZS5pc05vdFVuZGVmaW5lZCksXG4gICAgICAgICAgZW5jb2RlOiBpZGVudGl0eVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGlzTnVsbGFibGUpIHtcbiAgICAgICAgcmV0dXJuIG9wdGlvbmFsVG9PcHRpb25hbChOdWxsaXNoT3Ioc2NoZW1hKSwgVW5kZWZpbmVkT3IodHlwZVNjaGVtYShzY2hlbWEpKSwge1xuICAgICAgICAgIGRlY29kZTogb3B0aW9uXy5maWx0ZXIoUHJlZGljYXRlLmlzTm90TnVsbCksXG4gICAgICAgICAgZW5jb2RlOiBpZGVudGl0eVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvcGVydHlTaWduYXR1cmVJbXBsKG5ldyBQcm9wZXJ0eVNpZ25hdHVyZURlY2xhcmF0aW9uKFVuZGVmaW5lZE9yKHNjaGVtYSkuYXN0LCB0cnVlLCB0cnVlLCB7fSkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufSk7XG5jb25zdCBpc1Byb3BlcnR5U2lnbmF0dXJlID0gdSA9PiBQcmVkaWNhdGUuaGFzUHJvcGVydHkodSwgUHJvcGVydHlTaWduYXR1cmVUeXBlSWQpO1xuY2xhc3MgVHlwZUxpdGVyYWxJbXBsIGV4dGVuZHMgU2NoZW1hSW1wbCB7XG4gIHN0YXRpYyBhc3QgPSAoZmllbGRzLCByZWNvcmRzKSA9PiB7XG4gICAgY29uc3Qgb3duS2V5cyA9IHV0aWxfLm93bktleXMoZmllbGRzKTtcbiAgICBjb25zdCBwc3MgPSBbXTtcbiAgICBpZiAob3duS2V5cy5sZW5ndGggPiAwKSB7XG4gICAgICBjb25zdCBmcm9tID0gW107XG4gICAgICBjb25zdCB0byA9IFtdO1xuICAgICAgY29uc3QgdHJhbnNmb3JtYXRpb25zID0gW107XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG93bktleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3Qga2V5ID0gb3duS2V5c1tpXTtcbiAgICAgICAgY29uc3QgZmllbGQgPSBmaWVsZHNba2V5XTtcbiAgICAgICAgaWYgKGlzUHJvcGVydHlTaWduYXR1cmUoZmllbGQpKSB7XG4gICAgICAgICAgY29uc3QgYXN0ID0gZmllbGQuYXN0O1xuICAgICAgICAgIHN3aXRjaCAoYXN0Ll90YWcpIHtcbiAgICAgICAgICAgIGNhc2UgXCJQcm9wZXJ0eVNpZ25hdHVyZURlY2xhcmF0aW9uXCI6XG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0eXBlID0gYXN0LnR5cGU7XG4gICAgICAgICAgICAgICAgY29uc3QgaXNPcHRpb25hbCA9IGFzdC5pc09wdGlvbmFsO1xuICAgICAgICAgICAgICAgIGNvbnN0IHRvQW5ub3RhdGlvbnMgPSBhc3QuYW5ub3RhdGlvbnM7XG4gICAgICAgICAgICAgICAgZnJvbS5wdXNoKG5ldyBBU1QuUHJvcGVydHlTaWduYXR1cmUoa2V5LCB0eXBlLCBpc09wdGlvbmFsLCB0cnVlKSk7XG4gICAgICAgICAgICAgICAgdG8ucHVzaChuZXcgQVNULlByb3BlcnR5U2lnbmF0dXJlKGtleSwgQVNULnR5cGVBU1QodHlwZSksIGlzT3B0aW9uYWwsIHRydWUsIHRvQW5ub3RhdGlvbnMpKTtcbiAgICAgICAgICAgICAgICBwc3MucHVzaChuZXcgQVNULlByb3BlcnR5U2lnbmF0dXJlKGtleSwgdHlwZSwgaXNPcHRpb25hbCwgdHJ1ZSwgdG9Bbm5vdGF0aW9ucykpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIFwiUHJvcGVydHlTaWduYXR1cmVUcmFuc2Zvcm1hdGlvblwiOlxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgY29uc3QgZnJvbUtleSA9IGFzdC5mcm9tLmZyb21LZXkgPz8ga2V5O1xuICAgICAgICAgICAgICAgIGZyb20ucHVzaChuZXcgQVNULlByb3BlcnR5U2lnbmF0dXJlKGZyb21LZXksIGFzdC5mcm9tLnR5cGUsIGFzdC5mcm9tLmlzT3B0aW9uYWwsIHRydWUsIGFzdC5mcm9tLmFubm90YXRpb25zKSk7XG4gICAgICAgICAgICAgICAgdG8ucHVzaChuZXcgQVNULlByb3BlcnR5U2lnbmF0dXJlKGtleSwgYXN0LnRvLnR5cGUsIGFzdC50by5pc09wdGlvbmFsLCB0cnVlLCBhc3QudG8uYW5ub3RhdGlvbnMpKTtcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm1hdGlvbnMucHVzaChuZXcgQVNULlByb3BlcnR5U2lnbmF0dXJlVHJhbnNmb3JtYXRpb24oZnJvbUtleSwga2V5LCBhc3QuZGVjb2RlLCBhc3QuZW5jb2RlKSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZnJvbS5wdXNoKG5ldyBBU1QuUHJvcGVydHlTaWduYXR1cmUoa2V5LCBmaWVsZC5hc3QsIGZhbHNlLCB0cnVlKSk7XG4gICAgICAgICAgdG8ucHVzaChuZXcgQVNULlByb3BlcnR5U2lnbmF0dXJlKGtleSwgQVNULnR5cGVBU1QoZmllbGQuYXN0KSwgZmFsc2UsIHRydWUpKTtcbiAgICAgICAgICBwc3MucHVzaChuZXcgQVNULlByb3BlcnR5U2lnbmF0dXJlKGtleSwgZmllbGQuYXN0LCBmYWxzZSwgdHJ1ZSkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoYXJyYXlfLmlzTm9uRW1wdHlSZWFkb25seUFycmF5KHRyYW5zZm9ybWF0aW9ucykpIHtcbiAgICAgICAgY29uc3QgaXNzRnJvbSA9IFtdO1xuICAgICAgICBjb25zdCBpc3NUbyA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IHIgb2YgcmVjb3Jkcykge1xuICAgICAgICAgIGNvbnN0IHtcbiAgICAgICAgICAgIGluZGV4U2lnbmF0dXJlcyxcbiAgICAgICAgICAgIHByb3BlcnR5U2lnbmF0dXJlc1xuICAgICAgICAgIH0gPSBBU1QucmVjb3JkKHIua2V5LmFzdCwgci52YWx1ZS5hc3QpO1xuICAgICAgICAgIHByb3BlcnR5U2lnbmF0dXJlcy5mb3JFYWNoKHBzID0+IHtcbiAgICAgICAgICAgIGZyb20ucHVzaChwcyk7XG4gICAgICAgICAgICB0by5wdXNoKG5ldyBBU1QuUHJvcGVydHlTaWduYXR1cmUocHMubmFtZSwgQVNULnR5cGVBU1QocHMudHlwZSksIHBzLmlzT3B0aW9uYWwsIHBzLmlzUmVhZG9ubHksIHBzLmFubm90YXRpb25zKSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgaW5kZXhTaWduYXR1cmVzLmZvckVhY2goaXMgPT4ge1xuICAgICAgICAgICAgaXNzRnJvbS5wdXNoKGlzKTtcbiAgICAgICAgICAgIGlzc1RvLnB1c2gobmV3IEFTVC5JbmRleFNpZ25hdHVyZShpcy5wYXJhbWV0ZXIsIEFTVC50eXBlQVNUKGlzLnR5cGUpLCBpcy5pc1JlYWRvbmx5KSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBBU1QuVHJhbnNmb3JtYXRpb24obmV3IEFTVC5UeXBlTGl0ZXJhbChmcm9tLCBpc3NGcm9tLCB7XG4gICAgICAgICAgW0FTVC5UaXRsZUFubm90YXRpb25JZF06IFwiU3RydWN0IChFbmNvZGVkIHNpZGUpXCJcbiAgICAgICAgfSksIG5ldyBBU1QuVHlwZUxpdGVyYWwodG8sIGlzc1RvLCB7XG4gICAgICAgICAgW0FTVC5UaXRsZUFubm90YXRpb25JZF06IFwiU3RydWN0IChUeXBlIHNpZGUpXCJcbiAgICAgICAgfSksIG5ldyBBU1QuVHlwZUxpdGVyYWxUcmFuc2Zvcm1hdGlvbih0cmFuc2Zvcm1hdGlvbnMpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgaXNzID0gW107XG4gICAgZm9yIChjb25zdCByIG9mIHJlY29yZHMpIHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgaW5kZXhTaWduYXR1cmVzLFxuICAgICAgICBwcm9wZXJ0eVNpZ25hdHVyZXNcbiAgICAgIH0gPSBBU1QucmVjb3JkKHIua2V5LmFzdCwgci52YWx1ZS5hc3QpO1xuICAgICAgcHJvcGVydHlTaWduYXR1cmVzLmZvckVhY2gocHMgPT4gcHNzLnB1c2gocHMpKTtcbiAgICAgIGluZGV4U2lnbmF0dXJlcy5mb3JFYWNoKGlzID0+IGlzcy5wdXNoKGlzKSk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgQVNULlR5cGVMaXRlcmFsKHBzcywgaXNzKTtcbiAgfTtcbiAgZmllbGRzO1xuICByZWNvcmRzO1xuICBjb25zdHJ1Y3RvcihmaWVsZHMsIHJlY29yZHMsIGFzdCA9IFR5cGVMaXRlcmFsSW1wbC5hc3QoZmllbGRzLCByZWNvcmRzKSkge1xuICAgIHN1cGVyKGFzdCk7XG4gICAgdGhpcy5maWVsZHMgPSB7XG4gICAgICAuLi5maWVsZHNcbiAgICB9O1xuICAgIHRoaXMucmVjb3JkcyA9IFsuLi5yZWNvcmRzXTtcbiAgfVxuICBhbm5vdGF0aW9ucyhhbm5vdGF0aW9ucykge1xuICAgIHJldHVybiBuZXcgVHlwZUxpdGVyYWxJbXBsKHRoaXMuZmllbGRzLCB0aGlzLnJlY29yZHMsIEFTVC5hbm5vdGF0aW9ucyh0aGlzLmFzdCwgdG9BU1RBbm5vdGF0aW9ucyhhbm5vdGF0aW9ucykpKTtcbiAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIFN0cnVjdChmaWVsZHMsIC4uLnJlY29yZHMpIHtcbiAgcmV0dXJuIG5ldyBUeXBlTGl0ZXJhbEltcGwoZmllbGRzLCByZWNvcmRzKTtcbn1cbmNsYXNzICRSZWNvcmRJbXBsIGV4dGVuZHMgVHlwZUxpdGVyYWxJbXBsIHtcbiAga2V5O1xuICB2YWx1ZTtcbiAgY29uc3RydWN0b3Ioa2V5LCB2YWx1ZSwgYXN0KSB7XG4gICAgc3VwZXIoe30sIFt7XG4gICAgICBrZXksXG4gICAgICB2YWx1ZVxuICAgIH1dLCBhc3QpO1xuICAgIHRoaXMua2V5ID0ga2V5O1xuICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgfVxuICBhbm5vdGF0aW9ucyhhbm5vdGF0aW9ucykge1xuICAgIHJldHVybiBuZXcgJFJlY29yZEltcGwodGhpcy5rZXksIHRoaXMudmFsdWUsIEFTVC5hbm5vdGF0aW9ucyh0aGlzLmFzdCwgdG9BU1RBbm5vdGF0aW9ucyhhbm5vdGF0aW9ucykpKTtcbiAgfVxufVxuLyoqXG4gKiBAY2F0ZWdvcnkgY29uc3RydWN0b3JzXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IFJlY29yZCA9IChrZXksIHZhbHVlKSA9PiBuZXcgJFJlY29yZEltcGwoa2V5LCB2YWx1ZSk7XG4vKipcbiAqIEBjYXRlZ29yeSBzdHJ1Y3QgdHJhbnNmb3JtYXRpb25zXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IHBpY2sgPSAoLi4ua2V5cykgPT4gc2VsZiA9PiBtYWtlKEFTVC5waWNrKHNlbGYuYXN0LCBrZXlzKSk7XG4vKipcbiAqIEBjYXRlZ29yeSBzdHJ1Y3QgdHJhbnNmb3JtYXRpb25zXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IG9taXQgPSAoLi4ua2V5cykgPT4gc2VsZiA9PiBtYWtlKEFTVC5vbWl0KHNlbGYuYXN0LCBrZXlzKSk7XG4vKipcbiAqIEdpdmVuIGEgc2NoZW1hIGBTY2hlbWE8QSwgSSwgUj5gIGFuZCBhIGtleSBga2V5OiBLYCwgdGhpcyBmdW5jdGlvbiBleHRyYWN0cyBhIHNwZWNpZmljIGZpZWxkIGZyb20gdGhlIGBBYCB0eXBlLFxuICogcHJvZHVjaW5nIGEgbmV3IHNjaGVtYSB0aGF0IHJlcHJlc2VudHMgYSB0cmFuc2Zvcm1hdGlvbiBmcm9tIHRoZSBgeyByZWFkb25seSBba2V5XTogSVtLXSB9YCB0eXBlIHRvIGBBW0tdYC5cbiAqXG4gKiBAZXhhbXBsZVxuICogaW1wb3J0ICogYXMgUyBmcm9tIFwiQGVmZmVjdC9zY2hlbWEvU2NoZW1hXCJcbiAqXG4gKiAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqIC8vIHVzZSBjYXNlOiBwdWxsIG91dCBhIHNpbmdsZSBmaWVsZCBmcm9tIGFcbiAqIC8vIHN0cnVjdCB0aHJvdWdoIGEgdHJhbnNmb3JtYXRpb25cbiAqIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICpcbiAqIGNvbnN0IG15dGFibGUgPSBTLlN0cnVjdCh7XG4gKiAgIGNvbHVtbjE6IFMuTnVtYmVyRnJvbVN0cmluZyxcbiAqICAgY29sdW1uMjogUy5OdW1iZXJcbiAqIH0pXG4gKlxuICogLy8gY29uc3QgcHVsbE91dENvbHVtbjogUy5TY2hlbWE8bnVtYmVyLCB7XG4gKiAvLyAgICAgcmVhZG9ubHkgY29sdW1uMTogc3RyaW5nO1xuICogLy8gfSwgbmV2ZXI+XG4gKiBjb25zdCBwdWxsT3V0Q29sdW1uID0gbXl0YWJsZS5waXBlKFMucGx1Y2soXCJjb2x1bW4xXCIpKVxuICpcbiAqIGNvbnNvbGUubG9nKFMuZGVjb2RlVW5rbm93bkVpdGhlcihTLkFycmF5KHB1bGxPdXRDb2x1bW4pKShbeyBjb2x1bW4xOiBcIjFcIiwgY29sdW1uMjogMTAwIH0sIHsgY29sdW1uMTogXCIyXCIsIGNvbHVtbjI6IDMwMCB9XSkpXG4gKiAvLyBPdXRwdXQ6IHsgX2lkOiAnRWl0aGVyJywgX3RhZzogJ1JpZ2h0JywgcmlnaHQ6IFsgMSwgMiBdIH1cbiAqXG4gKiBAY2F0ZWdvcnkgc3RydWN0IHRyYW5zZm9ybWF0aW9uc1xuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBwbHVjayA9IC8qI19fUFVSRV9fKi9kdWFsKDIsIChzY2hlbWEsIGtleSkgPT4ge1xuICBjb25zdCBwcyA9IEFTVC5nZXRQcm9wZXJ0eUtleUluZGV4ZWRBY2Nlc3MoQVNULnR5cGVBU1Qoc2NoZW1hLmFzdCksIGtleSk7XG4gIGNvbnN0IHZhbHVlID0gbWFrZShwcy5pc09wdGlvbmFsID8gQVNULm9yVW5kZWZpbmVkKHBzLnR5cGUpIDogcHMudHlwZSk7XG4gIHJldHVybiB0cmFuc2Zvcm0oc2NoZW1hLnBpcGUocGljayhrZXkpKSwgdmFsdWUsIHtcbiAgICBkZWNvZGU6IGEgPT4gYVtrZXldLFxuICAgIGVuY29kZTogYWsgPT4gcHMuaXNPcHRpb25hbCAmJiBhayA9PT0gdW5kZWZpbmVkID8ge30gOiB7XG4gICAgICBba2V5XTogYWtcbiAgICB9XG4gIH0pO1xufSk7XG5jb25zdCBtYWtlQnJhbmRTY2hlbWEgPSAoc2VsZiwgYW5ub3RhdGlvbnMpID0+IHtcbiAgY29uc3QgYXN0ID0gQVNULmFubm90YXRpb25zKHNlbGYsIHRvQVNUQW5ub3RhdGlvbnMoYW5ub3RhdGlvbnMpKTtcbiAgY29uc3Qgc2NoZW1hID0gbWFrZShhc3QpO1xuICBjb25zdCB2YWxpZGF0ZUVpdGhlcl8gPSB2YWxpZGF0ZUVpdGhlcihzY2hlbWEpO1xuICAvLyAgICAgdi0tIGZ1bmN0aW9uXG4gIGNvbnN0IG91dCA9IGJyYW5kXy5yZWZpbmVkKHVuYnJhbmRlZCA9PiBlaXRoZXJfLm1hdGNoKHZhbGlkYXRlRWl0aGVyXyh1bmJyYW5kZWQpLCB7XG4gICAgb25MZWZ0OiBlID0+IG9wdGlvbl8uc29tZShicmFuZF8uZXJyb3IoVHJlZUZvcm1hdHRlci5mb3JtYXRFcnJvclN5bmMoZSksIGUpKSxcbiAgICBvblJpZ2h0OiAoKSA9PiBvcHRpb25fLm5vbmUoKVxuICB9KSk7XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gU2NoZW1hIGludGVyZmFjZVxuICAvLyAtLS0tLS0tLS0tLS0tLS0tXG4gIE9iamVjdC5zZXRQcm90b3R5cGVPZihPYmplY3QuYXNzaWduKG91dCwgc2NoZW1hLCB7XG4gICAgYW5ub3RhdGlvbnM6IGEgPT4gbWFrZUJyYW5kU2NoZW1hKGFzdCwgYSlcbiAgfSksIE9iamVjdC5nZXRQcm90b3R5cGVPZihzY2hlbWEpKTtcbiAgcmV0dXJuIG91dDtcbn07XG4vKipcbiAqIEBjYXRlZ29yeSBicmFuZGluZ1xuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBhc0JyYW5kU2NoZW1hID0gc2NoZW1hID0+IHNjaGVtYTtcbi8qKlxuICogUmV0dXJucyBhIG5vbWluYWwgYnJhbmRlZCBzY2hlbWEgYnkgYXBwbHlpbmcgYSBicmFuZCB0byBhIGdpdmVuIHNjaGVtYS5cbiAqXG4gKiBgYGBcbiAqIFNjaGVtYTxBPiArIEIgLT4gU2NoZW1hPEEgJiBCcmFuZDxCPj5cbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBzZWxmIC0gVGhlIGlucHV0IHNjaGVtYSB0byBiZSBjb21iaW5lZCB3aXRoIHRoZSBicmFuZC5cbiAqIEBwYXJhbSBicmFuZCAtIFRoZSBicmFuZCB0byBhcHBseS5cbiAqXG4gKiBAZXhhbXBsZVxuICogaW1wb3J0ICogYXMgU2NoZW1hIGZyb20gXCJAZWZmZWN0L3NjaGVtYS9TY2hlbWFcIlxuICpcbiAqIGNvbnN0IEludCA9IFNjaGVtYS5OdW1iZXIucGlwZShTY2hlbWEuaW50KCksIFNjaGVtYS5icmFuZChcIkludFwiKSlcbiAqIHR5cGUgSW50ID0gU2NoZW1hLlNjaGVtYS5UeXBlPHR5cGVvZiBJbnQ+IC8vIG51bWJlciAmIEJyYW5kPFwiSW50XCI+XG4gKlxuICogQGNhdGVnb3J5IGJyYW5kaW5nXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IGJyYW5kID0gKGJyYW5kLCBhbm5vdGF0aW9ucykgPT4gc2VsZiA9PiB7XG4gIGNvbnN0IGJyYW5kQW5ub3RhdGlvbiA9IG9wdGlvbl8ubWF0Y2goQVNULmdldEJyYW5kQW5ub3RhdGlvbihzZWxmLmFzdCksIHtcbiAgICBvbk5vbmU6ICgpID0+IFticmFuZF0sXG4gICAgb25Tb21lOiBicmFuZHMgPT4gWy4uLmJyYW5kcywgYnJhbmRdXG4gIH0pO1xuICByZXR1cm4gbWFrZUJyYW5kU2NoZW1hKHNlbGYuYXN0LCB7XG4gICAgLy8gYWRkIGEgZGVmYXVsdCB0aXRsZSBhbm5vdGF0aW9uIGNvbnRhaW5pbmcgdGhlIGJyYW5kXG4gICAgdGl0bGU6IFN0cmluZyhzZWxmLmFzdCkgKyBgICYgQnJhbmQ8JHt1dGlsXy5mb3JtYXRVbmtub3duKGJyYW5kKX0+YCxcbiAgICAuLi5hbm5vdGF0aW9ucyxcbiAgICBbQVNULkJyYW5kQW5ub3RhdGlvbklkXTogYnJhbmRBbm5vdGF0aW9uXG4gIH0pO1xufTtcbi8qKlxuICogQGNhdGVnb3J5IGNvbWJpbmF0b3JzXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IHBhcnRpYWwgPSAvKiNfX1BVUkVfXyovZHVhbChhcmdzID0+IGlzU2NoZW1hKGFyZ3NbMF0pLCAoc2VsZiwgb3B0aW9ucykgPT4gbWFrZShBU1QucGFydGlhbChzZWxmLmFzdCwgb3B0aW9ucykpKTtcbi8qKlxuICogQGNhdGVnb3J5IGNvbWJpbmF0b3JzXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IHJlcXVpcmVkID0gc2VsZiA9PiBtYWtlKEFTVC5yZXF1aXJlZChzZWxmLmFzdCkpO1xuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IHNjaGVtYSB3aXRoIHNoYWxsb3cgbXV0YWJpbGl0eSBhcHBsaWVkIHRvIGl0cyBwcm9wZXJ0aWVzLlxuICpcbiAqIEBwYXJhbSBzY2hlbWEgLSBUaGUgb3JpZ2luYWwgc2NoZW1hIHRvIG1ha2UgcHJvcGVydGllcyBtdXRhYmxlIChzaGFsbG93bHkpLlxuICpcbiAqIEBjYXRlZ29yeSBjb21iaW5hdG9yc1xuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBtdXRhYmxlID0gc2NoZW1hID0+IG1ha2UoQVNULm11dGFibGUoc2NoZW1hLmFzdCkpO1xuY29uc3QgZ2V0RXh0ZW5kRXJyb3JNZXNzYWdlID0gKHgsIHksIHBhdGgpID0+IGVycm9yc18uZ2V0QVBJRXJyb3JNZXNzYWdlKFwiRXh0ZW5kXCIsIGBjYW5ub3QgZXh0ZW5kIFxcYCR7eH1cXGAgd2l0aCBcXGAke3l9XFxgIChwYXRoIFske3BhdGg/LmpvaW4oXCIsIFwiKX1dKWApO1xuY29uc3QgaW50ZXJzZWN0VHlwZUxpdGVyYWxzID0gKHgsIHksIHBhdGgpID0+IHtcbiAgaWYgKEFTVC5pc1R5cGVMaXRlcmFsKHgpICYmIEFTVC5pc1R5cGVMaXRlcmFsKHkpKSB7XG4gICAgY29uc3QgcHJvcGVydHlTaWduYXR1cmVzID0gWy4uLngucHJvcGVydHlTaWduYXR1cmVzXTtcbiAgICBmb3IgKGNvbnN0IHBzIG9mIHkucHJvcGVydHlTaWduYXR1cmVzKSB7XG4gICAgICBjb25zdCBuYW1lID0gcHMubmFtZTtcbiAgICAgIGNvbnN0IGkgPSBwcm9wZXJ0eVNpZ25hdHVyZXMuZmluZEluZGV4KHBzID0+IHBzLm5hbWUgPT09IG5hbWUpO1xuICAgICAgaWYgKGkgPT09IC0xKSB7XG4gICAgICAgIHByb3BlcnR5U2lnbmF0dXJlcy5wdXNoKHBzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICBpc09wdGlvbmFsLFxuICAgICAgICAgIHR5cGVcbiAgICAgICAgfSA9IHByb3BlcnR5U2lnbmF0dXJlc1tpXTtcbiAgICAgICAgcGF0aCA9IFsuLi5wYXRoLCB1dGlsXy5mb3JtYXRVbmtub3duKG5hbWUpXTtcbiAgICAgICAgcHJvcGVydHlTaWduYXR1cmVzW2ldID0gbmV3IEFTVC5Qcm9wZXJ0eVNpZ25hdHVyZShuYW1lLCBleHRlbmRBU1QodHlwZSwgcHMudHlwZSwgcGF0aCksIGlzT3B0aW9uYWwsIHRydWUpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbmV3IEFTVC5UeXBlTGl0ZXJhbChwcm9wZXJ0eVNpZ25hdHVyZXMsIHguaW5kZXhTaWduYXR1cmVzLmNvbmNhdCh5LmluZGV4U2lnbmF0dXJlcykpO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcihnZXRFeHRlbmRFcnJvck1lc3NhZ2UoeCwgeSwgcGF0aCkpO1xufTtcbmNvbnN0IGV4dGVuZEFTVCA9ICh4LCB5LCBwYXRoKSA9PiBBU1QuVW5pb24ubWFrZShpbnRlcnNlY3RVbmlvbk1lbWJlcnMoW3hdLCBbeV0sIHBhdGgpKTtcbmNvbnN0IGludGVyc2VjdFVuaW9uTWVtYmVycyA9ICh4cywgeXMsIHBhdGgpID0+IGFycmF5Xy5mbGF0TWFwKHhzLCB4ID0+IGFycmF5Xy5mbGF0TWFwKHlzLCB5ID0+IHtcbiAgaWYgKEFTVC5pc1VuaW9uKHgpKSB7XG4gICAgcmV0dXJuIGludGVyc2VjdFVuaW9uTWVtYmVycyh4LnR5cGVzLCBBU1QuaXNVbmlvbih5KSA/IHkudHlwZXMgOiBbeV0sIHBhdGgpO1xuICB9IGVsc2UgaWYgKEFTVC5pc1VuaW9uKHkpKSB7XG4gICAgcmV0dXJuIGludGVyc2VjdFVuaW9uTWVtYmVycyhbeF0sIHkudHlwZXMsIHBhdGgpO1xuICB9XG4gIGlmIChBU1QuaXNUeXBlTGl0ZXJhbCh4KSkge1xuICAgIGlmIChBU1QuaXNUeXBlTGl0ZXJhbCh5KSkge1xuICAgICAgcmV0dXJuIFtpbnRlcnNlY3RUeXBlTGl0ZXJhbHMoeCwgeSwgcGF0aCldO1xuICAgIH0gZWxzZSBpZiAoQVNULmlzVHJhbnNmb3JtYXRpb24oeSkgJiYgQVNULmlzVHlwZUxpdGVyYWxUcmFuc2Zvcm1hdGlvbih5LnRyYW5zZm9ybWF0aW9uKSkge1xuICAgICAgcmV0dXJuIFtuZXcgQVNULlRyYW5zZm9ybWF0aW9uKGludGVyc2VjdFR5cGVMaXRlcmFscyh4LCB5LmZyb20sIHBhdGgpLCBpbnRlcnNlY3RUeXBlTGl0ZXJhbHMoQVNULnR5cGVBU1QoeCksIHkudG8sIHBhdGgpLCBuZXcgQVNULlR5cGVMaXRlcmFsVHJhbnNmb3JtYXRpb24oeS50cmFuc2Zvcm1hdGlvbi5wcm9wZXJ0eVNpZ25hdHVyZVRyYW5zZm9ybWF0aW9ucykpXTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoQVNULmlzVHJhbnNmb3JtYXRpb24oeCkgJiYgQVNULmlzVHlwZUxpdGVyYWxUcmFuc2Zvcm1hdGlvbih4LnRyYW5zZm9ybWF0aW9uKSkge1xuICAgIGlmIChBU1QuaXNUeXBlTGl0ZXJhbCh5KSkge1xuICAgICAgcmV0dXJuIFtuZXcgQVNULlRyYW5zZm9ybWF0aW9uKGludGVyc2VjdFR5cGVMaXRlcmFscyh4LmZyb20sIHksIHBhdGgpLCBpbnRlcnNlY3RUeXBlTGl0ZXJhbHMoeC50bywgQVNULnR5cGVBU1QoeSksIHBhdGgpLCBuZXcgQVNULlR5cGVMaXRlcmFsVHJhbnNmb3JtYXRpb24oeC50cmFuc2Zvcm1hdGlvbi5wcm9wZXJ0eVNpZ25hdHVyZVRyYW5zZm9ybWF0aW9ucykpXTtcbiAgICB9IGVsc2UgaWYgKEFTVC5pc1RyYW5zZm9ybWF0aW9uKHkpICYmIEFTVC5pc1R5cGVMaXRlcmFsVHJhbnNmb3JtYXRpb24oeS50cmFuc2Zvcm1hdGlvbikpIHtcbiAgICAgIHJldHVybiBbbmV3IEFTVC5UcmFuc2Zvcm1hdGlvbihpbnRlcnNlY3RUeXBlTGl0ZXJhbHMoeC5mcm9tLCB5LmZyb20sIHBhdGgpLCBpbnRlcnNlY3RUeXBlTGl0ZXJhbHMoeC50bywgeS50bywgcGF0aCksIG5ldyBBU1QuVHlwZUxpdGVyYWxUcmFuc2Zvcm1hdGlvbih4LnRyYW5zZm9ybWF0aW9uLnByb3BlcnR5U2lnbmF0dXJlVHJhbnNmb3JtYXRpb25zLmNvbmNhdCh5LnRyYW5zZm9ybWF0aW9uLnByb3BlcnR5U2lnbmF0dXJlVHJhbnNmb3JtYXRpb25zKSkpXTtcbiAgICB9XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKGdldEV4dGVuZEVycm9yTWVzc2FnZSh4LCB5LCBwYXRoKSk7XG59KSk7XG4vKipcbiAqIEBjYXRlZ29yeSBjb21iaW5hdG9yc1xuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBleHRlbmQgPSAvKiNfX1BVUkVfXyovZHVhbCgyLCAoc2VsZiwgdGhhdCkgPT4gbWFrZShleHRlbmRBU1Qoc2VsZi5hc3QsIHRoYXQuYXN0LCBbXSkpKTtcbi8qKlxuICogQGNhdGVnb3J5IGNvbWJpbmF0b3JzXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IGNvbXBvc2UgPSAvKiNfX1BVUkVfXyovZHVhbChhcmdzID0+IGlzU2NoZW1hKGFyZ3NbMV0pLCAoZnJvbSwgdG8pID0+IG1ha2UoQVNULmNvbXBvc2UoZnJvbS5hc3QsIHRvLmFzdCkpKTtcbi8qKlxuICogQGNhdGVnb3J5IGNvbnN0cnVjdG9yc1xuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBzdXNwZW5kID0gZiA9PiBtYWtlKG5ldyBBU1QuU3VzcGVuZCgoKSA9PiBmKCkuYXN0KSk7XG5leHBvcnQgZnVuY3Rpb24gZmlsdGVyKHByZWRpY2F0ZSwgYW5ub3RhdGlvbnMpIHtcbiAgcmV0dXJuIHNlbGYgPT4gbWFrZShuZXcgQVNULlJlZmluZW1lbnQoc2VsZi5hc3QsIChhLCBvcHRpb25zLCBhc3QpID0+IHtcbiAgICBjb25zdCBvdXQgPSBwcmVkaWNhdGUoYSwgb3B0aW9ucywgYXN0KTtcbiAgICBpZiAoUHJlZGljYXRlLmlzQm9vbGVhbihvdXQpKSB7XG4gICAgICByZXR1cm4gb3V0ID8gb3B0aW9uXy5ub25lKCkgOiBvcHRpb25fLnNvbWUobmV3IFBhcnNlUmVzdWx0LlR5cGUoYXN0LCBhKSk7XG4gICAgfVxuICAgIHJldHVybiBvdXQ7XG4gIH0sIHRvQVNUQW5ub3RhdGlvbnMoYW5ub3RhdGlvbnMpKSk7XG59XG5jbGFzcyB0cmFuc2Zvcm1PckZhaWxJbXBsIGV4dGVuZHMgU2NoZW1hSW1wbCB7XG4gIGZyb207XG4gIHRvO1xuICBjb25zdHJ1Y3Rvcihmcm9tLCB0bywgYXN0KSB7XG4gICAgc3VwZXIoYXN0KTtcbiAgICB0aGlzLmZyb20gPSBmcm9tO1xuICAgIHRoaXMudG8gPSB0bztcbiAgfVxuICBhbm5vdGF0aW9ucyhhbm5vdGF0aW9ucykge1xuICAgIHJldHVybiBuZXcgdHJhbnNmb3JtT3JGYWlsSW1wbCh0aGlzLmZyb20sIHRoaXMudG8sIEFTVC5hbm5vdGF0aW9ucyh0aGlzLmFzdCwgdG9BU1RBbm5vdGF0aW9ucyhhbm5vdGF0aW9ucykpKTtcbiAgfVxufVxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgYFNjaGVtYWAgYnkgdHJhbnNmb3JtaW5nIHRoZSBpbnB1dCBhbmQgb3V0cHV0IG9mIGFuIGV4aXN0aW5nIGBTY2hlbWFgXG4gKiB1c2luZyB0aGUgcHJvdmlkZWQgZGVjb2RpbmcgZnVuY3Rpb25zLlxuICpcbiAqIEBjYXRlZ29yeSBjb21iaW5hdG9yc1xuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCB0cmFuc2Zvcm1PckZhaWwgPSAvKiNfX1BVUkVfXyovZHVhbChhcmdzID0+IGlzU2NoZW1hKGFyZ3NbMF0pICYmIGlzU2NoZW1hKGFyZ3NbMV0pLCAoZnJvbSwgdG8sIG9wdGlvbnMpID0+IG5ldyB0cmFuc2Zvcm1PckZhaWxJbXBsKGZyb20sIHRvLCBuZXcgQVNULlRyYW5zZm9ybWF0aW9uKGZyb20uYXN0LCB0by5hc3QsIG5ldyBBU1QuRmluYWxUcmFuc2Zvcm1hdGlvbihvcHRpb25zLmRlY29kZSwgb3B0aW9ucy5lbmNvZGUpKSkpO1xuLyoqXG4gKiBDcmVhdGUgYSBuZXcgYFNjaGVtYWAgYnkgdHJhbnNmb3JtaW5nIHRoZSBpbnB1dCBhbmQgb3V0cHV0IG9mIGFuIGV4aXN0aW5nIGBTY2hlbWFgXG4gKiB1c2luZyB0aGUgcHJvdmlkZWQgbWFwcGluZyBmdW5jdGlvbnMuXG4gKlxuICogQGNhdGVnb3J5IGNvbWJpbmF0b3JzXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IHRyYW5zZm9ybSA9IC8qI19fUFVSRV9fKi9kdWFsKGFyZ3MgPT4gaXNTY2hlbWEoYXJnc1swXSkgJiYgaXNTY2hlbWEoYXJnc1sxXSksIChmcm9tLCB0bywgb3B0aW9ucykgPT4gdHJhbnNmb3JtT3JGYWlsKGZyb20sIHRvLCB7XG4gIGRlY29kZTogZnJvbUEgPT4gUGFyc2VSZXN1bHQuc3VjY2VlZChvcHRpb25zLmRlY29kZShmcm9tQSkpLFxuICBlbmNvZGU6IHRvSSA9PiBQYXJzZVJlc3VsdC5zdWNjZWVkKG9wdGlvbnMuZW5jb2RlKHRvSSkpXG59KSk7XG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgYFNjaGVtYWAgd2hpY2ggdHJhbnNmb3JtcyBsaXRlcmFsIHZhbHVlcy5cbiAqXG4gKiBAZXhhbXBsZVxuICogaW1wb3J0ICogYXMgUyBmcm9tIFwiQGVmZmVjdC9zY2hlbWEvU2NoZW1hXCJcbiAqXG4gKiBjb25zdCBzY2hlbWEgPSBTLnRyYW5zZm9ybUxpdGVyYWwoMCwgXCJhXCIpXG4gKlxuICogYXNzZXJ0LmRlZXBTdHJpY3RFcXVhbChTLmRlY29kZVN5bmMoc2NoZW1hKSgwKSwgXCJhXCIpXG4gKlxuICogQGNhdGVnb3J5IGNvbnN0cnVjdG9yc1xuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCB0cmFuc2Zvcm1MaXRlcmFsID0gKGZyb20sIHRvKSA9PiB0cmFuc2Zvcm0oTGl0ZXJhbChmcm9tKSwgTGl0ZXJhbCh0byksIHtcbiAgZGVjb2RlOiAoKSA9PiB0byxcbiAgZW5jb2RlOiAoKSA9PiBmcm9tXG59KTtcbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2Zvcm1MaXRlcmFscyguLi5wYWlycykge1xuICByZXR1cm4gVW5pb24oLi4ucGFpcnMubWFwKChbZnJvbSwgdG9dKSA9PiB0cmFuc2Zvcm1MaXRlcmFsKGZyb20sIHRvKSkpO1xufVxuLyoqXG4gKiBBdHRhY2hlcyBhIHByb3BlcnR5IHNpZ25hdHVyZSB3aXRoIHRoZSBzcGVjaWZpZWQga2V5IGFuZCB2YWx1ZSB0byB0aGUgc2NoZW1hLlxuICogVGhpcyBBUEkgaXMgdXNlZnVsIHdoZW4geW91IHdhbnQgdG8gYWRkIGEgcHJvcGVydHkgdG8geW91ciBzY2hlbWEgd2hpY2ggZG9lc24ndCBkZXNjcmliZSB0aGUgc2hhcGUgb2YgdGhlIGlucHV0LFxuICogYnV0IHJhdGhlciBtYXBzIHRvIGFub3RoZXIgc2NoZW1hLCBmb3IgZXhhbXBsZSB3aGVuIHlvdSB3YW50IHRvIGFkZCBhIGRpc2NyaW1pbmFudCB0byBhIHNpbXBsZSB1bmlvbi5cbiAqXG4gKiBAcGFyYW0gc2VsZiAtIFRoZSBpbnB1dCBzY2hlbWEuXG4gKiBAcGFyYW0ga2V5IC0gVGhlIG5hbWUgb2YgdGhlIHByb3BlcnR5IHRvIGFkZCB0byB0aGUgc2NoZW1hLlxuICogQHBhcmFtIHZhbHVlIC0gVGhlIHZhbHVlIG9mIHRoZSBwcm9wZXJ0eSB0byBhZGQgdG8gdGhlIHNjaGVtYS5cbiAqXG4gKiBAZXhhbXBsZVxuICogaW1wb3J0ICogYXMgUyBmcm9tIFwiQGVmZmVjdC9zY2hlbWEvU2NoZW1hXCJcbiAqIGltcG9ydCB7IHBpcGUgfSBmcm9tIFwiZWZmZWN0L0Z1bmN0aW9uXCJcbiAqXG4gKiBjb25zdCBDaXJjbGUgPSBTLlN0cnVjdCh7IHJhZGl1czogUy5OdW1iZXIgfSlcbiAqIGNvbnN0IFNxdWFyZSA9IFMuU3RydWN0KHsgc2lkZUxlbmd0aDogUy5OdW1iZXIgfSlcbiAqIGNvbnN0IFNoYXBlID0gUy5VbmlvbihcbiAqICAgQ2lyY2xlLnBpcGUoUy5hdHRhY2hQcm9wZXJ0eVNpZ25hdHVyZShcImtpbmRcIiwgXCJjaXJjbGVcIikpLFxuICogICBTcXVhcmUucGlwZShTLmF0dGFjaFByb3BlcnR5U2lnbmF0dXJlKFwia2luZFwiLCBcInNxdWFyZVwiKSlcbiAqIClcbiAqXG4gKiBhc3NlcnQuZGVlcFN0cmljdEVxdWFsKFMuZGVjb2RlU3luYyhTaGFwZSkoeyByYWRpdXM6IDEwIH0pLCB7XG4gKiAgIGtpbmQ6IFwiY2lyY2xlXCIsXG4gKiAgIHJhZGl1czogMTBcbiAqIH0pXG4gKlxuICogQGNhdGVnb3J5IGNvbWJpbmF0b3JzXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IGF0dGFjaFByb3BlcnR5U2lnbmF0dXJlID0gLyojX19QVVJFX18qL2R1YWwoYXJncyA9PiBpc1NjaGVtYShhcmdzWzBdKSwgKHNjaGVtYSwga2V5LCB2YWx1ZSwgYW5ub3RhdGlvbnMpID0+IHtcbiAgY29uc3QgYXR0YWNoZWQgPSBleHRlbmQodHlwZVNjaGVtYShzY2hlbWEpLCBTdHJ1Y3Qoe1xuICAgIFtrZXldOiBQcmVkaWNhdGUuaXNTeW1ib2wodmFsdWUpID8gVW5pcXVlU3ltYm9sRnJvbVNlbGYodmFsdWUpIDogTGl0ZXJhbCh2YWx1ZSlcbiAgfSkpLmFzdDtcbiAgcmV0dXJuIG1ha2UobmV3IEFTVC5UcmFuc2Zvcm1hdGlvbihzY2hlbWEuYXN0LCBhbm5vdGF0aW9ucyA/IEFTVC5hbm5vdGF0aW9ucyhhdHRhY2hlZCwgdG9BU1RBbm5vdGF0aW9ucyhhbm5vdGF0aW9ucykpIDogYXR0YWNoZWQsIG5ldyBBU1QuVHlwZUxpdGVyYWxUcmFuc2Zvcm1hdGlvbihbbmV3IEFTVC5Qcm9wZXJ0eVNpZ25hdHVyZVRyYW5zZm9ybWF0aW9uKGtleSwga2V5LCAoKSA9PiBvcHRpb25fLnNvbWUodmFsdWUpLCAoKSA9PiBvcHRpb25fLm5vbmUoKSldKSkpO1xufSk7XG4vKipcbiAqIEBjYXRlZ29yeSBhbm5vdGF0aW9uc1xuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBhbm5vdGF0aW9ucyA9IC8qI19fUFVSRV9fKi9kdWFsKDIsIChzZWxmLCBhbm5vdGF0aW9ucykgPT4gc2VsZi5hbm5vdGF0aW9ucyhhbm5vdGF0aW9ucykpO1xuLyoqXG4gKiBAY2F0ZWdvcnkgYW5ub3RhdGlvbnNcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5leHBvcnQgY29uc3QgbWVzc2FnZSA9IG1lc3NhZ2UgPT4gc2VsZiA9PiBzZWxmLmFubm90YXRpb25zKHtcbiAgW0FTVC5NZXNzYWdlQW5ub3RhdGlvbklkXTogbWVzc2FnZVxufSk7XG4vKipcbiAqIEBjYXRlZ29yeSBhbm5vdGF0aW9uc1xuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBpZGVudGlmaWVyID0gaWRlbnRpZmllciA9PiBzZWxmID0+IHNlbGYuYW5ub3RhdGlvbnMoe1xuICBbQVNULklkZW50aWZpZXJBbm5vdGF0aW9uSWRdOiBpZGVudGlmaWVyXG59KTtcbi8qKlxuICogQGNhdGVnb3J5IGFubm90YXRpb25zXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IHRpdGxlID0gdGl0bGUgPT4gc2VsZiA9PiBzZWxmLmFubm90YXRpb25zKHtcbiAgW0FTVC5UaXRsZUFubm90YXRpb25JZF06IHRpdGxlXG59KTtcbi8qKlxuICogQGNhdGVnb3J5IGFubm90YXRpb25zXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IGRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb24gPT4gc2VsZiA9PiBzZWxmLmFubm90YXRpb25zKHtcbiAgW0FTVC5EZXNjcmlwdGlvbkFubm90YXRpb25JZF06IGRlc2NyaXB0aW9uXG59KTtcbi8qKlxuICogQGNhdGVnb3J5IGFubm90YXRpb25zXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IGV4YW1wbGVzID0gZXhhbXBsZXMgPT4gc2VsZiA9PiBzZWxmLmFubm90YXRpb25zKHtcbiAgW0FTVC5FeGFtcGxlc0Fubm90YXRpb25JZF06IGV4YW1wbGVzXG59KTtcbmNvbnN0ICRkZWZhdWx0ID0gdmFsdWUgPT4gc2VsZiA9PiBzZWxmLmFubm90YXRpb25zKHtcbiAgW0FTVC5EZWZhdWx0QW5ub3RhdGlvbklkXTogdmFsdWVcbn0pO1xuZXhwb3J0IHtcbi8qKlxuICogQGNhdGVnb3J5IGFubm90YXRpb25zXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuJGRlZmF1bHQgYXMgZGVmYXVsdCB9O1xuLyoqXG4gKiBAY2F0ZWdvcnkgYW5ub3RhdGlvbnNcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5leHBvcnQgY29uc3QgZG9jdW1lbnRhdGlvbiA9IGRvY3VtZW50YXRpb24gPT4gc2VsZiA9PiBzZWxmLmFubm90YXRpb25zKHtcbiAgW0FTVC5Eb2N1bWVudGF0aW9uQW5ub3RhdGlvbklkXTogZG9jdW1lbnRhdGlvblxufSk7XG4vKipcbiAqIEF0dGFjaGVzIGEgSlNPTiBTY2hlbWEgYW5ub3RhdGlvbiB0byBhIHNjaGVtYSB0aGF0IHJlcHJlc2VudHMgYSByZWZpbmVtZW50LlxuICpcbiAqIElmIHRoZSBzY2hlbWEgaXMgY29tcG9zZWQgb2YgbW9yZSB0aGFuIG9uZSByZWZpbmVtZW50LCB0aGUgY29ycmVzcG9uZGluZyBhbm5vdGF0aW9ucyB3aWxsIGJlIG1lcmdlZC5cbiAqXG4gKiBAY2F0ZWdvcnkgYW5ub3RhdGlvbnNcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5leHBvcnQgY29uc3QganNvblNjaGVtYSA9IGpzb25TY2hlbWEgPT4gc2VsZiA9PiBzZWxmLmFubm90YXRpb25zKHtcbiAgW0FTVC5KU09OU2NoZW1hQW5ub3RhdGlvbklkXToganNvblNjaGVtYVxufSk7XG4vKipcbiAqIEBjYXRlZ29yeSBhbm5vdGF0aW9uc1xuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBlcXVpdmFsZW5jZSA9IGVxdWl2YWxlbmNlID0+IHNlbGYgPT4gc2VsZi5hbm5vdGF0aW9ucyh7XG4gIFtlcXVpdmFsZW5jZV8uRXF1aXZhbGVuY2VIb29rSWRdOiAoKSA9PiBlcXVpdmFsZW5jZVxufSk7XG4vKipcbiAqIEBjYXRlZ29yeSBhbm5vdGF0aW9uc1xuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBjb25jdXJyZW5jeSA9IGNvbmN1cnJlbmN5ID0+IHNlbGYgPT4gc2VsZi5hbm5vdGF0aW9ucyh7XG4gIFtBU1QuQ29uY3VycmVuY3lBbm5vdGF0aW9uSWRdOiBjb25jdXJyZW5jeVxufSk7XG4vKipcbiAqIEBjYXRlZ29yeSBhbm5vdGF0aW9uc1xuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBiYXRjaGluZyA9IGJhdGNoaW5nID0+IHNlbGYgPT4gc2VsZi5hbm5vdGF0aW9ucyh7XG4gIFtBU1QuQmF0Y2hpbmdBbm5vdGF0aW9uSWRdOiBiYXRjaGluZ1xufSk7XG4vKipcbiAqIEBjYXRlZ29yeSBhbm5vdGF0aW9uc1xuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBwYXJzZUlzc3VlVGl0bGUgPSBmID0+IHNlbGYgPT4gc2VsZi5hbm5vdGF0aW9ucyh7XG4gIFtBU1QuUGFyc2VJc3N1ZVRpdGxlQW5ub3RhdGlvbklkXTogZlxufSk7XG4vKipcbiAqIEBjYXRlZ29yeSByZW5hbWluZ1xuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCByZW5hbWUgPSAvKiNfX1BVUkVfXyovZHVhbCgyLCAoc2VsZiwgbWFwcGluZykgPT4ge1xuICByZXR1cm4gbWFrZShBU1QucmVuYW1lKHNlbGYuYXN0LCBtYXBwaW5nKSk7XG59KTtcbi8qKlxuICogQGNhdGVnb3J5IHR5cGUgaWRcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5leHBvcnQgY29uc3QgVHJpbW1lZFR5cGVJZCA9IC8qI19fUFVSRV9fKi9TeW1ib2wuZm9yKFwiQGVmZmVjdC9zY2hlbWEvVHlwZUlkL1RyaW1tZWRcIik7XG4vKipcbiAqIFZlcmlmaWVzIHRoYXQgYSBzdHJpbmcgY29udGFpbnMgbm8gbGVhZGluZyBvciB0cmFpbGluZyB3aGl0ZXNwYWNlcy5cbiAqXG4gKiBOb3RlLiBUaGlzIGNvbWJpbmF0b3IgZG9lcyBub3QgbWFrZSBhbnkgdHJhbnNmb3JtYXRpb25zLCBpdCBvbmx5IHZhbGlkYXRlcy5cbiAqIElmIHdoYXQgeW91IHdlcmUgbG9va2luZyBmb3Igd2FzIGEgY29tYmluYXRvciB0byB0cmltIHN0cmluZ3MsIHRoZW4gY2hlY2sgb3V0IHRoZSBgdHJpbWAgY29tYmluYXRvci5cbiAqXG4gKiBAY2F0ZWdvcnkgc3RyaW5nIGZpbHRlcnNcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5leHBvcnQgY29uc3QgdHJpbW1lZCA9IGFubm90YXRpb25zID0+IHNlbGYgPT4gc2VsZi5waXBlKGZpbHRlcihhID0+IGEgPT09IGEudHJpbSgpLCB7XG4gIHR5cGVJZDogVHJpbW1lZFR5cGVJZCxcbiAgZGVzY3JpcHRpb246IFwiYSBzdHJpbmcgd2l0aCBubyBsZWFkaW5nIG9yIHRyYWlsaW5nIHdoaXRlc3BhY2VcIixcbiAgLi4uYW5ub3RhdGlvbnNcbn0pKTtcbi8qKlxuICogQGNhdGVnb3J5IHR5cGUgaWRcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5leHBvcnQgY29uc3QgTWF4TGVuZ3RoVHlwZUlkID0gZmlsdGVyc18uTWF4TGVuZ3RoVHlwZUlkO1xuLyoqXG4gKiBAY2F0ZWdvcnkgc3RyaW5nIGZpbHRlcnNcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5leHBvcnQgY29uc3QgbWF4TGVuZ3RoID0gKG1heExlbmd0aCwgYW5ub3RhdGlvbnMpID0+IHNlbGYgPT4gc2VsZi5waXBlKGZpbHRlcihhID0+IGEubGVuZ3RoIDw9IG1heExlbmd0aCwge1xuICB0eXBlSWQ6IE1heExlbmd0aFR5cGVJZCxcbiAgZGVzY3JpcHRpb246IGBhIHN0cmluZyBhdCBtb3N0ICR7bWF4TGVuZ3RofSBjaGFyYWN0ZXIocykgbG9uZ2AsXG4gIGpzb25TY2hlbWE6IHtcbiAgICBtYXhMZW5ndGhcbiAgfSxcbiAgLi4uYW5ub3RhdGlvbnNcbn0pKTtcbi8qKlxuICogQGNhdGVnb3J5IHR5cGUgaWRcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5leHBvcnQgY29uc3QgTWluTGVuZ3RoVHlwZUlkID0gZmlsdGVyc18uTWluTGVuZ3RoVHlwZUlkO1xuLyoqXG4gKiBAY2F0ZWdvcnkgc3RyaW5nIGZpbHRlcnNcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5leHBvcnQgY29uc3QgbWluTGVuZ3RoID0gKG1pbkxlbmd0aCwgYW5ub3RhdGlvbnMpID0+IHNlbGYgPT4gc2VsZi5waXBlKGZpbHRlcihhID0+IGEubGVuZ3RoID49IG1pbkxlbmd0aCwge1xuICB0eXBlSWQ6IE1pbkxlbmd0aFR5cGVJZCxcbiAgZGVzY3JpcHRpb246IGBhIHN0cmluZyBhdCBsZWFzdCAke21pbkxlbmd0aH0gY2hhcmFjdGVyKHMpIGxvbmdgLFxuICBqc29uU2NoZW1hOiB7XG4gICAgbWluTGVuZ3RoXG4gIH0sXG4gIC4uLmFubm90YXRpb25zXG59KSk7XG4vKipcbiAqIEBjYXRlZ29yeSB0eXBlIGlkXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IFBhdHRlcm5UeXBlSWQgPSAvKiNfX1BVUkVfXyovU3ltYm9sLmZvcihcIkBlZmZlY3Qvc2NoZW1hL1R5cGVJZC9QYXR0ZXJuXCIpO1xuLyoqXG4gKiBAY2F0ZWdvcnkgc3RyaW5nIGZpbHRlcnNcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5leHBvcnQgY29uc3QgcGF0dGVybiA9IChyZWdleCwgYW5ub3RhdGlvbnMpID0+IHNlbGYgPT4ge1xuICBjb25zdCBwYXR0ZXJuID0gcmVnZXguc291cmNlO1xuICByZXR1cm4gc2VsZi5waXBlKGZpbHRlcihhID0+IHtcbiAgICAvLyBUaGUgZm9sbG93aW5nIGxpbmUgZW5zdXJlcyB0aGF0IGBsYXN0SW5kZXhgIGlzIHJlc2V0IHRvIGAwYCBpbiBjYXNlIHRoZSB1c2VyIGhhcyBzcGVjaWZpZWQgdGhlIGBnYCBmbGFnXG4gICAgcmVnZXgubGFzdEluZGV4ID0gMDtcbiAgICByZXR1cm4gcmVnZXgudGVzdChhKTtcbiAgfSwge1xuICAgIHR5cGVJZDoge1xuICAgICAgaWQ6IFBhdHRlcm5UeXBlSWQsXG4gICAgICBhbm5vdGF0aW9uOiB7XG4gICAgICAgIHJlZ2V4XG4gICAgICB9XG4gICAgfSxcbiAgICBkZXNjcmlwdGlvbjogYGEgc3RyaW5nIG1hdGNoaW5nIHRoZSBwYXR0ZXJuICR7cGF0dGVybn1gLFxuICAgIGpzb25TY2hlbWE6IHtcbiAgICAgIHBhdHRlcm5cbiAgICB9LFxuICAgIGFyYml0cmFyeTogKCkgPT4gZmMgPT4gZmMuc3RyaW5nTWF0Y2hpbmcocmVnZXgpLFxuICAgIC4uLmFubm90YXRpb25zXG4gIH0pKTtcbn07XG4vKipcbiAqIEBjYXRlZ29yeSB0eXBlIGlkXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IFN0YXJ0c1dpdGhUeXBlSWQgPSAvKiNfX1BVUkVfXyovU3ltYm9sLmZvcihcIkBlZmZlY3Qvc2NoZW1hL1R5cGVJZC9TdGFydHNXaXRoXCIpO1xuLyoqXG4gKiBAY2F0ZWdvcnkgc3RyaW5nIGZpbHRlcnNcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5leHBvcnQgY29uc3Qgc3RhcnRzV2l0aCA9IChzdGFydHNXaXRoLCBhbm5vdGF0aW9ucykgPT4gc2VsZiA9PiBzZWxmLnBpcGUoZmlsdGVyKGEgPT4gYS5zdGFydHNXaXRoKHN0YXJ0c1dpdGgpLCB7XG4gIHR5cGVJZDoge1xuICAgIGlkOiBTdGFydHNXaXRoVHlwZUlkLFxuICAgIGFubm90YXRpb246IHtcbiAgICAgIHN0YXJ0c1dpdGhcbiAgICB9XG4gIH0sXG4gIGRlc2NyaXB0aW9uOiBgYSBzdHJpbmcgc3RhcnRpbmcgd2l0aCAke0pTT04uc3RyaW5naWZ5KHN0YXJ0c1dpdGgpfWAsXG4gIGpzb25TY2hlbWE6IHtcbiAgICBwYXR0ZXJuOiBgXiR7c3RhcnRzV2l0aH1gXG4gIH0sXG4gIC4uLmFubm90YXRpb25zXG59KSk7XG4vKipcbiAqIEBjYXRlZ29yeSB0eXBlIGlkXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IEVuZHNXaXRoVHlwZUlkID0gLyojX19QVVJFX18qL1N5bWJvbC5mb3IoXCJAZWZmZWN0L3NjaGVtYS9UeXBlSWQvRW5kc1dpdGhcIik7XG4vKipcbiAqIEBjYXRlZ29yeSBzdHJpbmcgZmlsdGVyc1xuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBlbmRzV2l0aCA9IChlbmRzV2l0aCwgYW5ub3RhdGlvbnMpID0+IHNlbGYgPT4gc2VsZi5waXBlKGZpbHRlcihhID0+IGEuZW5kc1dpdGgoZW5kc1dpdGgpLCB7XG4gIHR5cGVJZDoge1xuICAgIGlkOiBFbmRzV2l0aFR5cGVJZCxcbiAgICBhbm5vdGF0aW9uOiB7XG4gICAgICBlbmRzV2l0aFxuICAgIH1cbiAgfSxcbiAgZGVzY3JpcHRpb246IGBhIHN0cmluZyBlbmRpbmcgd2l0aCAke0pTT04uc3RyaW5naWZ5KGVuZHNXaXRoKX1gLFxuICBqc29uU2NoZW1hOiB7XG4gICAgcGF0dGVybjogYF4uKiR7ZW5kc1dpdGh9JGBcbiAgfSxcbiAgLi4uYW5ub3RhdGlvbnNcbn0pKTtcbi8qKlxuICogQGNhdGVnb3J5IHR5cGUgaWRcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5leHBvcnQgY29uc3QgSW5jbHVkZXNUeXBlSWQgPSAvKiNfX1BVUkVfXyovU3ltYm9sLmZvcihcIkBlZmZlY3Qvc2NoZW1hL1R5cGVJZC9JbmNsdWRlc1wiKTtcbi8qKlxuICogQGNhdGVnb3J5IHN0cmluZyBmaWx0ZXJzXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IGluY2x1ZGVzID0gKHNlYXJjaFN0cmluZywgYW5ub3RhdGlvbnMpID0+IHNlbGYgPT4gc2VsZi5waXBlKGZpbHRlcihhID0+IGEuaW5jbHVkZXMoc2VhcmNoU3RyaW5nKSwge1xuICB0eXBlSWQ6IHtcbiAgICBpZDogSW5jbHVkZXNUeXBlSWQsXG4gICAgYW5ub3RhdGlvbjoge1xuICAgICAgaW5jbHVkZXM6IHNlYXJjaFN0cmluZ1xuICAgIH1cbiAgfSxcbiAgZGVzY3JpcHRpb246IGBhIHN0cmluZyBpbmNsdWRpbmcgJHtKU09OLnN0cmluZ2lmeShzZWFyY2hTdHJpbmcpfWAsXG4gIGpzb25TY2hlbWE6IHtcbiAgICBwYXR0ZXJuOiBgLioke3NlYXJjaFN0cmluZ30uKmBcbiAgfSxcbiAgLi4uYW5ub3RhdGlvbnNcbn0pKTtcbi8qKlxuICogQGNhdGVnb3J5IHR5cGUgaWRcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5leHBvcnQgY29uc3QgTG93ZXJjYXNlZFR5cGVJZCA9IC8qI19fUFVSRV9fKi9TeW1ib2wuZm9yKFwiQGVmZmVjdC9zY2hlbWEvVHlwZUlkL0xvd2VyY2FzZWRcIik7XG4vKipcbiAqIFZlcmlmaWVzIHRoYXQgYSBzdHJpbmcgaXMgbG93ZXJjYXNlZC5cbiAqXG4gKiBAY2F0ZWdvcnkgc3RyaW5nIGZpbHRlcnNcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5leHBvcnQgY29uc3QgbG93ZXJjYXNlZCA9IGFubm90YXRpb25zID0+IHNlbGYgPT4gc2VsZi5waXBlKGZpbHRlcihhID0+IGEgPT09IGEudG9Mb3dlckNhc2UoKSwge1xuICB0eXBlSWQ6IExvd2VyY2FzZWRUeXBlSWQsXG4gIGRlc2NyaXB0aW9uOiBcImEgbG93ZXJjYXNlIHN0cmluZ1wiLFxuICAuLi5hbm5vdGF0aW9uc1xufSkpO1xuLyoqXG4gKiBAY2F0ZWdvcnkgc3RyaW5nIGNvbnN0cnVjdG9yc1xuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBMb3dlcmNhc2VkID0gLyojX19QVVJFX18qLyRTdHJpbmcucGlwZSggLyojX19QVVJFX18qL2xvd2VyY2FzZWQoe1xuICBpZGVudGlmaWVyOiBcIkxvd2VyY2FzZWRcIixcbiAgdGl0bGU6IFwiTG93ZXJjYXNlZFwiXG59KSk7XG4vKipcbiAqIEBjYXRlZ29yeSB0eXBlIGlkXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IFVwcGVyY2FzZWRUeXBlSWQgPSAvKiNfX1BVUkVfXyovU3ltYm9sLmZvcihcIkBlZmZlY3Qvc2NoZW1hL1R5cGVJZC9VcHBlcmNhc2VkXCIpO1xuLyoqXG4gKiBWZXJpZmllcyB0aGF0IGEgc3RyaW5nIGlzIHVwcGVyY2FzZWQuXG4gKlxuICogQGNhdGVnb3J5IHN0cmluZyBmaWx0ZXJzXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IHVwcGVyY2FzZWQgPSBhbm5vdGF0aW9ucyA9PiBzZWxmID0+IHNlbGYucGlwZShmaWx0ZXIoYSA9PiBhID09PSBhLnRvVXBwZXJDYXNlKCksIHtcbiAgdHlwZUlkOiBVcHBlcmNhc2VkVHlwZUlkLFxuICBkZXNjcmlwdGlvbjogXCJhbiB1cHBlcmNhc2Ugc3RyaW5nXCIsXG4gIC4uLmFubm90YXRpb25zXG59KSk7XG4vKipcbiAqIEBjYXRlZ29yeSBzdHJpbmcgY29uc3RydWN0b3JzXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IFVwcGVyY2FzZWQgPSAvKiNfX1BVUkVfXyovJFN0cmluZy5waXBlKCAvKiNfX1BVUkVfXyovdXBwZXJjYXNlZCh7XG4gIGlkZW50aWZpZXI6IFwiVXBwZXJjYXNlZFwiLFxuICB0aXRsZTogXCJVcHBlcmNhc2VkXCJcbn0pKTtcbi8qKlxuICogQGNhdGVnb3J5IHR5cGUgaWRcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5leHBvcnQgY29uc3QgTGVuZ3RoVHlwZUlkID0gZmlsdGVyc18uTGVuZ3RoVHlwZUlkO1xuLyoqXG4gKiBAY2F0ZWdvcnkgc3RyaW5nIGZpbHRlcnNcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5leHBvcnQgY29uc3QgbGVuZ3RoID0gKGxlbmd0aCwgYW5ub3RhdGlvbnMpID0+IHNlbGYgPT4ge1xuICBjb25zdCBtaW5MZW5ndGggPSBQcmVkaWNhdGUuaXNPYmplY3QobGVuZ3RoKSA/IE1hdGgubWF4KDAsIE1hdGguZmxvb3IobGVuZ3RoLm1pbikpIDogTWF0aC5tYXgoMCwgTWF0aC5mbG9vcihsZW5ndGgpKTtcbiAgY29uc3QgbWF4TGVuZ3RoID0gUHJlZGljYXRlLmlzT2JqZWN0KGxlbmd0aCkgPyBNYXRoLm1heChtaW5MZW5ndGgsIE1hdGguZmxvb3IobGVuZ3RoLm1heCkpIDogbWluTGVuZ3RoO1xuICBpZiAobWluTGVuZ3RoICE9PSBtYXhMZW5ndGgpIHtcbiAgICByZXR1cm4gc2VsZi5waXBlKGZpbHRlcihhID0+IGEubGVuZ3RoID49IG1pbkxlbmd0aCAmJiBhLmxlbmd0aCA8PSBtYXhMZW5ndGgsIHtcbiAgICAgIHR5cGVJZDogTGVuZ3RoVHlwZUlkLFxuICAgICAgZGVzY3JpcHRpb246IGBhIHN0cmluZyBhdCBsZWFzdCAke21pbkxlbmd0aH0gY2hhcmFjdGVyKHMpIGFuZCBhdCBtb3N0ICR7bWF4TGVuZ3RofSBjaGFyYWN0ZXIocykgbG9uZ2AsXG4gICAgICBqc29uU2NoZW1hOiB7XG4gICAgICAgIG1pbkxlbmd0aCxcbiAgICAgICAgbWF4TGVuZ3RoXG4gICAgICB9LFxuICAgICAgLi4uYW5ub3RhdGlvbnNcbiAgICB9KSk7XG4gIH1cbiAgcmV0dXJuIHNlbGYucGlwZShmaWx0ZXIoYSA9PiBhLmxlbmd0aCA9PT0gbWluTGVuZ3RoLCB7XG4gICAgdHlwZUlkOiBMZW5ndGhUeXBlSWQsXG4gICAgZGVzY3JpcHRpb246IG1pbkxlbmd0aCA9PT0gMSA/IGBhIHNpbmdsZSBjaGFyYWN0ZXJgIDogYGEgc3RyaW5nICR7bWluTGVuZ3RofSBjaGFyYWN0ZXIocykgbG9uZ2AsXG4gICAganNvblNjaGVtYToge1xuICAgICAgbWluTGVuZ3RoLFxuICAgICAgbWF4TGVuZ3RoOiBtaW5MZW5ndGhcbiAgICB9LFxuICAgIC4uLmFubm90YXRpb25zXG4gIH0pKTtcbn07XG4vKipcbiAqIEEgc2NoZW1hIHJlcHJlc2VudGluZyBhIHNpbmdsZSBjaGFyYWN0ZXIuXG4gKlxuICogQGNhdGVnb3J5IHN0cmluZyBjb25zdHJ1Y3RvcnNcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5leHBvcnQgY29uc3QgQ2hhciA9IC8qI19fUFVSRV9fKi8kU3RyaW5nLnBpcGUoIC8qI19fUFVSRV9fKi9sZW5ndGgoMSwge1xuICBpZGVudGlmaWVyOiBcIkNoYXJcIlxufSkpO1xuLyoqXG4gKiBAY2F0ZWdvcnkgc3RyaW5nIGZpbHRlcnNcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5leHBvcnQgY29uc3Qgbm9uRW1wdHkgPSBhbm5vdGF0aW9ucyA9PiBtaW5MZW5ndGgoMSwge1xuICBkZXNjcmlwdGlvbjogXCJhIG5vbiBlbXB0eSBzdHJpbmdcIixcbiAgLi4uYW5ub3RhdGlvbnNcbn0pO1xuLyoqXG4gKiBUaGlzIHNjaGVtYSBjb252ZXJ0cyBhIHN0cmluZyB0byBsb3dlcmNhc2UuXG4gKlxuICogQGNhdGVnb3J5IHN0cmluZyB0cmFuc2Zvcm1hdGlvbnNcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5leHBvcnQgY29uc3QgTG93ZXJjYXNlID0gLyojX19QVVJFX18qL3RyYW5zZm9ybSgkU3RyaW5nLCBMb3dlcmNhc2VkLCB7XG4gIGRlY29kZTogcyA9PiBzLnRvTG93ZXJDYXNlKCksXG4gIGVuY29kZTogaWRlbnRpdHlcbn0pLmFubm90YXRpb25zKHtcbiAgaWRlbnRpZmllcjogXCJMb3dlcmNhc2VcIlxufSk7XG4vKipcbiAqIFRoaXMgc2NoZW1hIGNvbnZlcnRzIGEgc3RyaW5nIHRvIHVwcGVyY2FzZS5cbiAqXG4gKiBAY2F0ZWdvcnkgc3RyaW5nIHRyYW5zZm9ybWF0aW9uc1xuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBVcHBlcmNhc2UgPSAvKiNfX1BVUkVfXyovdHJhbnNmb3JtKCRTdHJpbmcsIFVwcGVyY2FzZWQsIHtcbiAgZGVjb2RlOiBzID0+IHMudG9VcHBlckNhc2UoKSxcbiAgZW5jb2RlOiBpZGVudGl0eVxufSkuYW5ub3RhdGlvbnMoe1xuICBpZGVudGlmaWVyOiBcIlVwcGVyY2FzZVwiXG59KTtcbi8qKlxuICogQGNhdGVnb3J5IHN0cmluZyBjb25zdHJ1Y3RvcnNcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5leHBvcnQgY29uc3QgVHJpbW1lZCA9IC8qI19fUFVSRV9fKi8kU3RyaW5nLnBpcGUoIC8qI19fUFVSRV9fKi90cmltbWVkKHtcbiAgaWRlbnRpZmllcjogXCJUcmltbWVkXCIsXG4gIHRpdGxlOiBcIlRyaW1tZWRcIlxufSkpO1xuLyoqXG4gKiBUaGlzIHNjaGVtYSBhbGxvd3MgcmVtb3Zpbmcgd2hpdGVzcGFjZXMgZnJvbSB0aGUgYmVnaW5uaW5nIGFuZCBlbmQgb2YgYSBzdHJpbmcuXG4gKlxuICogQGNhdGVnb3J5IHN0cmluZyB0cmFuc2Zvcm1hdGlvbnNcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5leHBvcnQgY29uc3QgVHJpbSA9IC8qI19fUFVSRV9fKi90cmFuc2Zvcm0oJFN0cmluZywgVHJpbW1lZCwge1xuICBkZWNvZGU6IHMgPT4gcy50cmltKCksXG4gIGVuY29kZTogaWRlbnRpdHlcbn0pLmFubm90YXRpb25zKHtcbiAgaWRlbnRpZmllcjogXCJUcmltXCJcbn0pO1xuLyoqXG4gKiBSZXR1cm5zIGEgc2NoZW1hIHRoYXQgYWxsb3dzIHNwbGl0dGluZyBhIHN0cmluZyBpbnRvIGFuIGFycmF5IG9mIHN0cmluZ3MuXG4gKlxuICogQGNhdGVnb3J5IHN0cmluZyB0cmFuc2Zvcm1hdGlvbnNcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5leHBvcnQgY29uc3Qgc3BsaXQgPSBzZXBhcmF0b3IgPT4gdHJhbnNmb3JtKCRTdHJpbmcsICRBcnJheSgkU3RyaW5nKSwge1xuICBkZWNvZGU6IHN0cmluZ18uc3BsaXQoc2VwYXJhdG9yKSxcbiAgZW5jb2RlOiBhcnJheV8uam9pbihzZXBhcmF0b3IpXG59KTtcbmNvbnN0IEpzb25TdHJpbmcgPSAvKiNfX1BVUkVfXyovJFN0cmluZy5hbm5vdGF0aW9ucyh7XG4gIFtBU1QuSWRlbnRpZmllckFubm90YXRpb25JZF06IFwiSnNvblN0cmluZ1wiLFxuICBbQVNULlRpdGxlQW5ub3RhdGlvbklkXTogXCJKc29uU3RyaW5nXCIsXG4gIFtBU1QuRGVzY3JpcHRpb25Bbm5vdGF0aW9uSWRdOiBcImEgSlNPTiBzdHJpbmdcIlxufSk7XG4vKipcbiAqIFRoZSBgUGFyc2VKc29uYCBjb21iaW5hdG9yIHByb3ZpZGVzIGEgbWV0aG9kIHRvIGNvbnZlcnQgSlNPTiBzdHJpbmdzIGludG8gdGhlIGB1bmtub3duYCB0eXBlIHVzaW5nIHRoZSB1bmRlcmx5aW5nXG4gKiBmdW5jdGlvbmFsaXR5IG9mIGBKU09OLnBhcnNlYC4gSXQgYWxzbyB1dGlsaXplcyBgSlNPTi5zdHJpbmdpZnlgIGZvciBlbmNvZGluZy5cbiAqXG4gKiBZb3UgY2FuIG9wdGlvbmFsbHkgcHJvdmlkZSBhIGBQYXJzZUpzb25PcHRpb25zYCB0byBjb25maWd1cmUgYm90aCBgSlNPTi5wYXJzZWAgYW5kIGBKU09OLnN0cmluZ2lmeWAgZXhlY3V0aW9ucy5cbiAqXG4gKiBPcHRpb25hbGx5LCB5b3UgY2FuIHBhc3MgYSBzY2hlbWEgYFNjaGVtYTxBLCBJLCBSPmAgdG8gb2J0YWluIGFuIGBBYCB0eXBlIGluc3RlYWQgb2YgYHVua25vd25gLlxuICpcbiAqIEBleGFtcGxlXG4gKiBpbXBvcnQgKiBhcyBTIGZyb20gXCJAZWZmZWN0L3NjaGVtYS9TY2hlbWFcIlxuICpcbiAqIGFzc2VydC5kZWVwU3RyaWN0RXF1YWwoUy5kZWNvZGVVbmtub3duU3luYyhTLnBhcnNlSnNvbigpKShge1wiYVwiOlwiMVwifWApLCB7IGE6IFwiMVwiIH0pXG4gKiBhc3NlcnQuZGVlcFN0cmljdEVxdWFsKFMuZGVjb2RlVW5rbm93blN5bmMoUy5wYXJzZUpzb24oUy5TdHJ1Y3QoeyBhOiBTLk51bWJlckZyb21TdHJpbmcgfSkpKShge1wiYVwiOlwiMVwifWApLCB7IGE6IDEgfSlcbiAqXG4gKiBAY2F0ZWdvcnkgc3RyaW5nIHRyYW5zZm9ybWF0aW9uc1xuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBwYXJzZUpzb24gPSAoc2NoZW1hLCBvKSA9PiB7XG4gIGlmIChpc1NjaGVtYShzY2hlbWEpKSB7XG4gICAgcmV0dXJuIGNvbXBvc2UocGFyc2VKc29uKG8pLCBzY2hlbWEpO1xuICB9XG4gIGNvbnN0IG9wdGlvbnMgPSBzY2hlbWE7XG4gIHJldHVybiB0cmFuc2Zvcm1PckZhaWwoSnNvblN0cmluZywgVW5rbm93biwge1xuICAgIGRlY29kZTogKHMsIF8sIGFzdCkgPT4gUGFyc2VSZXN1bHQudHJ5KHtcbiAgICAgIHRyeTogKCkgPT4gSlNPTi5wYXJzZShzLCBvcHRpb25zPy5yZXZpdmVyKSxcbiAgICAgIGNhdGNoOiBlID0+IG5ldyBQYXJzZVJlc3VsdC5UeXBlKGFzdCwgcywgZS5tZXNzYWdlKVxuICAgIH0pLFxuICAgIGVuY29kZTogKHUsIF8sIGFzdCkgPT4gUGFyc2VSZXN1bHQudHJ5KHtcbiAgICAgIHRyeTogKCkgPT4gSlNPTi5zdHJpbmdpZnkodSwgb3B0aW9ucz8ucmVwbGFjZXIsIG9wdGlvbnM/LnNwYWNlKSxcbiAgICAgIGNhdGNoOiBlID0+IG5ldyBQYXJzZVJlc3VsdC5UeXBlKGFzdCwgdSwgZS5tZXNzYWdlKVxuICAgIH0pXG4gIH0pO1xufTtcbi8qKlxuICogQGNhdGVnb3J5IHN0cmluZyBjb25zdHJ1Y3RvcnNcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5leHBvcnQgY29uc3QgTm9uRW1wdHkgPSAvKiNfX1BVUkVfXyovJFN0cmluZy5waXBlKCAvKiNfX1BVUkVfXyovbm9uRW1wdHkoe1xuICBpZGVudGlmaWVyOiBcIk5vbkVtcHR5XCIsXG4gIHRpdGxlOiBcIk5vbkVtcHR5XCJcbn0pKTtcbi8qKlxuICogQGNhdGVnb3J5IHR5cGUgaWRcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5leHBvcnQgY29uc3QgVVVJRFR5cGVJZCA9IC8qI19fUFVSRV9fKi9TeW1ib2wuZm9yKFwiQGVmZmVjdC9zY2hlbWEvVHlwZUlkL1VVSURcIik7XG5jb25zdCB1dWlkUmVnZXggPSAvXlswLTlhLWZBLUZdezh9LVswLTlhLWZBLUZdezR9LVswLTlhLWZBLUZdezR9LVswLTlhLWZBLUZdezR9LVswLTlhLWZBLUZdezEyfSQvaTtcbi8qKlxuICogUmVwcmVzZW50cyBhIFVuaXZlcnNhbGx5IFVuaXF1ZSBJZGVudGlmaWVyIChVVUlEKS5cbiAqXG4gKiBUaGlzIHNjaGVtYSBlbnN1cmVzIHRoYXQgdGhlIHByb3ZpZGVkIHN0cmluZyBhZGhlcmVzIHRvIHRoZSBzdGFuZGFyZCBVVUlEIGZvcm1hdC5cbiAqXG4gKiBAY2F0ZWdvcnkgc3RyaW5nIGNvbnN0cnVjdG9yc1xuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBVVUlEID0gLyojX19QVVJFX18qLyRTdHJpbmcucGlwZSggLyojX19QVVJFX18qL3BhdHRlcm4odXVpZFJlZ2V4LCB7XG4gIHR5cGVJZDogVVVJRFR5cGVJZCxcbiAgaWRlbnRpZmllcjogXCJVVUlEXCIsXG4gIHRpdGxlOiBcIlVVSURcIixcbiAgZGVzY3JpcHRpb246IFwiYSBVbml2ZXJzYWxseSBVbmlxdWUgSWRlbnRpZmllclwiLFxuICBhcmJpdHJhcnk6ICgpID0+IGZjID0+IGZjLnV1aWQoKVxufSkpO1xuLyoqXG4gKiBAY2F0ZWdvcnkgdHlwZSBpZFxuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBVTElEVHlwZUlkID0gLyojX19QVVJFX18qL1N5bWJvbC5mb3IoXCJAZWZmZWN0L3NjaGVtYS9UeXBlSWQvVUxJRFwiKTtcbmNvbnN0IHVsaWRSZWdleCA9IC9eWzAtN11bMC05QS1ISktNTlAtVFYtWl17MjV9JC9pO1xuLyoqXG4gKiBSZXByZXNlbnRzIGEgVW5pdmVyc2FsbHkgVW5pcXVlIExleGljb2dyYXBoaWNhbGx5IFNvcnRhYmxlIElkZW50aWZpZXIgKFVMSUQpLlxuICpcbiAqIFVMSURzIGFyZSBkZXNpZ25lZCB0byBiZSBjb21wYWN0LCBVUkwtc2FmZSwgYW5kIG9yZGVyZWQsIG1ha2luZyB0aGVtIHN1aXRhYmxlIGZvciB1c2UgYXMgaWRlbnRpZmllcnMuXG4gKiBUaGlzIHNjaGVtYSBlbnN1cmVzIHRoYXQgdGhlIHByb3ZpZGVkIHN0cmluZyBhZGhlcmVzIHRvIHRoZSBzdGFuZGFyZCBVTElEIGZvcm1hdC5cbiAqXG4gKiBAY2F0ZWdvcnkgc3RyaW5nIGNvbnN0cnVjdG9yc1xuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBVTElEID0gLyojX19QVVJFX18qLyRTdHJpbmcucGlwZSggLyojX19QVVJFX18qL3BhdHRlcm4odWxpZFJlZ2V4LCB7XG4gIHR5cGVJZDogVUxJRFR5cGVJZCxcbiAgaWRlbnRpZmllcjogXCJVTElEXCIsXG4gIHRpdGxlOiBcIlVMSURcIixcbiAgZGVzY3JpcHRpb246IFwiYSBVbml2ZXJzYWxseSBVbmlxdWUgTGV4aWNvZ3JhcGhpY2FsbHkgU29ydGFibGUgSWRlbnRpZmllclwiLFxuICBhcmJpdHJhcnk6ICgpID0+IGZjID0+IGZjLnVsaWQoKVxufSkpO1xuLyoqXG4gKiBAY2F0ZWdvcnkgdHlwZSBpZFxuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBGaW5pdGVUeXBlSWQgPSAvKiNfX1BVUkVfXyovU3ltYm9sLmZvcihcIkBlZmZlY3Qvc2NoZW1hL1R5cGVJZC9GaW5pdGVcIik7XG4vKipcbiAqIEVuc3VyZXMgdGhhdCB0aGUgcHJvdmlkZWQgdmFsdWUgaXMgYSBmaW5pdGUgbnVtYmVyLlxuICpcbiAqIFRoaXMgc2NoZW1hIGZpbHRlcnMgb3V0IG5vbi1maW5pdGUgbnVtZXJpYyB2YWx1ZXMsIGFsbG93aW5nIG9ubHkgZmluaXRlIG51bWJlcnMgdG8gcGFzcyB0aHJvdWdoLlxuICpcbiAqIEBjYXRlZ29yeSBudW1iZXIgZmlsdGVyc1xuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBmaW5pdGUgPSBhbm5vdGF0aW9ucyA9PiBzZWxmID0+IHNlbGYucGlwZShmaWx0ZXIoYSA9PiBOdW1iZXIuaXNGaW5pdGUoYSksIHtcbiAgdHlwZUlkOiBGaW5pdGVUeXBlSWQsXG4gIGRlc2NyaXB0aW9uOiBcImEgZmluaXRlIG51bWJlclwiLFxuICAuLi5hbm5vdGF0aW9uc1xufSkpO1xuLyoqXG4gKiBAY2F0ZWdvcnkgdHlwZSBpZFxuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBHcmVhdGVyVGhhblR5cGVJZCA9IGZpbHRlcnNfLkdyZWF0ZXJUaGFuVHlwZUlkO1xuLyoqXG4gKiBUaGlzIGZpbHRlciBjaGVja3Mgd2hldGhlciB0aGUgcHJvdmlkZWQgbnVtYmVyIGlzIGdyZWF0ZXIgdGhhbiB0aGUgc3BlY2lmaWVkIG1pbmltdW0uXG4gKlxuICogQGNhdGVnb3J5IG51bWJlciBmaWx0ZXJzXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IGdyZWF0ZXJUaGFuID0gKG1pbiwgYW5ub3RhdGlvbnMpID0+IHNlbGYgPT4gc2VsZi5waXBlKGZpbHRlcihhID0+IGEgPiBtaW4sIHtcbiAgdHlwZUlkOiBHcmVhdGVyVGhhblR5cGVJZCxcbiAgZGVzY3JpcHRpb246IG1pbiA9PT0gMCA/IFwiYSBwb3NpdGl2ZSBudW1iZXJcIiA6IGBhIG51bWJlciBncmVhdGVyIHRoYW4gJHttaW59YCxcbiAganNvblNjaGVtYToge1xuICAgIGV4Y2x1c2l2ZU1pbmltdW06IG1pblxuICB9LFxuICAuLi5hbm5vdGF0aW9uc1xufSkpO1xuLyoqXG4gKiBAY2F0ZWdvcnkgdHlwZSBpZFxuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBHcmVhdGVyVGhhbk9yRXF1YWxUb1R5cGVJZCA9IGZpbHRlcnNfLkdyZWF0ZXJUaGFuT3JFcXVhbFRvVHlwZUlkO1xuLyoqXG4gKiBUaGlzIGZpbHRlciBjaGVja3Mgd2hldGhlciB0aGUgcHJvdmlkZWQgbnVtYmVyIGlzIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byB0aGUgc3BlY2lmaWVkIG1pbmltdW0uXG4gKlxuICogQGNhdGVnb3J5IG51bWJlciBmaWx0ZXJzXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IGdyZWF0ZXJUaGFuT3JFcXVhbFRvID0gKG1pbiwgYW5ub3RhdGlvbnMpID0+IHNlbGYgPT4gc2VsZi5waXBlKGZpbHRlcihhID0+IGEgPj0gbWluLCB7XG4gIHR5cGVJZDogR3JlYXRlclRoYW5PckVxdWFsVG9UeXBlSWQsXG4gIGRlc2NyaXB0aW9uOiBtaW4gPT09IDAgPyBcImEgbm9uLW5lZ2F0aXZlIG51bWJlclwiIDogYGEgbnVtYmVyIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byAke21pbn1gLFxuICBqc29uU2NoZW1hOiB7XG4gICAgbWluaW11bTogbWluXG4gIH0sXG4gIC4uLmFubm90YXRpb25zXG59KSk7XG4vKipcbiAqIEBjYXRlZ29yeSB0eXBlIGlkXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IE11bHRpcGxlT2ZUeXBlSWQgPSAvKiNfX1BVUkVfXyovU3ltYm9sLmZvcihcIkBlZmZlY3Qvc2NoZW1hL1R5cGVJZC9NdWx0aXBsZU9mXCIpO1xuLyoqXG4gKiBAY2F0ZWdvcnkgbnVtYmVyIGZpbHRlcnNcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5leHBvcnQgY29uc3QgbXVsdGlwbGVPZiA9IChkaXZpc29yLCBhbm5vdGF0aW9ucykgPT4gc2VsZiA9PiBzZWxmLnBpcGUoZmlsdGVyKGEgPT4gbnVtYmVyXy5yZW1haW5kZXIoYSwgZGl2aXNvcikgPT09IDAsIHtcbiAgdHlwZUlkOiBNdWx0aXBsZU9mVHlwZUlkLFxuICBkZXNjcmlwdGlvbjogYGEgbnVtYmVyIGRpdmlzaWJsZSBieSAke2Rpdmlzb3J9YCxcbiAganNvblNjaGVtYToge1xuICAgIG11bHRpcGxlT2Y6IE1hdGguYWJzKGRpdmlzb3IpXG4gIH0sXG4gIC8vIHNwZWMgcmVxdWlyZXMgcG9zaXRpdmUgZGl2aXNvclxuICAuLi5hbm5vdGF0aW9uc1xufSkpO1xuLyoqXG4gKiBAY2F0ZWdvcnkgdHlwZSBpZFxuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBJbnRUeXBlSWQgPSBmaWx0ZXJzXy5JbnRUeXBlSWQ7XG4vKipcbiAqIEBjYXRlZ29yeSBudW1iZXIgZmlsdGVyc1xuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBpbnQgPSBhbm5vdGF0aW9ucyA9PiBzZWxmID0+IHNlbGYucGlwZShmaWx0ZXIoYSA9PiBOdW1iZXIuaXNTYWZlSW50ZWdlcihhKSwge1xuICB0eXBlSWQ6IEludFR5cGVJZCxcbiAgdGl0bGU6IFwiaW50ZWdlclwiLFxuICBkZXNjcmlwdGlvbjogXCJhbiBpbnRlZ2VyXCIsXG4gIGpzb25TY2hlbWE6IHtcbiAgICB0eXBlOiBcImludGVnZXJcIlxuICB9LFxuICAuLi5hbm5vdGF0aW9uc1xufSkpO1xuLyoqXG4gKiBAY2F0ZWdvcnkgdHlwZSBpZFxuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBMZXNzVGhhblR5cGVJZCA9IGZpbHRlcnNfLkxlc3NUaGFuVHlwZUlkO1xuLyoqXG4gKiBUaGlzIGZpbHRlciBjaGVja3Mgd2hldGhlciB0aGUgcHJvdmlkZWQgbnVtYmVyIGlzIGxlc3MgdGhhbiB0aGUgc3BlY2lmaWVkIG1heGltdW0uXG4gKlxuICogQGNhdGVnb3J5IG51bWJlciBmaWx0ZXJzXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IGxlc3NUaGFuID0gKG1heCwgYW5ub3RhdGlvbnMpID0+IHNlbGYgPT4gc2VsZi5waXBlKGZpbHRlcihhID0+IGEgPCBtYXgsIHtcbiAgdHlwZUlkOiBMZXNzVGhhblR5cGVJZCxcbiAgZGVzY3JpcHRpb246IG1heCA9PT0gMCA/IFwiYSBuZWdhdGl2ZSBudW1iZXJcIiA6IGBhIG51bWJlciBsZXNzIHRoYW4gJHttYXh9YCxcbiAganNvblNjaGVtYToge1xuICAgIGV4Y2x1c2l2ZU1heGltdW06IG1heFxuICB9LFxuICAuLi5hbm5vdGF0aW9uc1xufSkpO1xuLyoqXG4gKiBAY2F0ZWdvcnkgdHlwZSBpZFxuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBMZXNzVGhhbk9yRXF1YWxUb1R5cGVJZCA9IGZpbHRlcnNfLkxlc3NUaGFuT3JFcXVhbFRvVHlwZUlkO1xuLyoqXG4gKiBUaGlzIHNjaGVtYSBjaGVja3Mgd2hldGhlciB0aGUgcHJvdmlkZWQgbnVtYmVyIGlzIGxlc3MgdGhhbiBvciBlcXVhbCB0byB0aGUgc3BlY2lmaWVkIG1heGltdW0uXG4gKlxuICogQGNhdGVnb3J5IG51bWJlciBmaWx0ZXJzXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IGxlc3NUaGFuT3JFcXVhbFRvID0gKG1heCwgYW5ub3RhdGlvbnMpID0+IHNlbGYgPT4gc2VsZi5waXBlKGZpbHRlcihhID0+IGEgPD0gbWF4LCB7XG4gIHR5cGVJZDogTGVzc1RoYW5PckVxdWFsVG9UeXBlSWQsXG4gIGRlc2NyaXB0aW9uOiBtYXggPT09IDAgPyBcImEgbm9uLXBvc2l0aXZlIG51bWJlclwiIDogYGEgbnVtYmVyIGxlc3MgdGhhbiBvciBlcXVhbCB0byAke21heH1gLFxuICBqc29uU2NoZW1hOiB7XG4gICAgbWF4aW11bTogbWF4XG4gIH0sXG4gIC4uLmFubm90YXRpb25zXG59KSk7XG4vKipcbiAqIEBjYXRlZ29yeSB0eXBlIGlkXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IEJldHdlZW5UeXBlSWQgPSBmaWx0ZXJzXy5CZXR3ZWVuVHlwZUlkO1xuLyoqXG4gKiBUaGlzIGZpbHRlciBjaGVja3Mgd2hldGhlciB0aGUgcHJvdmlkZWQgbnVtYmVyIGZhbGxzIHdpdGhpbiB0aGUgc3BlY2lmaWVkIG1pbmltdW0gYW5kIG1heGltdW0gdmFsdWVzLlxuICpcbiAqIEBjYXRlZ29yeSBudW1iZXIgZmlsdGVyc1xuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBiZXR3ZWVuID0gKG1pbiwgbWF4LCBhbm5vdGF0aW9ucykgPT4gc2VsZiA9PiBzZWxmLnBpcGUoZmlsdGVyKGEgPT4gYSA+PSBtaW4gJiYgYSA8PSBtYXgsIHtcbiAgdHlwZUlkOiBCZXR3ZWVuVHlwZUlkLFxuICBkZXNjcmlwdGlvbjogYGEgbnVtYmVyIGJldHdlZW4gJHttaW59IGFuZCAke21heH1gLFxuICBqc29uU2NoZW1hOiB7XG4gICAgbWF4aW11bTogbWF4LFxuICAgIG1pbmltdW06IG1pblxuICB9LFxuICAuLi5hbm5vdGF0aW9uc1xufSkpO1xuLyoqXG4gKiBAY2F0ZWdvcnkgdHlwZSBpZFxuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBOb25OYU5UeXBlSWQgPSAvKiNfX1BVUkVfXyovU3ltYm9sLmZvcihcIkBlZmZlY3Qvc2NoZW1hL1R5cGVJZC9Ob25OYU5cIik7XG4vKipcbiAqIEBjYXRlZ29yeSBudW1iZXIgZmlsdGVyc1xuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBub25OYU4gPSBhbm5vdGF0aW9ucyA9PiBzZWxmID0+IHNlbGYucGlwZShmaWx0ZXIoYSA9PiAhTnVtYmVyLmlzTmFOKGEpLCB7XG4gIHR5cGVJZDogTm9uTmFOVHlwZUlkLFxuICBkZXNjcmlwdGlvbjogXCJhIG51bWJlciBleGNsdWRpbmcgTmFOXCIsXG4gIC4uLmFubm90YXRpb25zXG59KSk7XG4vKipcbiAqIEBjYXRlZ29yeSBudW1iZXIgZmlsdGVyc1xuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBwb3NpdGl2ZSA9IGFubm90YXRpb25zID0+IGdyZWF0ZXJUaGFuKDAsIGFubm90YXRpb25zKTtcbi8qKlxuICogQGNhdGVnb3J5IG51bWJlciBmaWx0ZXJzXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IG5lZ2F0aXZlID0gYW5ub3RhdGlvbnMgPT4gbGVzc1RoYW4oMCwgYW5ub3RhdGlvbnMpO1xuLyoqXG4gKiBAY2F0ZWdvcnkgbnVtYmVyIGZpbHRlcnNcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5leHBvcnQgY29uc3Qgbm9uUG9zaXRpdmUgPSBhbm5vdGF0aW9ucyA9PiBsZXNzVGhhbk9yRXF1YWxUbygwLCBhbm5vdGF0aW9ucyk7XG4vKipcbiAqIEBjYXRlZ29yeSBudW1iZXIgZmlsdGVyc1xuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBub25OZWdhdGl2ZSA9IGFubm90YXRpb25zID0+IGdyZWF0ZXJUaGFuT3JFcXVhbFRvKDAsIGFubm90YXRpb25zKTtcbi8qKlxuICogQ2xhbXBzIGEgbnVtYmVyIGJldHdlZW4gYSBtaW5pbXVtIGFuZCBhIG1heGltdW0gdmFsdWUuXG4gKlxuICogQGNhdGVnb3J5IG51bWJlciB0cmFuc2Zvcm1hdGlvbnNcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5leHBvcnQgY29uc3QgY2xhbXAgPSAobWluaW11bSwgbWF4aW11bSkgPT4gc2VsZiA9PiB0cmFuc2Zvcm0oc2VsZiwgc2VsZi5waXBlKHR5cGVTY2hlbWEsIGJldHdlZW4obWluaW11bSwgbWF4aW11bSkpLCB7XG4gIHN0cmljdDogZmFsc2UsXG4gIGRlY29kZTogc2VsZiA9PiBudW1iZXJfLmNsYW1wKHNlbGYsIHtcbiAgICBtaW5pbXVtLFxuICAgIG1heGltdW1cbiAgfSksXG4gIGVuY29kZTogaWRlbnRpdHlcbn0pO1xuLyoqXG4gKiBUaGlzIHNjaGVtYSB0cmFuc2Zvcm1zIGEgYHN0cmluZ2AgaW50byBhIGBudW1iZXJgIGJ5IHBhcnNpbmcgdGhlIHN0cmluZyB1c2luZyB0aGUgYE51bWJlcmAgZnVuY3Rpb24uXG4gKlxuICogSXQgcmV0dXJucyBhbiBlcnJvciBpZiB0aGUgdmFsdWUgY2FuJ3QgYmUgY29udmVydGVkIChmb3IgZXhhbXBsZSB3aGVuIG5vbi1udW1lcmljIGNoYXJhY3RlcnMgYXJlIHByb3ZpZGVkKS5cbiAqXG4gKiBUaGUgZm9sbG93aW5nIHNwZWNpYWwgc3RyaW5nIHZhbHVlcyBhcmUgc3VwcG9ydGVkOiBcIk5hTlwiLCBcIkluZmluaXR5XCIsIFwiLUluZmluaXR5XCIuXG4gKlxuICogQGNhdGVnb3J5IG51bWJlciBjb25zdHJ1Y3RvcnNcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5leHBvcnQgY29uc3QgTnVtYmVyRnJvbVN0cmluZyA9IC8qI19fUFVSRV9fKi90cmFuc2Zvcm1PckZhaWwoJFN0cmluZywgJE51bWJlciwge1xuICBkZWNvZGU6IChzLCBfLCBhc3QpID0+IFBhcnNlUmVzdWx0LmZyb21PcHRpb24obnVtYmVyXy5wYXJzZShzKSwgKCkgPT4gbmV3IFBhcnNlUmVzdWx0LlR5cGUoYXN0LCBzKSksXG4gIGVuY29kZTogbiA9PiBQYXJzZVJlc3VsdC5zdWNjZWVkKFN0cmluZyhuKSlcbn0pLmFubm90YXRpb25zKHtcbiAgaWRlbnRpZmllcjogXCJOdW1iZXJGcm9tU3RyaW5nXCJcbn0pO1xuLyoqXG4gKiBAY2F0ZWdvcnkgbnVtYmVyIGNvbnN0cnVjdG9yc1xuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBGaW5pdGUgPSAvKiNfX1BVUkVfXyovJE51bWJlci5waXBlKCAvKiNfX1BVUkVfXyovZmluaXRlKHtcbiAgaWRlbnRpZmllcjogXCJGaW5pdGVcIixcbiAgdGl0bGU6IFwiRmluaXRlXCJcbn0pKTtcbi8qKlxuICogQGNhdGVnb3J5IG51bWJlciBjb25zdHJ1Y3RvcnNcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5leHBvcnQgY29uc3QgSW50ID0gLyojX19QVVJFX18qLyROdW1iZXIucGlwZSggLyojX19QVVJFX18qL2ludCh7XG4gIGlkZW50aWZpZXI6IFwiSW50XCIsXG4gIHRpdGxlOiBcIkludFwiXG59KSk7XG4vKipcbiAqIEBjYXRlZ29yeSBudW1iZXIgY29uc3RydWN0b3JzXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IE5vbk5hTiA9IC8qI19fUFVSRV9fKi8kTnVtYmVyLnBpcGUoIC8qI19fUFVSRV9fKi9ub25OYU4oe1xuICBpZGVudGlmaWVyOiBcIk5vbk5hTlwiLFxuICB0aXRsZTogXCJOb25OYU5cIlxufSkpO1xuLyoqXG4gKiBAY2F0ZWdvcnkgbnVtYmVyIGNvbnN0cnVjdG9yc1xuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBQb3NpdGl2ZSA9IC8qI19fUFVSRV9fKi8kTnVtYmVyLnBpcGUoIC8qI19fUFVSRV9fKi9wb3NpdGl2ZSh7XG4gIGlkZW50aWZpZXI6IFwiUG9zaXRpdmVcIixcbiAgdGl0bGU6IFwiUG9zaXRpdmVcIlxufSkpO1xuLyoqXG4gKiBAY2F0ZWdvcnkgbnVtYmVyIGNvbnN0cnVjdG9yc1xuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBOZWdhdGl2ZSA9IC8qI19fUFVSRV9fKi8kTnVtYmVyLnBpcGUoIC8qI19fUFVSRV9fKi9uZWdhdGl2ZSh7XG4gIGlkZW50aWZpZXI6IFwiTmVnYXRpdmVcIixcbiAgdGl0bGU6IFwiTmVnYXRpdmVcIlxufSkpO1xuLyoqXG4gKiBAY2F0ZWdvcnkgbnVtYmVyIGNvbnN0cnVjdG9yc1xuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBOb25Qb3NpdGl2ZSA9IC8qI19fUFVSRV9fKi8kTnVtYmVyLnBpcGUoIC8qI19fUFVSRV9fKi9ub25Qb3NpdGl2ZSh7XG4gIGlkZW50aWZpZXI6IFwiTm9uUG9zaXRpdmVcIixcbiAgdGl0bGU6IFwiTm9uUG9zaXRpdmVcIlxufSkpO1xuLyoqXG4gKiBAY2F0ZWdvcnkgbnVtYmVyIGNvbnN0cnVjdG9yc1xuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBOb25OZWdhdGl2ZSA9IC8qI19fUFVSRV9fKi8kTnVtYmVyLnBpcGUoIC8qI19fUFVSRV9fKi9ub25OZWdhdGl2ZSh7XG4gIGlkZW50aWZpZXI6IFwiTm9uTmVnYXRpdmVcIixcbiAgdGl0bGU6IFwiTm9uTmVnYXRpdmVcIlxufSkpO1xuLyoqXG4gKiBAY2F0ZWdvcnkgdHlwZSBpZFxuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBKc29uTnVtYmVyVHlwZUlkID0gLyojX19QVVJFX18qL1N5bWJvbC5mb3IoXCJAZWZmZWN0L3NjaGVtYS9UeXBlSWQvSnNvbk51bWJlclwiKTtcbi8qKlxuICogVGhlIGBKc29uTnVtYmVyYCBpcyBhIHNjaGVtYSBmb3IgcmVwcmVzZW50aW5nIEpTT04gbnVtYmVycy4gSXQgZW5zdXJlcyB0aGF0IHRoZSBwcm92aWRlZCB2YWx1ZSBpcyBhIHZhbGlkXG4gKiBudW1iZXIgYnkgZmlsdGVyaW5nIG91dCBgTmFOYCBhbmQgYCgrLy0pIEluZmluaXR5YC4gVGhpcyBpcyB1c2VmdWwgd2hlbiB5b3Ugd2FudCB0byB2YWxpZGF0ZSBhbmQgcmVwcmVzZW50IG51bWJlcnMgaW4gSlNPTlxuICogZm9ybWF0LlxuICpcbiAqIEBleGFtcGxlXG4gKiBpbXBvcnQgKiBhcyBTIGZyb20gXCJAZWZmZWN0L3NjaGVtYS9TY2hlbWFcIlxuICpcbiAqIGNvbnN0IGlzID0gUy5pcyhTLkpzb25OdW1iZXIpXG4gKlxuICogYXNzZXJ0LmRlZXBTdHJpY3RFcXVhbChpcyg0MiksIHRydWUpXG4gKiBhc3NlcnQuZGVlcFN0cmljdEVxdWFsKGlzKE51bWJlci5OYU4pLCBmYWxzZSlcbiAqIGFzc2VydC5kZWVwU3RyaWN0RXF1YWwoaXMoTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZKSwgZmFsc2UpXG4gKiBhc3NlcnQuZGVlcFN0cmljdEVxdWFsKGlzKE51bWJlci5ORUdBVElWRV9JTkZJTklUWSksIGZhbHNlKVxuICpcbiAqIEBjYXRlZ29yeSBudW1iZXIgY29uc3RydWN0b3JzXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IEpzb25OdW1iZXIgPSAvKiNfX1BVUkVfXyovJE51bWJlci5waXBlKCAvKiNfX1BVUkVfXyovZmlsdGVyKG4gPT4gIU51bWJlci5pc05hTihuKSAmJiBOdW1iZXIuaXNGaW5pdGUobiksIHtcbiAgdHlwZUlkOiBKc29uTnVtYmVyVHlwZUlkLFxuICBpZGVudGlmaWVyOiBcIkpzb25OdW1iZXJcIixcbiAgdGl0bGU6IFwiSlNPTi1jb21wYXRpYmxlIG51bWJlclwiLFxuICBkZXNjcmlwdGlvbjogXCJhIEpTT04tY29tcGF0aWJsZSBudW1iZXIsIGV4Y2x1ZGluZyBOYU4sICtJbmZpbml0eSwgYW5kIC1JbmZpbml0eVwiLFxuICBqc29uU2NoZW1hOiB7XG4gICAgdHlwZTogXCJudW1iZXJcIlxuICB9XG59KSk7XG4vKipcbiAqIEBjYXRlZ29yeSBib29sZWFuIHRyYW5zZm9ybWF0aW9uc1xuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBOb3QgPSAvKiNfX1BVUkVfXyovdHJhbnNmb3JtKCRCb29sZWFuLCAkQm9vbGVhbiwge1xuICBkZWNvZGU6IGJvb2xlYW5fLm5vdCxcbiAgZW5jb2RlOiBib29sZWFuXy5ub3Rcbn0pO1xuY29uc3QgJFN5bWJvbCA9IC8qI19fUFVSRV9fKi90cmFuc2Zvcm0oJFN0cmluZywgU3ltYm9sRnJvbVNlbGYsIHtcbiAgc3RyaWN0OiBmYWxzZSxcbiAgZGVjb2RlOiBzID0+IFN5bWJvbC5mb3IocyksXG4gIGVuY29kZTogc3ltID0+IHN5bS5kZXNjcmlwdGlvblxufSkuYW5ub3RhdGlvbnMoe1xuICBpZGVudGlmaWVyOiBcInN5bWJvbFwiXG59KTtcbmV4cG9ydCB7XG4vKipcbiAqIFRoaXMgc2NoZW1hIHRyYW5zZm9ybXMgYSBgc3RyaW5nYCBpbnRvIGEgYHN5bWJvbGAuXG4gKlxuICogQGNhdGVnb3J5IHN5bWJvbCB0cmFuc2Zvcm1hdGlvbnNcbiAqIEBzaW5jZSAxLjAuMFxuICovXG4kU3ltYm9sIGFzIFN5bWJvbCB9O1xuLyoqXG4gKiBAY2F0ZWdvcnkgdHlwZSBpZFxuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBHcmVhdGVyVGhhbkJpZ0ludFR5cGVJZCA9IGZpbHRlcnNfLkdyZWF0ZXJUaGFuQmlnaW50VHlwZUlkO1xuLyoqXG4gKiBAY2F0ZWdvcnkgYmlnaW50IGZpbHRlcnNcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5leHBvcnQgY29uc3QgZ3JlYXRlclRoYW5CaWdJbnQgPSAobWluLCBhbm5vdGF0aW9ucykgPT4gc2VsZiA9PiBzZWxmLnBpcGUoZmlsdGVyKGEgPT4gYSA+IG1pbiwge1xuICB0eXBlSWQ6IHtcbiAgICBpZDogR3JlYXRlclRoYW5CaWdJbnRUeXBlSWQsXG4gICAgYW5ub3RhdGlvbjoge1xuICAgICAgbWluXG4gICAgfVxuICB9LFxuICBkZXNjcmlwdGlvbjogbWluID09PSAwbiA/IFwiYSBwb3NpdGl2ZSBiaWdpbnRcIiA6IGBhIGJpZ2ludCBncmVhdGVyIHRoYW4gJHttaW59bmAsXG4gIC4uLmFubm90YXRpb25zXG59KSk7XG4vKipcbiAqIEBjYXRlZ29yeSB0eXBlIGlkXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IEdyZWF0ZXJUaGFuT3JFcXVhbFRvQmlnSW50VHlwZUlkID0gZmlsdGVyc18uR3JlYXRlclRoYW5PckVxdWFsVG9CaWdJbnRUeXBlSWQ7XG4vKipcbiAqIEBjYXRlZ29yeSBiaWdpbnQgZmlsdGVyc1xuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBncmVhdGVyVGhhbk9yRXF1YWxUb0JpZ0ludCA9IChtaW4sIGFubm90YXRpb25zKSA9PiBzZWxmID0+IHNlbGYucGlwZShmaWx0ZXIoYSA9PiBhID49IG1pbiwge1xuICB0eXBlSWQ6IHtcbiAgICBpZDogR3JlYXRlclRoYW5PckVxdWFsVG9CaWdJbnRUeXBlSWQsXG4gICAgYW5ub3RhdGlvbjoge1xuICAgICAgbWluXG4gICAgfVxuICB9LFxuICBkZXNjcmlwdGlvbjogbWluID09PSAwbiA/IFwiYSBub24tbmVnYXRpdmUgYmlnaW50XCIgOiBgYSBiaWdpbnQgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvICR7bWlufW5gLFxuICAuLi5hbm5vdGF0aW9uc1xufSkpO1xuLyoqXG4gKiBAY2F0ZWdvcnkgdHlwZSBpZFxuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBMZXNzVGhhbkJpZ0ludFR5cGVJZCA9IGZpbHRlcnNfLkxlc3NUaGFuQmlnSW50VHlwZUlkO1xuLyoqXG4gKiBAY2F0ZWdvcnkgYmlnaW50IGZpbHRlcnNcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5leHBvcnQgY29uc3QgbGVzc1RoYW5CaWdJbnQgPSAobWF4LCBhbm5vdGF0aW9ucykgPT4gc2VsZiA9PiBzZWxmLnBpcGUoZmlsdGVyKGEgPT4gYSA8IG1heCwge1xuICB0eXBlSWQ6IHtcbiAgICBpZDogTGVzc1RoYW5CaWdJbnRUeXBlSWQsXG4gICAgYW5ub3RhdGlvbjoge1xuICAgICAgbWF4XG4gICAgfVxuICB9LFxuICBkZXNjcmlwdGlvbjogbWF4ID09PSAwbiA/IFwiYSBuZWdhdGl2ZSBiaWdpbnRcIiA6IGBhIGJpZ2ludCBsZXNzIHRoYW4gJHttYXh9bmAsXG4gIC4uLmFubm90YXRpb25zXG59KSk7XG4vKipcbiAqIEBjYXRlZ29yeSB0eXBlIGlkXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IExlc3NUaGFuT3JFcXVhbFRvQmlnSW50VHlwZUlkID0gZmlsdGVyc18uTGVzc1RoYW5PckVxdWFsVG9CaWdJbnRUeXBlSWQ7XG4vKipcbiAqIEBjYXRlZ29yeSBiaWdpbnQgZmlsdGVyc1xuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBsZXNzVGhhbk9yRXF1YWxUb0JpZ0ludCA9IChtYXgsIGFubm90YXRpb25zKSA9PiBzZWxmID0+IHNlbGYucGlwZShmaWx0ZXIoYSA9PiBhIDw9IG1heCwge1xuICB0eXBlSWQ6IHtcbiAgICBpZDogTGVzc1RoYW5PckVxdWFsVG9CaWdJbnRUeXBlSWQsXG4gICAgYW5ub3RhdGlvbjoge1xuICAgICAgbWF4XG4gICAgfVxuICB9LFxuICBkZXNjcmlwdGlvbjogbWF4ID09PSAwbiA/IFwiYSBub24tcG9zaXRpdmUgYmlnaW50XCIgOiBgYSBiaWdpbnQgbGVzcyB0aGFuIG9yIGVxdWFsIHRvICR7bWF4fW5gLFxuICAuLi5hbm5vdGF0aW9uc1xufSkpO1xuLyoqXG4gKiBAY2F0ZWdvcnkgdHlwZSBpZFxuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBCZXR3ZWVuQmlnSW50VHlwZUlkID0gZmlsdGVyc18uQmV0d2VlbkJpZ2ludFR5cGVJZDtcbi8qKlxuICogQGNhdGVnb3J5IGJpZ2ludCBmaWx0ZXJzXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IGJldHdlZW5CaWdJbnQgPSAobWluLCBtYXgsIGFubm90YXRpb25zKSA9PiBzZWxmID0+IHNlbGYucGlwZShmaWx0ZXIoYSA9PiBhID49IG1pbiAmJiBhIDw9IG1heCwge1xuICB0eXBlSWQ6IHtcbiAgICBpZDogQmV0d2VlbkJpZ0ludFR5cGVJZCxcbiAgICBhbm5vdGF0aW9uOiB7XG4gICAgICBtYXgsXG4gICAgICBtaW5cbiAgICB9XG4gIH0sXG4gIGRlc2NyaXB0aW9uOiBgYSBiaWdpbnQgYmV0d2VlbiAke21pbn1uIGFuZCAke21heH1uYCxcbiAgLi4uYW5ub3RhdGlvbnNcbn0pKTtcbi8qKlxuICogQGNhdGVnb3J5IGJpZ2ludCBmaWx0ZXJzXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IHBvc2l0aXZlQmlnSW50ID0gYW5ub3RhdGlvbnMgPT4gZ3JlYXRlclRoYW5CaWdJbnQoMG4sIGFubm90YXRpb25zKTtcbi8qKlxuICogQGNhdGVnb3J5IGJpZ2ludCBmaWx0ZXJzXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IG5lZ2F0aXZlQmlnSW50ID0gYW5ub3RhdGlvbnMgPT4gbGVzc1RoYW5CaWdJbnQoMG4sIGFubm90YXRpb25zKTtcbi8qKlxuICogQGNhdGVnb3J5IGJpZ2ludCBmaWx0ZXJzXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IG5vbk5lZ2F0aXZlQmlnSW50ID0gYW5ub3RhdGlvbnMgPT4gZ3JlYXRlclRoYW5PckVxdWFsVG9CaWdJbnQoMG4sIGFubm90YXRpb25zKTtcbi8qKlxuICogQGNhdGVnb3J5IGJpZ2ludCBmaWx0ZXJzXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IG5vblBvc2l0aXZlQmlnSW50ID0gYW5ub3RhdGlvbnMgPT4gbGVzc1RoYW5PckVxdWFsVG9CaWdJbnQoMG4sIGFubm90YXRpb25zKTtcbi8qKlxuICogQ2xhbXBzIGEgYmlnaW50IGJldHdlZW4gYSBtaW5pbXVtIGFuZCBhIG1heGltdW0gdmFsdWUuXG4gKlxuICogQGNhdGVnb3J5IGJpZ2ludCB0cmFuc2Zvcm1hdGlvbnNcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5leHBvcnQgY29uc3QgY2xhbXBCaWdJbnQgPSAobWluaW11bSwgbWF4aW11bSkgPT4gc2VsZiA9PiB0cmFuc2Zvcm0oc2VsZiwgc2VsZi5waXBlKHR5cGVTY2hlbWEsIGJldHdlZW5CaWdJbnQobWluaW11bSwgbWF4aW11bSkpLCB7XG4gIHN0cmljdDogZmFsc2UsXG4gIGRlY29kZTogc2VsZiA9PiBiaWdJbnRfLmNsYW1wKHNlbGYsIHtcbiAgICBtaW5pbXVtLFxuICAgIG1heGltdW1cbiAgfSksXG4gIGVuY29kZTogaWRlbnRpdHlcbn0pO1xuY29uc3QgYmlnaW50ID0gLyojX19QVVJFX18qL3RyYW5zZm9ybU9yRmFpbCgkU3RyaW5nLCBCaWdJbnRGcm9tU2VsZiwge1xuICBkZWNvZGU6IChzLCBfLCBhc3QpID0+IFBhcnNlUmVzdWx0LmZyb21PcHRpb24oYmlnSW50Xy5mcm9tU3RyaW5nKHMpLCAoKSA9PiBuZXcgUGFyc2VSZXN1bHQuVHlwZShhc3QsIHMpKSxcbiAgZW5jb2RlOiBuID0+IFBhcnNlUmVzdWx0LnN1Y2NlZWQoU3RyaW5nKG4pKVxufSkuYW5ub3RhdGlvbnMoe1xuICBpZGVudGlmaWVyOiBcImJpZ2ludFwiXG59KTtcbmV4cG9ydCB7XG4vKipcbiAqIFRoaXMgc2NoZW1hIHRyYW5zZm9ybXMgYSBgc3RyaW5nYCBpbnRvIGEgYGJpZ2ludGAgYnkgcGFyc2luZyB0aGUgc3RyaW5nIHVzaW5nIHRoZSBgQmlnSW50YCBmdW5jdGlvbi5cbiAqXG4gKiBJdCByZXR1cm5zIGFuIGVycm9yIGlmIHRoZSB2YWx1ZSBjYW4ndCBiZSBjb252ZXJ0ZWQgKGZvciBleGFtcGxlIHdoZW4gbm9uLW51bWVyaWMgY2hhcmFjdGVycyBhcmUgcHJvdmlkZWQpLlxuICpcbiAqIEBjYXRlZ29yeSBiaWdpbnQgdHJhbnNmb3JtYXRpb25zXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuYmlnaW50IGFzIEJpZ0ludCB9O1xuLyoqXG4gKiBAY2F0ZWdvcnkgYmlnaW50IGNvbnN0cnVjdG9yc1xuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBQb3NpdGl2ZUJpZ0ludEZyb21TZWxmID0gLyojX19QVVJFX18qL0JpZ0ludEZyb21TZWxmLnBpcGUoIC8qI19fUFVSRV9fKi9wb3NpdGl2ZUJpZ0ludCh7XG4gIGlkZW50aWZpZXI6IFwiUG9zaXRpdmVCaWdpbnRGcm9tU2VsZlwiLFxuICB0aXRsZTogXCJQb3NpdGl2ZUJpZ2ludEZyb21TZWxmXCJcbn0pKTtcbi8qKlxuICogQGNhdGVnb3J5IGJpZ2ludCBjb25zdHJ1Y3RvcnNcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5leHBvcnQgY29uc3QgUG9zaXRpdmVCaWdJbnQgPSAvKiNfX1BVUkVfXyovYmlnaW50LnBpcGUoIC8qI19fUFVSRV9fKi9wb3NpdGl2ZUJpZ0ludCh7XG4gIGlkZW50aWZpZXI6IFwiUG9zaXRpdmVCaWdpbnRcIixcbiAgdGl0bGU6IFwiUG9zaXRpdmVCaWdpbnRcIlxufSkpO1xuLyoqXG4gKiBAY2F0ZWdvcnkgYmlnaW50IGNvbnN0cnVjdG9yc1xuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBOZWdhdGl2ZUJpZ0ludEZyb21TZWxmID0gLyojX19QVVJFX18qL0JpZ0ludEZyb21TZWxmLnBpcGUoIC8qI19fUFVSRV9fKi9uZWdhdGl2ZUJpZ0ludCh7XG4gIGlkZW50aWZpZXI6IFwiTmVnYXRpdmVCaWdpbnRGcm9tU2VsZlwiLFxuICB0aXRsZTogXCJOZWdhdGl2ZUJpZ2ludEZyb21TZWxmXCJcbn0pKTtcbi8qKlxuICogQGNhdGVnb3J5IGJpZ2ludCBjb25zdHJ1Y3RvcnNcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5leHBvcnQgY29uc3QgTmVnYXRpdmVCaWdJbnQgPSAvKiNfX1BVUkVfXyovYmlnaW50LnBpcGUoIC8qI19fUFVSRV9fKi9uZWdhdGl2ZUJpZ0ludCh7XG4gIGlkZW50aWZpZXI6IFwiTmVnYXRpdmVCaWdpbnRcIixcbiAgdGl0bGU6IFwiTmVnYXRpdmVCaWdpbnRcIlxufSkpO1xuLyoqXG4gKiBAY2F0ZWdvcnkgYmlnaW50IGNvbnN0cnVjdG9yc1xuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBOb25Qb3NpdGl2ZUJpZ0ludEZyb21TZWxmID0gLyojX19QVVJFX18qL0JpZ0ludEZyb21TZWxmLnBpcGUoIC8qI19fUFVSRV9fKi9ub25Qb3NpdGl2ZUJpZ0ludCh7XG4gIGlkZW50aWZpZXI6IFwiTm9uUG9zaXRpdmVCaWdpbnRGcm9tU2VsZlwiLFxuICB0aXRsZTogXCJOb25Qb3NpdGl2ZUJpZ2ludEZyb21TZWxmXCJcbn0pKTtcbi8qKlxuICogQGNhdGVnb3J5IGJpZ2ludCBjb25zdHJ1Y3RvcnNcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5leHBvcnQgY29uc3QgTm9uUG9zaXRpdmVCaWdJbnQgPSAvKiNfX1BVUkVfXyovYmlnaW50LnBpcGUoIC8qI19fUFVSRV9fKi9ub25Qb3NpdGl2ZUJpZ0ludCh7XG4gIGlkZW50aWZpZXI6IFwiTm9uUG9zaXRpdmVCaWdpbnRcIixcbiAgdGl0bGU6IFwiTm9uUG9zaXRpdmVCaWdpbnRcIlxufSkpO1xuLyoqXG4gKiBAY2F0ZWdvcnkgYmlnaW50IGNvbnN0cnVjdG9yc1xuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBOb25OZWdhdGl2ZUJpZ0ludEZyb21TZWxmID0gLyojX19QVVJFX18qL0JpZ0ludEZyb21TZWxmLnBpcGUoIC8qI19fUFVSRV9fKi9ub25OZWdhdGl2ZUJpZ0ludCh7XG4gIGlkZW50aWZpZXI6IFwiTm9uTmVnYXRpdmVCaWdpbnRGcm9tU2VsZlwiLFxuICB0aXRsZTogXCJOb25OZWdhdGl2ZUJpZ2ludEZyb21TZWxmXCJcbn0pKTtcbi8qKlxuICogQGNhdGVnb3J5IGJpZ2ludCBjb25zdHJ1Y3RvcnNcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5leHBvcnQgY29uc3QgTm9uTmVnYXRpdmVCaWdJbnQgPSAvKiNfX1BVUkVfXyovYmlnaW50LnBpcGUoIC8qI19fUFVSRV9fKi9ub25OZWdhdGl2ZUJpZ0ludCh7XG4gIGlkZW50aWZpZXI6IFwiTm9uTmVnYXRpdmVCaWdpbnRcIixcbiAgdGl0bGU6IFwiTm9uTmVnYXRpdmVCaWdpbnRcIlxufSkpO1xuLyoqXG4gKiBUaGlzIHNjaGVtYSB0cmFuc2Zvcm1zIGEgYG51bWJlcmAgaW50byBhIGBiaWdpbnRgIGJ5IHBhcnNpbmcgdGhlIG51bWJlciB1c2luZyB0aGUgYEJpZ0ludGAgZnVuY3Rpb24uXG4gKlxuICogSXQgcmV0dXJucyBhbiBlcnJvciBpZiB0aGUgdmFsdWUgY2FuJ3QgYmUgc2FmZWx5IGVuY29kZWQgYXMgYSBgbnVtYmVyYCBkdWUgdG8gYmVpbmcgb3V0IG9mIHJhbmdlLlxuICpcbiAqIEBjYXRlZ29yeSBiaWdpbnQgdHJhbnNmb3JtYXRpb25zXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IEJpZ0ludEZyb21OdW1iZXIgPSAvKiNfX1BVUkVfXyovdHJhbnNmb3JtT3JGYWlsKCROdW1iZXIsIEJpZ0ludEZyb21TZWxmLCB7XG4gIGRlY29kZTogKG4sIF8sIGFzdCkgPT4gUGFyc2VSZXN1bHQuZnJvbU9wdGlvbihiaWdJbnRfLmZyb21OdW1iZXIobiksICgpID0+IG5ldyBQYXJzZVJlc3VsdC5UeXBlKGFzdCwgbikpLFxuICBlbmNvZGU6IChiLCBfLCBhc3QpID0+IFBhcnNlUmVzdWx0LmZyb21PcHRpb24oYmlnSW50Xy50b051bWJlcihiKSwgKCkgPT4gbmV3IFBhcnNlUmVzdWx0LlR5cGUoYXN0LCBiKSlcbn0pLmFubm90YXRpb25zKHtcbiAgaWRlbnRpZmllcjogXCJCaWdpbnRGcm9tTnVtYmVyXCJcbn0pO1xuLyoqXG4gKiBAY2F0ZWdvcnkgU2VjcmV0IGNvbnN0cnVjdG9yc1xuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBTZWNyZXRGcm9tU2VsZiA9IC8qI19fUFVSRV9fKi9kZWNsYXJlKHNlY3JldF8uaXNTZWNyZXQsIHtcbiAgaWRlbnRpZmllcjogXCJTZWNyZXRGcm9tU2VsZlwiLFxuICBwcmV0dHk6ICgpID0+IHNlY3JldCA9PiBTdHJpbmcoc2VjcmV0KSxcbiAgYXJiaXRyYXJ5OiAoKSA9PiBmYyA9PiBmYy5zdHJpbmcoKS5tYXAoXyA9PiBzZWNyZXRfLmZyb21TdHJpbmcoXykpXG59KTtcbi8qKlxuICogQSBzY2hlbWEgdGhhdCB0cmFuc2Zvcm1zIGEgYHN0cmluZ2AgaW50byBhIGBTZWNyZXRgLlxuICpcbiAqIEBjYXRlZ29yeSBTZWNyZXQgdHJhbnNmb3JtYXRpb25zXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IFNlY3JldCA9IC8qI19fUFVSRV9fKi90cmFuc2Zvcm0oJFN0cmluZywgU2VjcmV0RnJvbVNlbGYsIHtcbiAgc3RyaWN0OiBmYWxzZSxcbiAgZGVjb2RlOiBzdHIgPT4gc2VjcmV0Xy5mcm9tU3RyaW5nKHN0ciksXG4gIGVuY29kZTogc2VjcmV0ID0+IHNlY3JldF8udmFsdWUoc2VjcmV0KVxufSkuYW5ub3RhdGlvbnMoe1xuICBpZGVudGlmaWVyOiBcIlNlY3JldFwiXG59KTtcbi8qKlxuICogQGNhdGVnb3J5IER1cmF0aW9uIGNvbnN0cnVjdG9yc1xuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBEdXJhdGlvbkZyb21TZWxmID0gLyojX19QVVJFX18qL2RlY2xhcmUoZHVyYXRpb25fLmlzRHVyYXRpb24sIHtcbiAgaWRlbnRpZmllcjogXCJEdXJhdGlvbkZyb21TZWxmXCIsXG4gIHByZXR0eTogKCkgPT4gU3RyaW5nLFxuICBhcmJpdHJhcnk6ICgpID0+IGZjID0+IGZjLm9uZW9mKGZjLmNvbnN0YW50KGR1cmF0aW9uXy5pbmZpbml0eSksIGZjLmJpZ1VpbnQoKS5tYXAoXyA9PiBkdXJhdGlvbl8ubmFub3MoXykpLCBmYy5iaWdVaW50KCkubWFwKF8gPT4gZHVyYXRpb25fLm1pY3JvcyhfKSksIGZjLm1heFNhZmVOYXQoKS5tYXAoXyA9PiBkdXJhdGlvbl8ubWlsbGlzKF8pKSwgZmMubWF4U2FmZU5hdCgpLm1hcChfID0+IGR1cmF0aW9uXy5zZWNvbmRzKF8pKSwgZmMubWF4U2FmZU5hdCgpLm1hcChfID0+IGR1cmF0aW9uXy5taW51dGVzKF8pKSwgZmMubWF4U2FmZU5hdCgpLm1hcChfID0+IGR1cmF0aW9uXy5ob3VycyhfKSksIGZjLm1heFNhZmVOYXQoKS5tYXAoXyA9PiBkdXJhdGlvbl8uZGF5cyhfKSksIGZjLm1heFNhZmVOYXQoKS5tYXAoXyA9PiBkdXJhdGlvbl8ud2Vla3MoXykpKSxcbiAgZXF1aXZhbGVuY2U6ICgpID0+IGR1cmF0aW9uXy5FcXVpdmFsZW5jZVxufSk7XG4vKipcbiAqIEEgc2NoZW1hIHRoYXQgdHJhbnNmb3JtcyBhIGBiaWdpbnRgIHR1cGxlIGludG8gYSBgRHVyYXRpb25gLlxuICogVHJlYXRzIHRoZSB2YWx1ZSBhcyB0aGUgbnVtYmVyIG9mIG5hbm9zZWNvbmRzLlxuICpcbiAqIEBjYXRlZ29yeSBEdXJhdGlvbiB0cmFuc2Zvcm1hdGlvbnNcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5leHBvcnQgY29uc3QgRHVyYXRpb25Gcm9tTmFub3MgPSAvKiNfX1BVUkVfXyovdHJhbnNmb3JtT3JGYWlsKEJpZ0ludEZyb21TZWxmLCBEdXJhdGlvbkZyb21TZWxmLCB7XG4gIGRlY29kZTogbmFub3MgPT4gUGFyc2VSZXN1bHQuc3VjY2VlZChkdXJhdGlvbl8ubmFub3MobmFub3MpKSxcbiAgZW5jb2RlOiAoZHVyYXRpb24sIF8sIGFzdCkgPT4gb3B0aW9uXy5tYXRjaChkdXJhdGlvbl8udG9OYW5vcyhkdXJhdGlvbiksIHtcbiAgICBvbk5vbmU6ICgpID0+IFBhcnNlUmVzdWx0LmZhaWwobmV3IFBhcnNlUmVzdWx0LlR5cGUoYXN0LCBkdXJhdGlvbikpLFxuICAgIG9uU29tZTogdmFsID0+IFBhcnNlUmVzdWx0LnN1Y2NlZWQodmFsKVxuICB9KVxufSkuYW5ub3RhdGlvbnMoe1xuICBpZGVudGlmaWVyOiBcIkR1cmF0aW9uRnJvbU5hbm9zXCJcbn0pO1xuLyoqXG4gKiBBIHNjaGVtYSB0aGF0IHRyYW5zZm9ybXMgYSBgbnVtYmVyYCB0dXBsZSBpbnRvIGEgYER1cmF0aW9uYC5cbiAqIFRyZWF0cyB0aGUgdmFsdWUgYXMgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMuXG4gKlxuICogQGNhdGVnb3J5IER1cmF0aW9uIHRyYW5zZm9ybWF0aW9uc1xuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBEdXJhdGlvbkZyb21NaWxsaXMgPSAvKiNfX1BVUkVfXyovdHJhbnNmb3JtKCROdW1iZXIsIER1cmF0aW9uRnJvbVNlbGYsIHtcbiAgZGVjb2RlOiBtcyA9PiBkdXJhdGlvbl8ubWlsbGlzKG1zKSxcbiAgZW5jb2RlOiBuID0+IGR1cmF0aW9uXy50b01pbGxpcyhuKVxufSkuYW5ub3RhdGlvbnMoe1xuICBpZGVudGlmaWVyOiBcIkR1cmF0aW9uRnJvbU1pbGxpc1wiXG59KTtcbmNvbnN0IGhyVGltZSA9IC8qI19fUFVSRV9fKi9UdXBsZSggLyojX19QVVJFX18qL05vbk5lZ2F0aXZlLnBpcGUoIC8qI19fUFVSRV9fKi9maW5pdGUoe1xuICBbQVNULlRpdGxlQW5ub3RhdGlvbklkXTogXCJzZWNvbmRzXCIsXG4gIFtBU1QuRGVzY3JpcHRpb25Bbm5vdGF0aW9uSWRdOiBcInNlY29uZHNcIlxufSkpLCAvKiNfX1BVUkVfXyovTm9uTmVnYXRpdmUucGlwZSggLyojX19QVVJFX18qL2Zpbml0ZSh7XG4gIFtBU1QuVGl0bGVBbm5vdGF0aW9uSWRdOiBcIm5hbm9zXCIsXG4gIFtBU1QuRGVzY3JpcHRpb25Bbm5vdGF0aW9uSWRdOiBcIm5hbm9zXCJcbn0pKSk7XG4vKipcbiAqIEEgc2NoZW1hIHRoYXQgdHJhbnNmb3JtcyBhIGBbbnVtYmVyLCBudW1iZXJdYCB0dXBsZSBpbnRvIGEgYER1cmF0aW9uYC5cbiAqXG4gKiBAY2F0ZWdvcnkgRHVyYXRpb24gdHJhbnNmb3JtYXRpb25zXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IER1cmF0aW9uID0gLyojX19QVVJFX18qL3RyYW5zZm9ybShoclRpbWUsIER1cmF0aW9uRnJvbVNlbGYsIHtcbiAgZGVjb2RlOiAoW3NlY29uZHMsIG5hbm9zXSkgPT4gZHVyYXRpb25fLm5hbm9zKEJpZ0ludChzZWNvbmRzKSAqIEJpZ0ludCgxZTkpICsgQmlnSW50KG5hbm9zKSksXG4gIGVuY29kZTogZHVyYXRpb24gPT4gZHVyYXRpb25fLnRvSHJUaW1lKGR1cmF0aW9uKVxufSkuYW5ub3RhdGlvbnMoe1xuICBpZGVudGlmaWVyOiBcIkR1cmF0aW9uXCJcbn0pO1xuLyoqXG4gKiBDbGFtcHMgYSBgRHVyYXRpb25gIGJldHdlZW4gYSBtaW5pbXVtIGFuZCBhIG1heGltdW0gdmFsdWUuXG4gKlxuICogQGNhdGVnb3J5IER1cmF0aW9uIHRyYW5zZm9ybWF0aW9uc1xuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBjbGFtcER1cmF0aW9uID0gKG1pbmltdW0sIG1heGltdW0pID0+IHNlbGYgPT4gdHJhbnNmb3JtKHNlbGYsIHNlbGYucGlwZSh0eXBlU2NoZW1hLCBiZXR3ZWVuRHVyYXRpb24obWluaW11bSwgbWF4aW11bSkpLCB7XG4gIHN0cmljdDogZmFsc2UsXG4gIGRlY29kZTogc2VsZiA9PiBkdXJhdGlvbl8uY2xhbXAoc2VsZiwge1xuICAgIG1pbmltdW0sXG4gICAgbWF4aW11bVxuICB9KSxcbiAgZW5jb2RlOiBpZGVudGl0eVxufSk7XG4vKipcbiAqIEBjYXRlZ29yeSB0eXBlIGlkXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IExlc3NUaGFuRHVyYXRpb25UeXBlSWQgPSAvKiNfX1BVUkVfXyovU3ltYm9sLmZvcihcIkBlZmZlY3Qvc2NoZW1hL1R5cGVJZC9MZXNzVGhhbkR1cmF0aW9uXCIpO1xuLyoqXG4gKiBAY2F0ZWdvcnkgRHVyYXRpb24gZmlsdGVyc1xuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBsZXNzVGhhbkR1cmF0aW9uID0gKG1heCwgYW5ub3RhdGlvbnMpID0+IHNlbGYgPT4gc2VsZi5waXBlKGZpbHRlcihhID0+IGR1cmF0aW9uXy5sZXNzVGhhbihhLCBtYXgpLCB7XG4gIHR5cGVJZDoge1xuICAgIGlkOiBMZXNzVGhhbkR1cmF0aW9uVHlwZUlkLFxuICAgIGFubm90YXRpb246IHtcbiAgICAgIG1heFxuICAgIH1cbiAgfSxcbiAgZGVzY3JpcHRpb246IGBhIER1cmF0aW9uIGxlc3MgdGhhbiAke2R1cmF0aW9uXy5kZWNvZGUobWF4KX1gLFxuICAuLi5hbm5vdGF0aW9uc1xufSkpO1xuLyoqXG4gKiBAY2F0ZWdvcnkgdHlwZSBpZFxuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBMZXNzVGhhbk9yRXF1YWxUb0R1cmF0aW9uVHlwZUlkID0gLyojX19QVVJFX18qL1N5bWJvbC5mb3IoXCJAZWZmZWN0L3NjaGVtYS9UeXBlSWQvTGVzc1RoYW5PckVxdWFsVG9EdXJhdGlvblwiKTtcbi8qKlxuICogQGNhdGVnb3J5IER1cmF0aW9uIGZpbHRlcnNcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5leHBvcnQgY29uc3QgbGVzc1RoYW5PckVxdWFsVG9EdXJhdGlvbiA9IChtYXgsIGFubm90YXRpb25zKSA9PiBzZWxmID0+IHNlbGYucGlwZShmaWx0ZXIoYSA9PiBkdXJhdGlvbl8ubGVzc1RoYW5PckVxdWFsVG8oYSwgbWF4KSwge1xuICB0eXBlSWQ6IHtcbiAgICBpZDogTGVzc1RoYW5EdXJhdGlvblR5cGVJZCxcbiAgICBhbm5vdGF0aW9uOiB7XG4gICAgICBtYXhcbiAgICB9XG4gIH0sXG4gIGRlc2NyaXB0aW9uOiBgYSBEdXJhdGlvbiBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gJHtkdXJhdGlvbl8uZGVjb2RlKG1heCl9YCxcbiAgLi4uYW5ub3RhdGlvbnNcbn0pKTtcbi8qKlxuICogQGNhdGVnb3J5IHR5cGUgaWRcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5leHBvcnQgY29uc3QgR3JlYXRlclRoYW5EdXJhdGlvblR5cGVJZCA9IC8qI19fUFVSRV9fKi9TeW1ib2wuZm9yKFwiQGVmZmVjdC9zY2hlbWEvVHlwZUlkL0dyZWF0ZXJUaGFuRHVyYXRpb25cIik7XG4vKipcbiAqIEBjYXRlZ29yeSBEdXJhdGlvbiBmaWx0ZXJzXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IGdyZWF0ZXJUaGFuRHVyYXRpb24gPSAobWluLCBhbm5vdGF0aW9ucykgPT4gc2VsZiA9PiBzZWxmLnBpcGUoZmlsdGVyKGEgPT4gZHVyYXRpb25fLmdyZWF0ZXJUaGFuKGEsIG1pbiksIHtcbiAgdHlwZUlkOiB7XG4gICAgaWQ6IEdyZWF0ZXJUaGFuRHVyYXRpb25UeXBlSWQsXG4gICAgYW5ub3RhdGlvbjoge1xuICAgICAgbWluXG4gICAgfVxuICB9LFxuICBkZXNjcmlwdGlvbjogYGEgRHVyYXRpb24gZ3JlYXRlciB0aGFuICR7ZHVyYXRpb25fLmRlY29kZShtaW4pfWAsXG4gIC4uLmFubm90YXRpb25zXG59KSk7XG4vKipcbiAqIEBjYXRlZ29yeSB0eXBlIGlkXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IEdyZWF0ZXJUaGFuT3JFcXVhbFRvRHVyYXRpb25UeXBlSWQgPSAvKiNfX1BVUkVfXyovU3ltYm9sLmZvcihcIkBlZmZlY3Qvc2NoZW1hL1R5cGVJZC9HcmVhdGVyVGhhbk9yRXF1YWxUb0R1cmF0aW9uXCIpO1xuLyoqXG4gKiBAY2F0ZWdvcnkgRHVyYXRpb24gZmlsdGVyc1xuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBncmVhdGVyVGhhbk9yRXF1YWxUb0R1cmF0aW9uID0gKG1pbiwgYW5ub3RhdGlvbnMpID0+IHNlbGYgPT4gc2VsZi5waXBlKGZpbHRlcihhID0+IGR1cmF0aW9uXy5ncmVhdGVyVGhhbk9yRXF1YWxUbyhhLCBtaW4pLCB7XG4gIHR5cGVJZDoge1xuICAgIGlkOiBHcmVhdGVyVGhhbk9yRXF1YWxUb0R1cmF0aW9uVHlwZUlkLFxuICAgIGFubm90YXRpb246IHtcbiAgICAgIG1pblxuICAgIH1cbiAgfSxcbiAgZGVzY3JpcHRpb246IGBhIER1cmF0aW9uIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byAke2R1cmF0aW9uXy5kZWNvZGUobWluKX1gLFxuICAuLi5hbm5vdGF0aW9uc1xufSkpO1xuLyoqXG4gKiBAY2F0ZWdvcnkgdHlwZSBpZFxuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBCZXR3ZWVuRHVyYXRpb25UeXBlSWQgPSAvKiNfX1BVUkVfXyovU3ltYm9sLmZvcihcIkBlZmZlY3Qvc2NoZW1hL1R5cGVJZC9CZXR3ZWVuRHVyYXRpb25cIik7XG4vKipcbiAqIEBjYXRlZ29yeSBEdXJhdGlvbiBmaWx0ZXJzXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IGJldHdlZW5EdXJhdGlvbiA9IChtaW5pbXVtLCBtYXhpbXVtLCBhbm5vdGF0aW9ucykgPT4gc2VsZiA9PiBzZWxmLnBpcGUoZmlsdGVyKGEgPT4gZHVyYXRpb25fLmJldHdlZW4oYSwge1xuICBtaW5pbXVtLFxuICBtYXhpbXVtXG59KSwge1xuICB0eXBlSWQ6IHtcbiAgICBpZDogQmV0d2VlbkR1cmF0aW9uVHlwZUlkLFxuICAgIGFubm90YXRpb246IHtcbiAgICAgIG1heGltdW0sXG4gICAgICBtaW5pbXVtXG4gICAgfVxuICB9LFxuICBkZXNjcmlwdGlvbjogYGEgRHVyYXRpb24gYmV0d2VlbiAke2R1cmF0aW9uXy5kZWNvZGUobWluaW11bSl9IGFuZCAke2R1cmF0aW9uXy5kZWNvZGUobWF4aW11bSl9YCxcbiAgLi4uYW5ub3RhdGlvbnNcbn0pKTtcbi8qKlxuICogQGNhdGVnb3J5IFVpbnQ4QXJyYXkgY29uc3RydWN0b3JzXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IFVpbnQ4QXJyYXlGcm9tU2VsZiA9IC8qI19fUFVSRV9fKi9kZWNsYXJlKFByZWRpY2F0ZS5pc1VpbnQ4QXJyYXksIHtcbiAgaWRlbnRpZmllcjogXCJVaW50OEFycmF5RnJvbVNlbGZcIixcbiAgcHJldHR5OiAoKSA9PiB1OGFyciA9PiBgbmV3IFVpbnQ4QXJyYXkoJHtKU09OLnN0cmluZ2lmeShBcnJheS5mcm9tKHU4YXJyKSl9KWAsXG4gIGFyYml0cmFyeTogKCkgPT4gZmMgPT4gZmMudWludDhBcnJheSgpLFxuICBlcXVpdmFsZW5jZTogKCkgPT4gYXJyYXlfLmdldEVxdWl2YWxlbmNlKEVxdWFsLmVxdWFscylcbn0pO1xuY29uc3QgJFVpbnQ4QXJyYXkgPSAvKiNfX1BVUkVfXyovdHJhbnNmb3JtKCRBcnJheSgkTnVtYmVyLnBpcGUoYmV0d2VlbigwLCAyNTUsIHtcbiAgdGl0bGU6IFwiOC1iaXQgdW5zaWduZWQgaW50ZWdlclwiLFxuICBkZXNjcmlwdGlvbjogXCJhIDgtYml0IHVuc2lnbmVkIGludGVnZXJcIlxufSkpKS5hbm5vdGF0aW9ucyh7XG4gIGRlc2NyaXB0aW9uOiBcImFuIGFycmF5IG9mIDgtYml0IHVuc2lnbmVkIGludGVnZXJzXCJcbn0pLCBVaW50OEFycmF5RnJvbVNlbGYsIHtcbiAgZGVjb2RlOiBudW1iZXJzID0+IFVpbnQ4QXJyYXkuZnJvbShudW1iZXJzKSxcbiAgZW5jb2RlOiB1aW50OEFycmF5ID0+IEFycmF5LmZyb20odWludDhBcnJheSlcbn0pLmFubm90YXRpb25zKHtcbiAgaWRlbnRpZmllcjogXCJVaW50OEFycmF5XCJcbn0pO1xuZXhwb3J0IHtcbi8qKlxuICogQSBzY2hlbWEgdGhhdCB0cmFuc2Zvcm1zIGEgYG51bWJlcmAgYXJyYXkgaW50byBhIGBVaW50OEFycmF5YC5cbiAqXG4gKiBAY2F0ZWdvcnkgVWludDhBcnJheSB0cmFuc2Zvcm1hdGlvbnNcbiAqIEBzaW5jZSAxLjAuMFxuICovXG4kVWludDhBcnJheSBhcyBVaW50OEFycmF5IH07XG5jb25zdCBtYWtlRW5jb2RpbmdUcmFuc2Zvcm1hdGlvbiA9IChpZCwgZGVjb2RlLCBlbmNvZGUpID0+IHRyYW5zZm9ybU9yRmFpbCgkU3RyaW5nLCBVaW50OEFycmF5RnJvbVNlbGYsIHtcbiAgc3RyaWN0OiBmYWxzZSxcbiAgZGVjb2RlOiAocywgXywgYXN0KSA9PiBlaXRoZXJfLm1hcExlZnQoZGVjb2RlKHMpLCBkZWNvZGVFeGNlcHRpb24gPT4gbmV3IFBhcnNlUmVzdWx0LlR5cGUoYXN0LCBzLCBkZWNvZGVFeGNlcHRpb24ubWVzc2FnZSkpLFxuICBlbmNvZGU6IHUgPT4gUGFyc2VSZXN1bHQuc3VjY2VlZChlbmNvZGUodSkpXG59KS5hbm5vdGF0aW9ucyh7XG4gIGlkZW50aWZpZXI6IGlkXG59KTtcbi8qKlxuICogQGNhdGVnb3J5IEVuY29kaW5nIHRyYW5zZm9ybWF0aW9uc1xuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBCYXNlNjQgPSAvKiNfX1BVUkVfXyovbWFrZUVuY29kaW5nVHJhbnNmb3JtYXRpb24oXCJCYXNlNjRcIiwgRW5jb2RpbmcuZGVjb2RlQmFzZTY0LCBFbmNvZGluZy5lbmNvZGVCYXNlNjQpO1xuLyoqXG4gKiBAY2F0ZWdvcnkgRW5jb2RpbmcgdHJhbnNmb3JtYXRpb25zXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IEJhc2U2NFVybCA9IC8qI19fUFVSRV9fKi9tYWtlRW5jb2RpbmdUcmFuc2Zvcm1hdGlvbihcIkJhc2U2NFVybFwiLCBFbmNvZGluZy5kZWNvZGVCYXNlNjRVcmwsIEVuY29kaW5nLmVuY29kZUJhc2U2NFVybCk7XG4vKipcbiAqIEBjYXRlZ29yeSBFbmNvZGluZyB0cmFuc2Zvcm1hdGlvbnNcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5leHBvcnQgY29uc3QgSGV4ID0gLyojX19QVVJFX18qL21ha2VFbmNvZGluZ1RyYW5zZm9ybWF0aW9uKFwiSGV4XCIsIEVuY29kaW5nLmRlY29kZUhleCwgRW5jb2RpbmcuZW5jb2RlSGV4KTtcbi8qKlxuICogQGNhdGVnb3J5IHR5cGUgaWRcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5leHBvcnQgY29uc3QgTWluSXRlbXNUeXBlSWQgPSBmaWx0ZXJzXy5NaW5JdGVtc1R5cGVJZDtcbi8qKlxuICogQGNhdGVnb3J5IFJlYWRvbmx5QXJyYXkgZmlsdGVyc1xuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBtaW5JdGVtcyA9IChuLCBhbm5vdGF0aW9ucykgPT4gc2VsZiA9PiBzZWxmLnBpcGUoZmlsdGVyKGEgPT4gYS5sZW5ndGggPj0gbiwge1xuICB0eXBlSWQ6IE1pbkl0ZW1zVHlwZUlkLFxuICBkZXNjcmlwdGlvbjogYGFuIGFycmF5IG9mIGF0IGxlYXN0ICR7bn0gaXRlbXNgLFxuICBqc29uU2NoZW1hOiB7XG4gICAgbWluSXRlbXM6IG5cbiAgfSxcbiAgLi4uYW5ub3RhdGlvbnNcbn0pKTtcbi8qKlxuICogQGNhdGVnb3J5IHR5cGUgaWRcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5leHBvcnQgY29uc3QgTWF4SXRlbXNUeXBlSWQgPSBmaWx0ZXJzXy5NYXhJdGVtc1R5cGVJZDtcbi8qKlxuICogQGNhdGVnb3J5IFJlYWRvbmx5QXJyYXkgZmlsdGVyc1xuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBtYXhJdGVtcyA9IChuLCBhbm5vdGF0aW9ucykgPT4gc2VsZiA9PiBzZWxmLnBpcGUoZmlsdGVyKGEgPT4gYS5sZW5ndGggPD0gbiwge1xuICB0eXBlSWQ6IE1heEl0ZW1zVHlwZUlkLFxuICBkZXNjcmlwdGlvbjogYGFuIGFycmF5IG9mIGF0IG1vc3QgJHtufSBpdGVtc2AsXG4gIGpzb25TY2hlbWE6IHtcbiAgICBtYXhJdGVtczogblxuICB9LFxuICAuLi5hbm5vdGF0aW9uc1xufSkpO1xuLyoqXG4gKiBAY2F0ZWdvcnkgdHlwZSBpZFxuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBJdGVtc0NvdW50VHlwZUlkID0gZmlsdGVyc18uSXRlbXNDb3VudFR5cGVJZDtcbi8qKlxuICogQGNhdGVnb3J5IFJlYWRvbmx5QXJyYXkgZmlsdGVyc1xuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBpdGVtc0NvdW50ID0gKG4sIGFubm90YXRpb25zKSA9PiBzZWxmID0+IHNlbGYucGlwZShmaWx0ZXIoYSA9PiBhLmxlbmd0aCA9PT0gbiwge1xuICB0eXBlSWQ6IEl0ZW1zQ291bnRUeXBlSWQsXG4gIGRlc2NyaXB0aW9uOiBgYW4gYXJyYXkgb2YgZXhhY3RseSAke259IGl0ZW0ocylgLFxuICBqc29uU2NoZW1hOiB7XG4gICAgbWluSXRlbXM6IG4sXG4gICAgbWF4SXRlbXM6IG5cbiAgfSxcbiAgLi4uYW5ub3RhdGlvbnNcbn0pKTtcbi8qKlxuICogQGNhdGVnb3J5IFJlYWRvbmx5QXJyYXkgdHJhbnNmb3JtYXRpb25zXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IGdldE51bWJlckluZGV4ZWRBY2Nlc3MgPSBzZWxmID0+IG1ha2UoQVNULmdldE51bWJlckluZGV4ZWRBY2Nlc3Moc2VsZi5hc3QpKTtcbi8qKlxuICogR2V0IHRoZSBmaXJzdCBlbGVtZW50IG9mIGEgYFJlYWRvbmx5QXJyYXlgLCBvciBgTm9uZWAgaWYgdGhlIGFycmF5IGlzIGVtcHR5LlxuICpcbiAqIEBjYXRlZ29yeSBSZWFkb25seUFycmF5IHRyYW5zZm9ybWF0aW9uc1xuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBoZWFkID0gc2VsZiA9PiB0cmFuc2Zvcm0oc2VsZiwgT3B0aW9uRnJvbVNlbGYoZ2V0TnVtYmVySW5kZXhlZEFjY2Vzcyh0eXBlU2NoZW1hKHNlbGYpKSksIHtcbiAgZGVjb2RlOiBhcnJheV8uaGVhZCxcbiAgZW5jb2RlOiBvcHRpb25fLm1hdGNoKHtcbiAgICBvbk5vbmU6ICgpID0+IFtdLFxuICAgIG9uU29tZTogYXJyYXlfLm9mXG4gIH0pXG59KTtcbi8qKlxuICogUmV0cmlldmVzIHRoZSBmaXJzdCBlbGVtZW50IG9mIGEgYFJlYWRvbmx5QXJyYXlgLlxuICpcbiAqIElmIHRoZSBhcnJheSBpcyBlbXB0eSwgaXQgcmV0dXJucyB0aGUgYGZhbGxiYWNrYCBhcmd1bWVudCBpZiBwcm92aWRlZDsgb3RoZXJ3aXNlLCBpdCBmYWlscy5cbiAqXG4gKiBAY2F0ZWdvcnkgUmVhZG9ubHlBcnJheSB0cmFuc2Zvcm1hdGlvbnNcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5leHBvcnQgY29uc3QgaGVhZE9yRWxzZSA9IC8qI19fUFVSRV9fKi9kdWFsKGFyZ3MgPT4gaXNTY2hlbWEoYXJnc1swXSksIChzZWxmLCBmYWxsYmFjaykgPT4gdHJhbnNmb3JtT3JGYWlsKHNlbGYsIGdldE51bWJlckluZGV4ZWRBY2Nlc3ModHlwZVNjaGVtYShzZWxmKSksIHtcbiAgZGVjb2RlOiAoYXMsIF8sIGFzdCkgPT4gYXMubGVuZ3RoID4gMCA/IFBhcnNlUmVzdWx0LnN1Y2NlZWQoYXNbMF0pIDogZmFsbGJhY2sgPyBQYXJzZVJlc3VsdC5zdWNjZWVkKGZhbGxiYWNrKCkpIDogUGFyc2VSZXN1bHQuZmFpbChuZXcgUGFyc2VSZXN1bHQuVHlwZShhc3QsIGFzKSksXG4gIGVuY29kZTogYSA9PiBQYXJzZVJlc3VsdC5zdWNjZWVkKGFycmF5Xy5vZihhKSlcbn0pKTtcbi8qKlxuICogQGNhdGVnb3J5IHR5cGUgaWRcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5leHBvcnQgY29uc3QgVmFsaWREYXRlVHlwZUlkID0gLyojX19QVVJFX18qL1N5bWJvbC5mb3IoXCJAZWZmZWN0L3NjaGVtYS9UeXBlSWQvVmFsaWREYXRlXCIpO1xuLyoqXG4gKiBBIGZpbHRlciB0aGF0ICoqZXhjbHVkZXMgaW52YWxpZCoqIGRhdGVzIChlLmcuLCBgbmV3IERhdGUoXCJJbnZhbGlkIERhdGVcIilgIGlzIHJlamVjdGVkKS5cbiAqXG4gKiBAY2F0ZWdvcnkgRGF0ZSBmaWx0ZXJzXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IHZhbGlkRGF0ZSA9IGFubm90YXRpb25zID0+IHNlbGYgPT4gc2VsZi5waXBlKGZpbHRlcihhID0+ICFOdW1iZXIuaXNOYU4oYS5nZXRUaW1lKCkpLCB7XG4gIHR5cGVJZDogVmFsaWREYXRlVHlwZUlkLFxuICBkZXNjcmlwdGlvbjogXCJhIHZhbGlkIERhdGVcIixcbiAgLi4uYW5ub3RhdGlvbnNcbn0pKTtcbi8qKlxuICogUmVwcmVzZW50cyBhIHNjaGVtYSBmb3IgaGFuZGxpbmcgcG90ZW50aWFsbHkgKippbnZhbGlkKiogYERhdGVgIGluc3RhbmNlcyAoZS5nLiwgYG5ldyBEYXRlKFwiSW52YWxpZCBEYXRlXCIpYCBpcyBub3QgcmVqZWN0ZWQpLlxuICpcbiAqIEBjYXRlZ29yeSBEYXRlIGNvbnN0cnVjdG9yc1xuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBEYXRlRnJvbVNlbGYgPSAvKiNfX1BVUkVfXyovZGVjbGFyZShQcmVkaWNhdGUuaXNEYXRlLCB7XG4gIGlkZW50aWZpZXI6IFwiRGF0ZUZyb21TZWxmXCIsXG4gIGRlc2NyaXB0aW9uOiBcImEgcG90ZW50aWFsbHkgaW52YWxpZCBEYXRlIGluc3RhbmNlXCIsXG4gIHByZXR0eTogKCkgPT4gZGF0ZSA9PiBgbmV3IERhdGUoJHtKU09OLnN0cmluZ2lmeShkYXRlKX0pYCxcbiAgYXJiaXRyYXJ5OiAoKSA9PiBmYyA9PiBmYy5kYXRlKHtcbiAgICBub0ludmFsaWREYXRlOiBmYWxzZVxuICB9KSxcbiAgZXF1aXZhbGVuY2U6ICgpID0+IEVxdWl2YWxlbmNlLkRhdGVcbn0pO1xuLyoqXG4gKiBSZXByZXNlbnRzIGEgc2NoZW1hIGZvciBoYW5kbGluZyBvbmx5ICoqdmFsaWQqKiBkYXRlcy4gRm9yIGV4YW1wbGUsIGBuZXcgRGF0ZShcIkludmFsaWQgRGF0ZVwiKWAgaXMgcmVqZWN0ZWQsIGV2ZW4gdGhvdWdoIGl0IGlzIGFuIGluc3RhbmNlIG9mIGBEYXRlYC5cbiAqXG4gKiBAY2F0ZWdvcnkgRGF0ZSBjb25zdHJ1Y3RvcnNcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5leHBvcnQgY29uc3QgVmFsaWREYXRlRnJvbVNlbGYgPSAvKiNfX1BVUkVfXyovRGF0ZUZyb21TZWxmLnBpcGUoIC8qI19fUFVSRV9fKi92YWxpZERhdGUoe1xuICBpZGVudGlmaWVyOiBcIlZhbGlkRGF0ZUZyb21TZWxmXCIsXG4gIGRlc2NyaXB0aW9uOiBcImEgdmFsaWQgRGF0ZSBpbnN0YW5jZVwiXG59KSk7XG4vKipcbiAqIFJlcHJlc2VudHMgYSBzY2hlbWEgdGhhdCBjb252ZXJ0cyBhIGBzdHJpbmdgIGludG8gYSAocG90ZW50aWFsbHkgaW52YWxpZCkgYERhdGVgIChlLmcuLCBgbmV3IERhdGUoXCJJbnZhbGlkIERhdGVcIilgIGlzIG5vdCByZWplY3RlZCkuXG4gKlxuICogQGNhdGVnb3J5IERhdGUgdHJhbnNmb3JtYXRpb25zXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IERhdGVGcm9tU3RyaW5nID0gLyojX19QVVJFX18qL3RyYW5zZm9ybSgkU3RyaW5nLCBEYXRlRnJvbVNlbGYsIHtcbiAgZGVjb2RlOiBzID0+IG5ldyBEYXRlKHMpLFxuICBlbmNvZGU6IG4gPT4gbi50b0lTT1N0cmluZygpXG59KS5hbm5vdGF0aW9ucyh7XG4gIGlkZW50aWZpZXI6IFwiRGF0ZUZyb21TdHJpbmdcIlxufSk7XG5jb25zdCAkRGF0ZSA9IC8qI19fUFVSRV9fKi9EYXRlRnJvbVN0cmluZy5waXBlKCAvKiNfX1BVUkVfXyovdmFsaWREYXRlKHtcbiAgaWRlbnRpZmllcjogXCJEYXRlXCJcbn0pKTtcbmV4cG9ydCB7XG4vKipcbiAqIEEgc2NoZW1hIHRoYXQgdHJhbnNmb3JtcyBhIGBzdHJpbmdgIGludG8gYSAqKnZhbGlkKiogYERhdGVgLCBlbnN1cmluZyB0aGF0IGludmFsaWQgZGF0ZXMsIHN1Y2ggYXMgYG5ldyBEYXRlKFwiSW52YWxpZCBEYXRlXCIpYCwgYXJlIHJlamVjdGVkLlxuICpcbiAqIEBjYXRlZ29yeSBEYXRlIHRyYW5zZm9ybWF0aW9uc1xuICogQHNpbmNlIDEuMC4wXG4gKi9cbiREYXRlIGFzIERhdGUgfTtcbmNvbnN0IE9wdGlvbk5vbmVFbmNvZGVkID0gLyojX19QVVJFX18qL1N0cnVjdCh7XG4gIF90YWc6IExpdGVyYWwoXCJOb25lXCIpXG59KS5hbm5vdGF0aW9ucyh7XG4gIGRlc2NyaXB0aW9uOiBcIk5vbmVFbmNvZGVkXCJcbn0pO1xuY29uc3Qgb3B0aW9uU29tZUVuY29kZWQgPSB2YWx1ZSA9PiBTdHJ1Y3Qoe1xuICBfdGFnOiBMaXRlcmFsKFwiU29tZVwiKSxcbiAgdmFsdWVcbn0pLmFubm90YXRpb25zKHtcbiAgZGVzY3JpcHRpb246IGBTb21lRW5jb2RlZDwke2Zvcm1hdCh2YWx1ZSl9PmBcbn0pO1xuY29uc3Qgb3B0aW9uRW5jb2RlZCA9IHZhbHVlID0+IFVuaW9uKE9wdGlvbk5vbmVFbmNvZGVkLCBvcHRpb25Tb21lRW5jb2RlZCh2YWx1ZSkpLmFubm90YXRpb25zKHtcbiAgZGVzY3JpcHRpb246IGBPcHRpb25FbmNvZGVkPCR7Zm9ybWF0KHZhbHVlKX0+YFxufSk7XG5jb25zdCBvcHRpb25EZWNvZGUgPSBpbnB1dCA9PiBpbnB1dC5fdGFnID09PSBcIk5vbmVcIiA/IG9wdGlvbl8ubm9uZSgpIDogb3B0aW9uXy5zb21lKGlucHV0LnZhbHVlKTtcbmNvbnN0IG9wdGlvbkFyYml0cmFyeSA9IHZhbHVlID0+IGZjID0+IGZjLm9uZW9mKGZjLnJlY29yZCh7XG4gIF90YWc6IGZjLmNvbnN0YW50KFwiTm9uZVwiKVxufSksIGZjLnJlY29yZCh7XG4gIF90YWc6IGZjLmNvbnN0YW50KFwiU29tZVwiKSxcbiAgdmFsdWU6IHZhbHVlKGZjKVxufSkpLm1hcChvcHRpb25EZWNvZGUpO1xuY29uc3Qgb3B0aW9uUHJldHR5ID0gdmFsdWUgPT4gb3B0aW9uXy5tYXRjaCh7XG4gIG9uTm9uZTogKCkgPT4gXCJub25lKClcIixcbiAgb25Tb21lOiBhID0+IGBzb21lKCR7dmFsdWUoYSl9KWBcbn0pO1xuY29uc3Qgb3B0aW9uUGFyc2UgPSBkZWNvZGVVbmtub3duID0+ICh1LCBvcHRpb25zLCBhc3QpID0+IG9wdGlvbl8uaXNPcHRpb24odSkgPyBvcHRpb25fLmlzTm9uZSh1KSA/IFBhcnNlUmVzdWx0LnN1Y2NlZWQob3B0aW9uXy5ub25lKCkpIDogUGFyc2VSZXN1bHQubWFwKGRlY29kZVVua25vd24odS52YWx1ZSwgb3B0aW9ucyksIG9wdGlvbl8uc29tZSkgOiBQYXJzZVJlc3VsdC5mYWlsKG5ldyBQYXJzZVJlc3VsdC5UeXBlKGFzdCwgdSkpO1xuLyoqXG4gKiBAY2F0ZWdvcnkgT3B0aW9uIHRyYW5zZm9ybWF0aW9uc1xuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBPcHRpb25Gcm9tU2VsZiA9IHZhbHVlID0+IHtcbiAgcmV0dXJuIGRlY2xhcmUoW3ZhbHVlXSwge1xuICAgIGRlY29kZTogdmFsdWUgPT4gb3B0aW9uUGFyc2UoUGFyc2VSZXN1bHQuZGVjb2RlVW5rbm93bih2YWx1ZSkpLFxuICAgIGVuY29kZTogdmFsdWUgPT4gb3B0aW9uUGFyc2UoUGFyc2VSZXN1bHQuZW5jb2RlVW5rbm93bih2YWx1ZSkpXG4gIH0sIHtcbiAgICBkZXNjcmlwdGlvbjogYE9wdGlvbjwke2Zvcm1hdCh2YWx1ZSl9PmAsXG4gICAgcHJldHR5OiBvcHRpb25QcmV0dHksXG4gICAgYXJiaXRyYXJ5OiBvcHRpb25BcmJpdHJhcnksXG4gICAgZXF1aXZhbGVuY2U6IG9wdGlvbl8uZ2V0RXF1aXZhbGVuY2VcbiAgfSk7XG59O1xuY29uc3QgbWFrZU5vbmVFbmNvZGVkID0ge1xuICBfdGFnOiBcIk5vbmVcIlxufTtcbmNvbnN0IG1ha2VTb21lRW5jb2RlZCA9IHZhbHVlID0+ICh7XG4gIF90YWc6IFwiU29tZVwiLFxuICB2YWx1ZVxufSk7XG4vKipcbiAqIEBjYXRlZ29yeSBPcHRpb24gdHJhbnNmb3JtYXRpb25zXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IE9wdGlvbiA9IHZhbHVlID0+IHtcbiAgY29uc3QgdmFsdWVfID0gYXNTY2hlbWEodmFsdWUpO1xuICByZXR1cm4gdHJhbnNmb3JtKG9wdGlvbkVuY29kZWQodmFsdWVfKSwgT3B0aW9uRnJvbVNlbGYodHlwZVNjaGVtYSh2YWx1ZV8pKSwge1xuICAgIGRlY29kZTogb3B0aW9uRGVjb2RlLFxuICAgIGVuY29kZTogb3B0aW9uXy5tYXRjaCh7XG4gICAgICBvbk5vbmU6ICgpID0+IG1ha2VOb25lRW5jb2RlZCxcbiAgICAgIG9uU29tZTogbWFrZVNvbWVFbmNvZGVkXG4gICAgfSlcbiAgfSk7XG59O1xuLyoqXG4gKiBAY2F0ZWdvcnkgT3B0aW9uIHRyYW5zZm9ybWF0aW9uc1xuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBPcHRpb25Gcm9tTnVsbE9yID0gdmFsdWUgPT4ge1xuICBjb25zdCB2YWx1ZV8gPSBhc1NjaGVtYSh2YWx1ZSk7XG4gIHJldHVybiB0cmFuc2Zvcm0oTnVsbE9yKHZhbHVlXyksIE9wdGlvbkZyb21TZWxmKHR5cGVTY2hlbWEodmFsdWVfKSksIHtcbiAgICBkZWNvZGU6IG9wdGlvbl8uZnJvbU51bGxhYmxlLFxuICAgIGVuY29kZTogb3B0aW9uXy5nZXRPck51bGxcbiAgfSk7XG59O1xuLyoqXG4gKiBAY2F0ZWdvcnkgT3B0aW9uIHRyYW5zZm9ybWF0aW9uc1xuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBPcHRpb25Gcm9tTnVsbGlzaE9yID0gKHZhbHVlLCBvbk5vbmVFbmNvZGluZykgPT4ge1xuICBjb25zdCB2YWx1ZV8gPSBhc1NjaGVtYSh2YWx1ZSk7XG4gIHJldHVybiB0cmFuc2Zvcm0oTnVsbGlzaE9yKHZhbHVlXyksIE9wdGlvbkZyb21TZWxmKHR5cGVTY2hlbWEodmFsdWVfKSksIHtcbiAgICBkZWNvZGU6IG9wdGlvbl8uZnJvbU51bGxhYmxlLFxuICAgIGVuY29kZTogb25Ob25lRW5jb2RpbmcgPT09IG51bGwgPyBvcHRpb25fLmdldE9yTnVsbCA6IG9wdGlvbl8uZ2V0T3JVbmRlZmluZWRcbiAgfSk7XG59O1xuLyoqXG4gKiBAY2F0ZWdvcnkgT3B0aW9uIHRyYW5zZm9ybWF0aW9uc1xuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBPcHRpb25Gcm9tVW5kZWZpbmVkT3IgPSB2YWx1ZSA9PiB7XG4gIGNvbnN0IHZhbHVlXyA9IGFzU2NoZW1hKHZhbHVlKTtcbiAgcmV0dXJuIHRyYW5zZm9ybShVbmRlZmluZWRPcih2YWx1ZV8pLCBPcHRpb25Gcm9tU2VsZih0eXBlU2NoZW1hKHZhbHVlXykpLCB7XG4gICAgZGVjb2RlOiBvcHRpb25fLmZyb21OdWxsYWJsZSxcbiAgICBlbmNvZGU6IG9wdGlvbl8uZ2V0T3JVbmRlZmluZWRcbiAgfSk7XG59O1xuY29uc3QgcmlnaHRFbmNvZGVkID0gcmlnaHQgPT4gU3RydWN0KHtcbiAgX3RhZzogTGl0ZXJhbChcIlJpZ2h0XCIpLFxuICByaWdodFxufSkuYW5ub3RhdGlvbnMoe1xuICBkZXNjcmlwdGlvbjogYFJpZ2h0RW5jb2RlZDwke2Zvcm1hdChyaWdodCl9PmBcbn0pO1xuY29uc3QgbGVmdEVuY29kZWQgPSBsZWZ0ID0+IFN0cnVjdCh7XG4gIF90YWc6IExpdGVyYWwoXCJMZWZ0XCIpLFxuICBsZWZ0XG59KS5hbm5vdGF0aW9ucyh7XG4gIGRlc2NyaXB0aW9uOiBgTGVmdEVuY29kZWQ8JHtmb3JtYXQobGVmdCl9PmBcbn0pO1xuY29uc3QgZWl0aGVyRW5jb2RlZCA9IChyaWdodCwgbGVmdCkgPT4gVW5pb24ocmlnaHRFbmNvZGVkKHJpZ2h0KSwgbGVmdEVuY29kZWQobGVmdCkpLmFubm90YXRpb25zKHtcbiAgZGVzY3JpcHRpb246IGBFaXRoZXJFbmNvZGVkPCR7Zm9ybWF0KGxlZnQpfSwgJHtmb3JtYXQocmlnaHQpfT5gXG59KTtcbmNvbnN0IGVpdGhlckRlY29kZSA9IGlucHV0ID0+IGlucHV0Ll90YWcgPT09IFwiTGVmdFwiID8gZWl0aGVyXy5sZWZ0KGlucHV0LmxlZnQpIDogZWl0aGVyXy5yaWdodChpbnB1dC5yaWdodCk7XG5jb25zdCBlaXRoZXJBcmJpdHJhcnkgPSAocmlnaHQsIGxlZnQpID0+IGZjID0+IGZjLm9uZW9mKGZjLnJlY29yZCh7XG4gIF90YWc6IGZjLmNvbnN0YW50KFwiTGVmdFwiKSxcbiAgbGVmdDogbGVmdChmYylcbn0pLCBmYy5yZWNvcmQoe1xuICBfdGFnOiBmYy5jb25zdGFudChcIlJpZ2h0XCIpLFxuICByaWdodDogcmlnaHQoZmMpXG59KSkubWFwKGVpdGhlckRlY29kZSk7XG5jb25zdCBlaXRoZXJQcmV0dHkgPSAocmlnaHQsIGxlZnQpID0+IGVpdGhlcl8ubWF0Y2goe1xuICBvbkxlZnQ6IGUgPT4gYGxlZnQoJHtsZWZ0KGUpfSlgLFxuICBvblJpZ2h0OiBhID0+IGByaWdodCgke3JpZ2h0KGEpfSlgXG59KTtcbmNvbnN0IGVpdGhlclBhcnNlID0gKHBhcnNlUmlnaHQsIGRlY29kZVVua25vd25MZWZ0KSA9PiAodSwgb3B0aW9ucywgYXN0KSA9PiBlaXRoZXJfLmlzRWl0aGVyKHUpID8gZWl0aGVyXy5tYXRjaCh1LCB7XG4gIG9uTGVmdDogbGVmdCA9PiBQYXJzZVJlc3VsdC5tYXAoZGVjb2RlVW5rbm93bkxlZnQobGVmdCwgb3B0aW9ucyksIGVpdGhlcl8ubGVmdCksXG4gIG9uUmlnaHQ6IHJpZ2h0ID0+IFBhcnNlUmVzdWx0Lm1hcChwYXJzZVJpZ2h0KHJpZ2h0LCBvcHRpb25zKSwgZWl0aGVyXy5yaWdodClcbn0pIDogUGFyc2VSZXN1bHQuZmFpbChuZXcgUGFyc2VSZXN1bHQuVHlwZShhc3QsIHUpKTtcbi8qKlxuICogQGNhdGVnb3J5IEVpdGhlciB0cmFuc2Zvcm1hdGlvbnNcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5leHBvcnQgY29uc3QgRWl0aGVyRnJvbVNlbGYgPSAoe1xuICBsZWZ0LFxuICByaWdodFxufSkgPT4ge1xuICByZXR1cm4gZGVjbGFyZShbcmlnaHQsIGxlZnRdLCB7XG4gICAgZGVjb2RlOiAocmlnaHQsIGxlZnQpID0+IGVpdGhlclBhcnNlKFBhcnNlUmVzdWx0LmRlY29kZVVua25vd24ocmlnaHQpLCBQYXJzZVJlc3VsdC5kZWNvZGVVbmtub3duKGxlZnQpKSxcbiAgICBlbmNvZGU6IChyaWdodCwgbGVmdCkgPT4gZWl0aGVyUGFyc2UoUGFyc2VSZXN1bHQuZW5jb2RlVW5rbm93bihyaWdodCksIFBhcnNlUmVzdWx0LmVuY29kZVVua25vd24obGVmdCkpXG4gIH0sIHtcbiAgICBkZXNjcmlwdGlvbjogYEVpdGhlcjwke2Zvcm1hdChyaWdodCl9LCAke2Zvcm1hdChsZWZ0KX0+YCxcbiAgICBwcmV0dHk6IGVpdGhlclByZXR0eSxcbiAgICBhcmJpdHJhcnk6IGVpdGhlckFyYml0cmFyeSxcbiAgICBlcXVpdmFsZW5jZTogKHJpZ2h0LCBsZWZ0KSA9PiBlaXRoZXJfLmdldEVxdWl2YWxlbmNlKHtcbiAgICAgIGxlZnQsXG4gICAgICByaWdodFxuICAgIH0pXG4gIH0pO1xufTtcbmNvbnN0IG1ha2VMZWZ0RW5jb2RlZCA9IGxlZnQgPT4gKHtcbiAgX3RhZzogXCJMZWZ0XCIsXG4gIGxlZnRcbn0pO1xuY29uc3QgbWFrZVJpZ2h0RW5jb2RlZCA9IHJpZ2h0ID0+ICh7XG4gIF90YWc6IFwiUmlnaHRcIixcbiAgcmlnaHRcbn0pO1xuLyoqXG4gKiBAY2F0ZWdvcnkgRWl0aGVyIHRyYW5zZm9ybWF0aW9uc1xuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBFaXRoZXIgPSAoe1xuICBsZWZ0LFxuICByaWdodFxufSkgPT4ge1xuICBjb25zdCByaWdodF8gPSBhc1NjaGVtYShyaWdodCk7XG4gIGNvbnN0IGxlZnRfID0gYXNTY2hlbWEobGVmdCk7XG4gIHJldHVybiB0cmFuc2Zvcm0oZWl0aGVyRW5jb2RlZChyaWdodF8sIGxlZnRfKSwgRWl0aGVyRnJvbVNlbGYoe1xuICAgIGxlZnQ6IHR5cGVTY2hlbWEobGVmdF8pLFxuICAgIHJpZ2h0OiB0eXBlU2NoZW1hKHJpZ2h0XylcbiAgfSksIHtcbiAgICBkZWNvZGU6IGVpdGhlckRlY29kZSxcbiAgICBlbmNvZGU6IGVpdGhlcl8ubWF0Y2goe1xuICAgICAgb25MZWZ0OiBtYWtlTGVmdEVuY29kZWQsXG4gICAgICBvblJpZ2h0OiBtYWtlUmlnaHRFbmNvZGVkXG4gICAgfSlcbiAgfSk7XG59O1xuLyoqXG4gKiBAZXhhbXBsZVxuICogaW1wb3J0ICogYXMgU2NoZW1hIGZyb20gXCJAZWZmZWN0L3NjaGVtYS9TY2hlbWFcIlxuICpcbiAqIC8vIFNjaGVtYTxzdHJpbmcgfCBudW1iZXIsIEVpdGhlcjxzdHJpbmcsIG51bWJlcj4+XG4gKiBTY2hlbWEuRWl0aGVyRnJvbVVuaW9uKHsgbGVmdDogU2NoZW1hLlN0cmluZywgcmlnaHQ6IFNjaGVtYS5OdW1iZXIgfSlcbiAqXG4gKiBAY2F0ZWdvcnkgRWl0aGVyIHRyYW5zZm9ybWF0aW9uc1xuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBFaXRoZXJGcm9tVW5pb24gPSAoe1xuICBsZWZ0LFxuICByaWdodFxufSkgPT4ge1xuICBjb25zdCByaWdodF8gPSBhc1NjaGVtYShyaWdodCk7XG4gIGNvbnN0IGxlZnRfID0gYXNTY2hlbWEobGVmdCk7XG4gIGNvbnN0IHRvcmlnaHQgPSB0eXBlU2NoZW1hKHJpZ2h0Xyk7XG4gIGNvbnN0IHRvbGVmdCA9IHR5cGVTY2hlbWEobGVmdF8pO1xuICBjb25zdCBmcm9tUmlnaHQgPSB0cmFuc2Zvcm0ocmlnaHRfLCByaWdodEVuY29kZWQodG9yaWdodCksIHtcbiAgICBkZWNvZGU6IG1ha2VSaWdodEVuY29kZWQsXG4gICAgZW5jb2RlOiByID0+IHIucmlnaHRcbiAgfSk7XG4gIGNvbnN0IGZyb21MZWZ0ID0gdHJhbnNmb3JtKGxlZnRfLCBsZWZ0RW5jb2RlZCh0b2xlZnQpLCB7XG4gICAgZGVjb2RlOiBtYWtlTGVmdEVuY29kZWQsXG4gICAgZW5jb2RlOiBsID0+IGwubGVmdFxuICB9KTtcbiAgcmV0dXJuIHRyYW5zZm9ybShVbmlvbihmcm9tUmlnaHQsIGZyb21MZWZ0KSwgRWl0aGVyRnJvbVNlbGYoe1xuICAgIGxlZnQ6IHRvbGVmdCxcbiAgICByaWdodDogdG9yaWdodFxuICB9KSwge1xuICAgIGRlY29kZTogZnJvbSA9PiBmcm9tLl90YWcgPT09IFwiTGVmdFwiID8gZWl0aGVyXy5sZWZ0KGZyb20ubGVmdCkgOiBlaXRoZXJfLnJpZ2h0KGZyb20ucmlnaHQpLFxuICAgIGVuY29kZTogZWl0aGVyXy5tYXRjaCh7XG4gICAgICBvbkxlZnQ6IG1ha2VMZWZ0RW5jb2RlZCxcbiAgICAgIG9uUmlnaHQ6IG1ha2VSaWdodEVuY29kZWRcbiAgICB9KVxuICB9KTtcbn07XG5jb25zdCBtYXBBcmJpdHJhcnkgPSAoa2V5LCB2YWx1ZSkgPT4gZmMgPT4gZmMuYXJyYXkoZmMudHVwbGUoa2V5KGZjKSwgdmFsdWUoZmMpKSkubWFwKGFzID0+IG5ldyBNYXAoYXMpKTtcbmNvbnN0IHJlYWRvbmx5TWFwUHJldHR5ID0gKGtleSwgdmFsdWUpID0+IG1hcCA9PiBgbmV3IE1hcChbJHtBcnJheS5mcm9tKG1hcC5lbnRyaWVzKCkpLm1hcCgoW2ssIHZdKSA9PiBgWyR7a2V5KGspfSwgJHt2YWx1ZSh2KX1dYCkuam9pbihcIiwgXCIpfV0pYDtcbmNvbnN0IHJlYWRvbmx5TWFwRXF1aXZhbGVuY2UgPSAoa2V5LCB2YWx1ZSkgPT4ge1xuICBjb25zdCBhcnJheUVxdWl2YWxlbmNlID0gYXJyYXlfLmdldEVxdWl2YWxlbmNlKEVxdWl2YWxlbmNlLm1ha2UoKFtrYSwgdmFdLCBba2IsIHZiXSkgPT4ga2V5KGthLCBrYikgJiYgdmFsdWUodmEsIHZiKSkpO1xuICByZXR1cm4gRXF1aXZhbGVuY2UubWFrZSgoYSwgYikgPT4gYXJyYXlFcXVpdmFsZW5jZShBcnJheS5mcm9tKGEuZW50cmllcygpKSwgQXJyYXkuZnJvbShiLmVudHJpZXMoKSkpKTtcbn07XG5jb25zdCByZWFkb25seU1hcFBhcnNlID0gZGVjb2RlVW5rbm93biA9PiAodSwgb3B0aW9ucywgYXN0KSA9PiBQcmVkaWNhdGUuaXNNYXAodSkgPyBQYXJzZVJlc3VsdC5tYXAoZGVjb2RlVW5rbm93bihBcnJheS5mcm9tKHUuZW50cmllcygpKSwgb3B0aW9ucyksIGFzID0+IG5ldyBNYXAoYXMpKSA6IFBhcnNlUmVzdWx0LmZhaWwobmV3IFBhcnNlUmVzdWx0LlR5cGUoYXN0LCB1KSk7XG5jb25zdCBtYXBGcm9tU2VsZl8gPSAoa2V5LCB2YWx1ZSwgZGVzY3JpcHRpb24pID0+IGRlY2xhcmUoW2tleSwgdmFsdWVdLCB7XG4gIGRlY29kZTogKEtleSwgVmFsdWUpID0+IHJlYWRvbmx5TWFwUGFyc2UoUGFyc2VSZXN1bHQuZGVjb2RlVW5rbm93bigkQXJyYXkoVHVwbGUoS2V5LCBWYWx1ZSkpKSksXG4gIGVuY29kZTogKEtleSwgVmFsdWUpID0+IHJlYWRvbmx5TWFwUGFyc2UoUGFyc2VSZXN1bHQuZW5jb2RlVW5rbm93bigkQXJyYXkoVHVwbGUoS2V5LCBWYWx1ZSkpKSlcbn0sIHtcbiAgZGVzY3JpcHRpb24sXG4gIHByZXR0eTogcmVhZG9ubHlNYXBQcmV0dHksXG4gIGFyYml0cmFyeTogbWFwQXJiaXRyYXJ5LFxuICBlcXVpdmFsZW5jZTogcmVhZG9ubHlNYXBFcXVpdmFsZW5jZVxufSk7XG4vKipcbiAqIEBjYXRlZ29yeSBSZWFkb25seU1hcFxuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBSZWFkb25seU1hcEZyb21TZWxmID0gKHtcbiAga2V5LFxuICB2YWx1ZVxufSkgPT4gbWFwRnJvbVNlbGZfKGtleSwgdmFsdWUsIGBSZWFkb25seU1hcDwke2Zvcm1hdChrZXkpfSwgJHtmb3JtYXQodmFsdWUpfT5gKTtcbi8qKlxuICogQGNhdGVnb3J5IE1hcFxuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBNYXBGcm9tU2VsZiA9ICh7XG4gIGtleSxcbiAgdmFsdWVcbn0pID0+IG1hcEZyb21TZWxmXyhrZXksIHZhbHVlLCBgTWFwPCR7Zm9ybWF0KGtleSl9LCAke2Zvcm1hdCh2YWx1ZSl9PmApO1xuLyoqXG4gKiBAY2F0ZWdvcnkgUmVhZG9ubHlNYXAgdHJhbnNmb3JtYXRpb25zXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IFJlYWRvbmx5TWFwID0gKHtcbiAga2V5LFxuICB2YWx1ZVxufSkgPT4ge1xuICBjb25zdCBrZXlfID0gYXNTY2hlbWEoa2V5KTtcbiAgY29uc3QgdmFsdWVfID0gYXNTY2hlbWEodmFsdWUpO1xuICByZXR1cm4gdHJhbnNmb3JtKCRBcnJheShUdXBsZShrZXlfLCB2YWx1ZV8pKSwgUmVhZG9ubHlNYXBGcm9tU2VsZih7XG4gICAga2V5OiB0eXBlU2NoZW1hKGtleV8pLFxuICAgIHZhbHVlOiB0eXBlU2NoZW1hKHZhbHVlXylcbiAgfSksIHtcbiAgICBkZWNvZGU6IGFzID0+IG5ldyBNYXAoYXMpLFxuICAgIGVuY29kZTogbWFwID0+IEFycmF5LmZyb20obWFwLmVudHJpZXMoKSlcbiAgfSk7XG59O1xuY29uc3QgbWFwID0gKHtcbiAga2V5LFxuICB2YWx1ZVxufSkgPT4ge1xuICBjb25zdCBrZXlfID0gYXNTY2hlbWEoa2V5KTtcbiAgY29uc3QgdmFsdWVfID0gYXNTY2hlbWEodmFsdWUpO1xuICByZXR1cm4gdHJhbnNmb3JtKCRBcnJheShUdXBsZShrZXlfLCB2YWx1ZV8pKSwgTWFwRnJvbVNlbGYoe1xuICAgIGtleTogdHlwZVNjaGVtYShrZXlfKSxcbiAgICB2YWx1ZTogdHlwZVNjaGVtYSh2YWx1ZV8pXG4gIH0pLCB7XG4gICAgZGVjb2RlOiBhcyA9PiBuZXcgTWFwKGFzKSxcbiAgICBlbmNvZGU6IG1hcCA9PiBBcnJheS5mcm9tKG1hcC5lbnRyaWVzKCkpXG4gIH0pO1xufTtcbmV4cG9ydCB7XG4vKipcbiAqIEBjYXRlZ29yeSBNYXAgdHJhbnNmb3JtYXRpb25zXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xubWFwIGFzIE1hcCB9O1xuY29uc3Qgc2V0QXJiaXRyYXJ5ID0gaXRlbSA9PiBmYyA9PiBmYy5hcnJheShpdGVtKGZjKSkubWFwKGFzID0+IG5ldyBTZXQoYXMpKTtcbmNvbnN0IHJlYWRvbmx5U2V0UHJldHR5ID0gaXRlbSA9PiBzZXQgPT4gYG5ldyBTZXQoWyR7QXJyYXkuZnJvbShzZXQudmFsdWVzKCkpLm1hcChhID0+IGl0ZW0oYSkpLmpvaW4oXCIsIFwiKX1dKWA7XG5jb25zdCByZWFkb25seVNldEVxdWl2YWxlbmNlID0gaXRlbSA9PiB7XG4gIGNvbnN0IGFycmF5RXF1aXZhbGVuY2UgPSBhcnJheV8uZ2V0RXF1aXZhbGVuY2UoaXRlbSk7XG4gIHJldHVybiBFcXVpdmFsZW5jZS5tYWtlKChhLCBiKSA9PiBhcnJheUVxdWl2YWxlbmNlKEFycmF5LmZyb20oYS52YWx1ZXMoKSksIEFycmF5LmZyb20oYi52YWx1ZXMoKSkpKTtcbn07XG5jb25zdCByZWFkb25seVNldFBhcnNlID0gZGVjb2RlVW5rbm93biA9PiAodSwgb3B0aW9ucywgYXN0KSA9PiBQcmVkaWNhdGUuaXNTZXQodSkgPyBQYXJzZVJlc3VsdC5tYXAoZGVjb2RlVW5rbm93bihBcnJheS5mcm9tKHUudmFsdWVzKCkpLCBvcHRpb25zKSwgYXMgPT4gbmV3IFNldChhcykpIDogUGFyc2VSZXN1bHQuZmFpbChuZXcgUGFyc2VSZXN1bHQuVHlwZShhc3QsIHUpKTtcbmNvbnN0IHNldEZyb21TZWxmXyA9ICh2YWx1ZSwgZGVzY3JpcHRpb24pID0+IGRlY2xhcmUoW3ZhbHVlXSwge1xuICBkZWNvZGU6IGl0ZW0gPT4gcmVhZG9ubHlTZXRQYXJzZShQYXJzZVJlc3VsdC5kZWNvZGVVbmtub3duKCRBcnJheShpdGVtKSkpLFxuICBlbmNvZGU6IGl0ZW0gPT4gcmVhZG9ubHlTZXRQYXJzZShQYXJzZVJlc3VsdC5lbmNvZGVVbmtub3duKCRBcnJheShpdGVtKSkpXG59LCB7XG4gIGRlc2NyaXB0aW9uLFxuICBwcmV0dHk6IHJlYWRvbmx5U2V0UHJldHR5LFxuICBhcmJpdHJhcnk6IHNldEFyYml0cmFyeSxcbiAgZXF1aXZhbGVuY2U6IHJlYWRvbmx5U2V0RXF1aXZhbGVuY2Vcbn0pO1xuLyoqXG4gKiBAY2F0ZWdvcnkgUmVhZG9ubHlTZXRcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5leHBvcnQgY29uc3QgUmVhZG9ubHlTZXRGcm9tU2VsZiA9IHZhbHVlID0+IHNldEZyb21TZWxmXyh2YWx1ZSwgYFJlYWRvbmx5U2V0PCR7Zm9ybWF0KHZhbHVlKX0+YCk7XG4vKipcbiAqIEBjYXRlZ29yeSBTZXRcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5leHBvcnQgY29uc3QgU2V0RnJvbVNlbGYgPSB2YWx1ZSA9PiBzZXRGcm9tU2VsZl8odmFsdWUsIGBTZXQ8JHtmb3JtYXQodmFsdWUpfT5gKTtcbi8qKlxuICogQGNhdGVnb3J5IFJlYWRvbmx5U2V0IHRyYW5zZm9ybWF0aW9uc1xuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBSZWFkb25seVNldCA9IHZhbHVlID0+IHtcbiAgY29uc3QgdmFsdWVfID0gYXNTY2hlbWEodmFsdWUpO1xuICByZXR1cm4gdHJhbnNmb3JtKCRBcnJheSh2YWx1ZV8pLCBSZWFkb25seVNldEZyb21TZWxmKHR5cGVTY2hlbWEodmFsdWVfKSksIHtcbiAgICBkZWNvZGU6IGFzID0+IG5ldyBTZXQoYXMpLFxuICAgIGVuY29kZTogc2V0ID0+IEFycmF5LmZyb20oc2V0KVxuICB9KTtcbn07XG5jb25zdCBzZXQgPSB2YWx1ZSA9PiB7XG4gIGNvbnN0IHZhbHVlXyA9IGFzU2NoZW1hKHZhbHVlKTtcbiAgcmV0dXJuIHRyYW5zZm9ybSgkQXJyYXkodmFsdWVfKSwgU2V0RnJvbVNlbGYodHlwZVNjaGVtYSh2YWx1ZV8pKSwge1xuICAgIGRlY29kZTogYXMgPT4gbmV3IFNldChhcyksXG4gICAgZW5jb2RlOiBzZXQgPT4gQXJyYXkuZnJvbShzZXQpXG4gIH0pO1xufTtcbmV4cG9ydCB7XG4vKipcbiAqIEBjYXRlZ29yeSBTZXQgdHJhbnNmb3JtYXRpb25zXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuc2V0IGFzIFNldCB9O1xuY29uc3QgYmlnRGVjaW1hbFByZXR0eSA9ICgpID0+IHZhbCA9PiBgQmlnRGVjaW1hbCgke2JpZ0RlY2ltYWxfLmZvcm1hdChiaWdEZWNpbWFsXy5ub3JtYWxpemUodmFsKSl9KWA7XG5jb25zdCBiaWdEZWNpbWFsQXJiaXRyYXJ5ID0gKCkgPT4gZmMgPT4gZmMudHVwbGUoZmMuYmlnSW50KCksIGZjLmludGVnZXIoKSkubWFwKChbdmFsdWUsIHNjYWxlXSkgPT4gYmlnRGVjaW1hbF8ubWFrZSh2YWx1ZSwgc2NhbGUpKTtcbi8qKlxuICogQGNhdGVnb3J5IEJpZ0RlY2ltYWwgY29uc3RydWN0b3JzXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IEJpZ0RlY2ltYWxGcm9tU2VsZiA9IC8qI19fUFVSRV9fKi9kZWNsYXJlKGJpZ0RlY2ltYWxfLmlzQmlnRGVjaW1hbCwge1xuICBpZGVudGlmaWVyOiBcIkJpZ0RlY2ltYWxGcm9tU2VsZlwiLFxuICBwcmV0dHk6IGJpZ0RlY2ltYWxQcmV0dHksXG4gIGFyYml0cmFyeTogYmlnRGVjaW1hbEFyYml0cmFyeSxcbiAgZXF1aXZhbGVuY2U6ICgpID0+IGJpZ0RlY2ltYWxfLkVxdWl2YWxlbmNlXG59KTtcbi8qKlxuICogQGNhdGVnb3J5IEJpZ0RlY2ltYWwgdHJhbnNmb3JtYXRpb25zXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IEJpZ0RlY2ltYWwgPSAvKiNfX1BVUkVfXyovdHJhbnNmb3JtT3JGYWlsKCRTdHJpbmcsIEJpZ0RlY2ltYWxGcm9tU2VsZiwge1xuICBkZWNvZGU6IChudW0sIF8sIGFzdCkgPT4gYmlnRGVjaW1hbF8uZnJvbVN0cmluZyhudW0pLnBpcGUob3B0aW9uXy5tYXRjaCh7XG4gICAgb25Ob25lOiAoKSA9PiBQYXJzZVJlc3VsdC5mYWlsKG5ldyBQYXJzZVJlc3VsdC5UeXBlKGFzdCwgbnVtKSksXG4gICAgb25Tb21lOiB2YWwgPT4gUGFyc2VSZXN1bHQuc3VjY2VlZChiaWdEZWNpbWFsXy5ub3JtYWxpemUodmFsKSlcbiAgfSkpLFxuICBlbmNvZGU6IHZhbCA9PiBQYXJzZVJlc3VsdC5zdWNjZWVkKGJpZ0RlY2ltYWxfLmZvcm1hdChiaWdEZWNpbWFsXy5ub3JtYWxpemUodmFsKSkpXG59KS5hbm5vdGF0aW9ucyh7XG4gIGlkZW50aWZpZXI6IFwiQmlnRGVjaW1hbFwiXG59KTtcbi8qKlxuICogQSBzY2hlbWEgdGhhdCB0cmFuc2Zvcm1zIGEgYG51bWJlcmAgaW50byBhIGBCaWdEZWNpbWFsYC5cbiAqIFdoZW4gZW5jb2RpbmcsIHRoaXMgU2NoZW1hIHdpbGwgcHJvZHVjZSBpbmNvcnJlY3QgcmVzdWx0cyBpZiB0aGUgQmlnRGVjaW1hbCBleGNlZWRzIHRoZSA2NC1iaXQgcmFuZ2Ugb2YgYSBudW1iZXIuXG4gKlxuICogQGNhdGVnb3J5IEJpZ0RlY2ltYWwgdHJhbnNmb3JtYXRpb25zXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IEJpZ0RlY2ltYWxGcm9tTnVtYmVyID0gLyojX19QVVJFX18qL3RyYW5zZm9ybU9yRmFpbCgkTnVtYmVyLCBCaWdEZWNpbWFsRnJvbVNlbGYsIHtcbiAgZGVjb2RlOiBudW0gPT4gUGFyc2VSZXN1bHQuc3VjY2VlZChiaWdEZWNpbWFsXy5mcm9tTnVtYmVyKG51bSkpLFxuICBlbmNvZGU6IHZhbCA9PiBQYXJzZVJlc3VsdC5zdWNjZWVkKGJpZ0RlY2ltYWxfLnVuc2FmZVRvTnVtYmVyKHZhbCkpXG59KS5hbm5vdGF0aW9ucyh7XG4gIGlkZW50aWZpZXI6IFwiQmlnRGVjaW1hbEZyb21OdW1iZXJcIlxufSk7XG4vKipcbiAqIEBjYXRlZ29yeSB0eXBlIGlkXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IEdyZWF0ZXJUaGFuQmlnRGVjaW1hbFR5cGVJZCA9IC8qI19fUFVSRV9fKi9TeW1ib2wuZm9yKFwiQGVmZmVjdC9zY2hlbWEvVHlwZUlkL0dyZWF0ZXJUaGFuQmlnRGVjaW1hbFwiKTtcbi8qKlxuICogQGNhdGVnb3J5IEJpZ0RlY2ltYWwgZmlsdGVyc1xuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBncmVhdGVyVGhhbkJpZ0RlY2ltYWwgPSAobWluLCBhbm5vdGF0aW9ucykgPT4gc2VsZiA9PiBzZWxmLnBpcGUoZmlsdGVyKGEgPT4gYmlnRGVjaW1hbF8uZ3JlYXRlclRoYW4oYSwgbWluKSwge1xuICB0eXBlSWQ6IHtcbiAgICBpZDogR3JlYXRlclRoYW5CaWdEZWNpbWFsVHlwZUlkLFxuICAgIGFubm90YXRpb246IHtcbiAgICAgIG1pblxuICAgIH1cbiAgfSxcbiAgZGVzY3JpcHRpb246IGBhIEJpZ0RlY2ltYWwgZ3JlYXRlciB0aGFuICR7YmlnRGVjaW1hbF8uZm9ybWF0KG1pbil9YCxcbiAgLi4uYW5ub3RhdGlvbnNcbn0pKTtcbi8qKlxuICogQGNhdGVnb3J5IHR5cGUgaWRcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5leHBvcnQgY29uc3QgR3JlYXRlclRoYW5PckVxdWFsVG9CaWdEZWNpbWFsVHlwZUlkID0gLyojX19QVVJFX18qL1N5bWJvbC5mb3IoXCJAZWZmZWN0L3NjaGVtYS9UeXBlSWQvR3JlYXRlclRoYW5PckVxdWFsVG9CaWdEZWNpbWFsXCIpO1xuLyoqXG4gKiBAY2F0ZWdvcnkgQmlnRGVjaW1hbCBmaWx0ZXJzXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IGdyZWF0ZXJUaGFuT3JFcXVhbFRvQmlnRGVjaW1hbCA9IChtaW4sIGFubm90YXRpb25zKSA9PiBzZWxmID0+IHNlbGYucGlwZShmaWx0ZXIoYSA9PiBiaWdEZWNpbWFsXy5ncmVhdGVyVGhhbk9yRXF1YWxUbyhhLCBtaW4pLCB7XG4gIHR5cGVJZDoge1xuICAgIGlkOiBHcmVhdGVyVGhhbk9yRXF1YWxUb0JpZ0RlY2ltYWxUeXBlSWQsXG4gICAgYW5ub3RhdGlvbjoge1xuICAgICAgbWluXG4gICAgfVxuICB9LFxuICBkZXNjcmlwdGlvbjogYGEgQmlnRGVjaW1hbCBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gJHtiaWdEZWNpbWFsXy5mb3JtYXQobWluKX1gLFxuICAuLi5hbm5vdGF0aW9uc1xufSkpO1xuLyoqXG4gKiBAY2F0ZWdvcnkgdHlwZSBpZFxuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBMZXNzVGhhbkJpZ0RlY2ltYWxUeXBlSWQgPSAvKiNfX1BVUkVfXyovU3ltYm9sLmZvcihcIkBlZmZlY3Qvc2NoZW1hL1R5cGVJZC9MZXNzVGhhbkJpZ0RlY2ltYWxcIik7XG4vKipcbiAqIEBjYXRlZ29yeSBCaWdEZWNpbWFsIGZpbHRlcnNcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5leHBvcnQgY29uc3QgbGVzc1RoYW5CaWdEZWNpbWFsID0gKG1heCwgYW5ub3RhdGlvbnMpID0+IHNlbGYgPT4gc2VsZi5waXBlKGZpbHRlcihhID0+IGJpZ0RlY2ltYWxfLmxlc3NUaGFuKGEsIG1heCksIHtcbiAgdHlwZUlkOiB7XG4gICAgaWQ6IExlc3NUaGFuQmlnRGVjaW1hbFR5cGVJZCxcbiAgICBhbm5vdGF0aW9uOiB7XG4gICAgICBtYXhcbiAgICB9XG4gIH0sXG4gIGRlc2NyaXB0aW9uOiBgYSBCaWdEZWNpbWFsIGxlc3MgdGhhbiAke2JpZ0RlY2ltYWxfLmZvcm1hdChtYXgpfWAsXG4gIC4uLmFubm90YXRpb25zXG59KSk7XG4vKipcbiAqIEBjYXRlZ29yeSB0eXBlIGlkXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IExlc3NUaGFuT3JFcXVhbFRvQmlnRGVjaW1hbFR5cGVJZCA9IC8qI19fUFVSRV9fKi9TeW1ib2wuZm9yKFwiQGVmZmVjdC9zY2hlbWEvVHlwZUlkL0xlc3NUaGFuT3JFcXVhbFRvQmlnRGVjaW1hbFwiKTtcbi8qKlxuICogQGNhdGVnb3J5IEJpZ0RlY2ltYWwgZmlsdGVyc1xuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBsZXNzVGhhbk9yRXF1YWxUb0JpZ0RlY2ltYWwgPSAobWF4LCBhbm5vdGF0aW9ucykgPT4gc2VsZiA9PiBzZWxmLnBpcGUoZmlsdGVyKGEgPT4gYmlnRGVjaW1hbF8ubGVzc1RoYW5PckVxdWFsVG8oYSwgbWF4KSwge1xuICB0eXBlSWQ6IHtcbiAgICBpZDogTGVzc1RoYW5PckVxdWFsVG9CaWdEZWNpbWFsVHlwZUlkLFxuICAgIGFubm90YXRpb246IHtcbiAgICAgIG1heFxuICAgIH1cbiAgfSxcbiAgZGVzY3JpcHRpb246IGBhIEJpZ0RlY2ltYWwgbGVzcyB0aGFuIG9yIGVxdWFsIHRvICR7YmlnRGVjaW1hbF8uZm9ybWF0KG1heCl9YCxcbiAgLi4uYW5ub3RhdGlvbnNcbn0pKTtcbi8qKlxuICogQGNhdGVnb3J5IHR5cGUgaWRcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5leHBvcnQgY29uc3QgUG9zaXRpdmVCaWdEZWNpbWFsVHlwZUlkID0gLyojX19QVVJFX18qL1N5bWJvbC5mb3IoXCJAZWZmZWN0L3NjaGVtYS9UeXBlSWQvUG9zaXRpdmVCaWdEZWNpbWFsXCIpO1xuLyoqXG4gKiBAY2F0ZWdvcnkgQmlnRGVjaW1hbCBmaWx0ZXJzXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IHBvc2l0aXZlQmlnRGVjaW1hbCA9IGFubm90YXRpb25zID0+IHNlbGYgPT4gc2VsZi5waXBlKGZpbHRlcihhID0+IGJpZ0RlY2ltYWxfLmlzUG9zaXRpdmUoYSksIHtcbiAgdHlwZUlkOiB7XG4gICAgaWQ6IFBvc2l0aXZlQmlnRGVjaW1hbFR5cGVJZCxcbiAgICBhbm5vdGF0aW9uOiB7fVxuICB9LFxuICBkZXNjcmlwdGlvbjogYGEgcG9zaXRpdmUgQmlnRGVjaW1hbGAsXG4gIC4uLmFubm90YXRpb25zXG59KSk7XG4vKipcbiAqIEBjYXRlZ29yeSBCaWdEZWNpbWFsIGNvbnN0cnVjdG9yc1xuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBQb3NpdGl2ZUJpZ0RlY2ltYWxGcm9tU2VsZiA9IC8qI19fUFVSRV9fKi9CaWdEZWNpbWFsRnJvbVNlbGYucGlwZSggLyojX19QVVJFX18qL3Bvc2l0aXZlQmlnRGVjaW1hbCh7XG4gIGlkZW50aWZpZXI6IFwiUG9zaXRpdmVCaWdEZWNpbWFsRnJvbVNlbGZcIixcbiAgdGl0bGU6IFwiUG9zaXRpdmVCaWdEZWNpbWFsRnJvbVNlbGZcIlxufSkpO1xuLyoqXG4gKiBAY2F0ZWdvcnkgdHlwZSBpZFxuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBOb25OZWdhdGl2ZUJpZ0RlY2ltYWxUeXBlSWQgPSAvKiNfX1BVUkVfXyovU3ltYm9sLmZvcihcIkBlZmZlY3Qvc2NoZW1hL1R5cGVJZC9Ob25OZWdhdGl2ZUJpZ0RlY2ltYWxcIik7XG4vKipcbiAqIEBjYXRlZ29yeSBCaWdEZWNpbWFsIGZpbHRlcnNcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5leHBvcnQgY29uc3Qgbm9uTmVnYXRpdmVCaWdEZWNpbWFsID0gYW5ub3RhdGlvbnMgPT4gc2VsZiA9PiBzZWxmLnBpcGUoZmlsdGVyKGEgPT4gYS52YWx1ZSA+PSAwbiwge1xuICB0eXBlSWQ6IHtcbiAgICBpZDogTm9uTmVnYXRpdmVCaWdEZWNpbWFsVHlwZUlkLFxuICAgIGFubm90YXRpb246IHt9XG4gIH0sXG4gIGRlc2NyaXB0aW9uOiBgYSBub24tbmVnYXRpdmUgQmlnRGVjaW1hbGAsXG4gIC4uLmFubm90YXRpb25zXG59KSk7XG4vKipcbiAqIEBjYXRlZ29yeSBCaWdEZWNpbWFsIGNvbnN0cnVjdG9yc1xuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBOb25OZWdhdGl2ZUJpZ0RlY2ltYWxGcm9tU2VsZiA9IC8qI19fUFVSRV9fKi9CaWdEZWNpbWFsRnJvbVNlbGYucGlwZSggLyojX19QVVJFX18qL25vbk5lZ2F0aXZlQmlnRGVjaW1hbCh7XG4gIGlkZW50aWZpZXI6IFwiTm9uTmVnYXRpdmVCaWdEZWNpbWFsRnJvbVNlbGZcIixcbiAgdGl0bGU6IFwiTm9uTmVnYXRpdmVCaWdEZWNpbWFsRnJvbVNlbGZcIlxufSkpO1xuLyoqXG4gKiBAY2F0ZWdvcnkgdHlwZSBpZFxuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBOZWdhdGl2ZUJpZ0RlY2ltYWxUeXBlSWQgPSAvKiNfX1BVUkVfXyovU3ltYm9sLmZvcihcIkBlZmZlY3Qvc2NoZW1hL1R5cGVJZC9OZWdhdGl2ZUJpZ0RlY2ltYWxcIik7XG4vKipcbiAqIEBjYXRlZ29yeSBCaWdEZWNpbWFsIGZpbHRlcnNcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5leHBvcnQgY29uc3QgbmVnYXRpdmVCaWdEZWNpbWFsID0gYW5ub3RhdGlvbnMgPT4gc2VsZiA9PiBzZWxmLnBpcGUoZmlsdGVyKGEgPT4gYmlnRGVjaW1hbF8uaXNOZWdhdGl2ZShhKSwge1xuICB0eXBlSWQ6IHtcbiAgICBpZDogTmVnYXRpdmVCaWdEZWNpbWFsVHlwZUlkLFxuICAgIGFubm90YXRpb246IHt9XG4gIH0sXG4gIGRlc2NyaXB0aW9uOiBgYSBuZWdhdGl2ZSBCaWdEZWNpbWFsYCxcbiAgLi4uYW5ub3RhdGlvbnNcbn0pKTtcbi8qKlxuICogQGNhdGVnb3J5IEJpZ0RlY2ltYWwgY29uc3RydWN0b3JzXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IE5lZ2F0aXZlQmlnRGVjaW1hbEZyb21TZWxmID0gLyojX19QVVJFX18qL0JpZ0RlY2ltYWxGcm9tU2VsZi5waXBlKCAvKiNfX1BVUkVfXyovbmVnYXRpdmVCaWdEZWNpbWFsKHtcbiAgaWRlbnRpZmllcjogXCJOZWdhdGl2ZUJpZ0RlY2ltYWxGcm9tU2VsZlwiLFxuICB0aXRsZTogXCJOZWdhdGl2ZUJpZ0RlY2ltYWxGcm9tU2VsZlwiXG59KSk7XG4vKipcbiAqIEBjYXRlZ29yeSB0eXBlIGlkXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IE5vblBvc2l0aXZlQmlnRGVjaW1hbFR5cGVJZCA9IC8qI19fUFVSRV9fKi9TeW1ib2wuZm9yKFwiQGVmZmVjdC9zY2hlbWEvVHlwZUlkL05vblBvc2l0aXZlQmlnRGVjaW1hbFwiKTtcbi8qKlxuICogQGNhdGVnb3J5IEJpZ0RlY2ltYWwgZmlsdGVyc1xuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBub25Qb3NpdGl2ZUJpZ0RlY2ltYWwgPSBhbm5vdGF0aW9ucyA9PiBzZWxmID0+IHNlbGYucGlwZShmaWx0ZXIoYSA9PiBhLnZhbHVlIDw9IDBuLCB7XG4gIHR5cGVJZDoge1xuICAgIGlkOiBOb25Qb3NpdGl2ZUJpZ0RlY2ltYWxUeXBlSWQsXG4gICAgYW5ub3RhdGlvbjoge31cbiAgfSxcbiAgZGVzY3JpcHRpb246IGBhIG5vbi1wb3NpdGl2ZSBCaWdEZWNpbWFsYCxcbiAgLi4uYW5ub3RhdGlvbnNcbn0pKTtcbi8qKlxuICogQGNhdGVnb3J5IEJpZ0RlY2ltYWwgY29uc3RydWN0b3JzXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IE5vblBvc2l0aXZlQmlnRGVjaW1hbEZyb21TZWxmID0gLyojX19QVVJFX18qL0JpZ0RlY2ltYWxGcm9tU2VsZi5waXBlKCAvKiNfX1BVUkVfXyovbm9uUG9zaXRpdmVCaWdEZWNpbWFsKHtcbiAgaWRlbnRpZmllcjogXCJOb25Qb3NpdGl2ZUJpZ0RlY2ltYWxGcm9tU2VsZlwiLFxuICB0aXRsZTogXCJOb25Qb3NpdGl2ZUJpZ0RlY2ltYWxGcm9tU2VsZlwiXG59KSk7XG4vKipcbiAqIEBjYXRlZ29yeSB0eXBlIGlkXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IEJldHdlZW5CaWdEZWNpbWFsVHlwZUlkID0gLyojX19QVVJFX18qL1N5bWJvbC5mb3IoXCJAZWZmZWN0L3NjaGVtYS9UeXBlSWQvQmV0d2VlbkJpZ0RlY2ltYWxcIik7XG4vKipcbiAqIEBjYXRlZ29yeSBCaWdEZWNpbWFsIGZpbHRlcnNcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5leHBvcnQgY29uc3QgYmV0d2VlbkJpZ0RlY2ltYWwgPSAobWluaW11bSwgbWF4aW11bSwgYW5ub3RhdGlvbnMpID0+IHNlbGYgPT4gc2VsZi5waXBlKGZpbHRlcihhID0+IGJpZ0RlY2ltYWxfLmJldHdlZW4oYSwge1xuICBtaW5pbXVtLFxuICBtYXhpbXVtXG59KSwge1xuICB0eXBlSWQ6IHtcbiAgICBpZDogQmV0d2VlbkJpZ0RlY2ltYWxUeXBlSWQsXG4gICAgYW5ub3RhdGlvbjoge1xuICAgICAgbWF4aW11bSxcbiAgICAgIG1pbmltdW1cbiAgICB9XG4gIH0sXG4gIGRlc2NyaXB0aW9uOiBgYSBCaWdEZWNpbWFsIGJldHdlZW4gJHtiaWdEZWNpbWFsXy5mb3JtYXQobWluaW11bSl9IGFuZCAke2JpZ0RlY2ltYWxfLmZvcm1hdChtYXhpbXVtKX1gLFxuICAuLi5hbm5vdGF0aW9uc1xufSkpO1xuLyoqXG4gKiBDbGFtcHMgYSBgQmlnRGVjaW1hbGAgYmV0d2VlbiBhIG1pbmltdW0gYW5kIGEgbWF4aW11bSB2YWx1ZS5cbiAqXG4gKiBAY2F0ZWdvcnkgQmlnRGVjaW1hbCB0cmFuc2Zvcm1hdGlvbnNcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5leHBvcnQgY29uc3QgY2xhbXBCaWdEZWNpbWFsID0gKG1pbmltdW0sIG1heGltdW0pID0+IHNlbGYgPT4gdHJhbnNmb3JtKHNlbGYsIHNlbGYucGlwZSh0eXBlU2NoZW1hLCBiZXR3ZWVuQmlnRGVjaW1hbChtaW5pbXVtLCBtYXhpbXVtKSksIHtcbiAgc3RyaWN0OiBmYWxzZSxcbiAgZGVjb2RlOiBzZWxmID0+IGJpZ0RlY2ltYWxfLmNsYW1wKHNlbGYsIHtcbiAgICBtaW5pbXVtLFxuICAgIG1heGltdW1cbiAgfSksXG4gIGVuY29kZTogaWRlbnRpdHlcbn0pO1xuY29uc3QgY2h1bmtBcmJpdHJhcnkgPSBpdGVtID0+IGZjID0+IGZjLmFycmF5KGl0ZW0oZmMpKS5tYXAoY2h1bmtfLmZyb21JdGVyYWJsZSk7XG5jb25zdCBjaHVua1ByZXR0eSA9IGl0ZW0gPT4gYyA9PiBgQ2h1bmsoJHtjaHVua18udG9SZWFkb25seUFycmF5KGMpLm1hcChpdGVtKS5qb2luKFwiLCBcIil9KWA7XG5jb25zdCBjaHVua1BhcnNlID0gZGVjb2RlVW5rbm93biA9PiAodSwgb3B0aW9ucywgYXN0KSA9PiBjaHVua18uaXNDaHVuayh1KSA/IGNodW5rXy5pc0VtcHR5KHUpID8gUGFyc2VSZXN1bHQuc3VjY2VlZChjaHVua18uZW1wdHkoKSkgOiBQYXJzZVJlc3VsdC5tYXAoZGVjb2RlVW5rbm93bihjaHVua18udG9SZWFkb25seUFycmF5KHUpLCBvcHRpb25zKSwgY2h1bmtfLmZyb21JdGVyYWJsZSkgOiBQYXJzZVJlc3VsdC5mYWlsKG5ldyBQYXJzZVJlc3VsdC5UeXBlKGFzdCwgdSkpO1xuLyoqXG4gKiBAY2F0ZWdvcnkgQ2h1bmsgdHJhbnNmb3JtYXRpb25zXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IENodW5rRnJvbVNlbGYgPSB2YWx1ZSA9PiB7XG4gIHJldHVybiBkZWNsYXJlKFt2YWx1ZV0sIHtcbiAgICBkZWNvZGU6IGl0ZW0gPT4gY2h1bmtQYXJzZShQYXJzZVJlc3VsdC5kZWNvZGVVbmtub3duKCRBcnJheShpdGVtKSkpLFxuICAgIGVuY29kZTogaXRlbSA9PiBjaHVua1BhcnNlKFBhcnNlUmVzdWx0LmVuY29kZVVua25vd24oJEFycmF5KGl0ZW0pKSlcbiAgfSwge1xuICAgIGRlc2NyaXB0aW9uOiBgQ2h1bms8JHtmb3JtYXQodmFsdWUpfT5gLFxuICAgIHByZXR0eTogY2h1bmtQcmV0dHksXG4gICAgYXJiaXRyYXJ5OiBjaHVua0FyYml0cmFyeSxcbiAgICBlcXVpdmFsZW5jZTogY2h1bmtfLmdldEVxdWl2YWxlbmNlXG4gIH0pO1xufTtcbi8qKlxuICogQGNhdGVnb3J5IENodW5rIHRyYW5zZm9ybWF0aW9uc1xuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBDaHVuayA9IHZhbHVlID0+IHtcbiAgY29uc3QgdmFsdWVfID0gYXNTY2hlbWEodmFsdWUpO1xuICByZXR1cm4gdHJhbnNmb3JtKCRBcnJheSh2YWx1ZV8pLCBDaHVua0Zyb21TZWxmKHR5cGVTY2hlbWEodmFsdWVfKSksIHtcbiAgICBkZWNvZGU6IGFzID0+IGFzLmxlbmd0aCA9PT0gMCA/IGNodW5rXy5lbXB0eSgpIDogY2h1bmtfLmZyb21JdGVyYWJsZShhcyksXG4gICAgZW5jb2RlOiBjaHVua18udG9SZWFkb25seUFycmF5XG4gIH0pO1xufTtcbmNvbnN0IHRvRGF0YSA9IGEgPT4gQXJyYXkuaXNBcnJheShhKSA/IGRhdGFfLmFycmF5KGEpIDogZGF0YV8uc3RydWN0KGEpO1xuY29uc3QgZGF0YUFyYml0cmFyeSA9IGl0ZW0gPT4gZmMgPT4gaXRlbShmYykubWFwKHRvRGF0YSk7XG5jb25zdCBkYXRhUHJldHR5ID0gaXRlbSA9PiBkID0+IGBEYXRhKCR7aXRlbShkKX0pYDtcbmNvbnN0IGRhdGFQYXJzZSA9IGRlY29kZVVua25vd24gPT4gKHUsIG9wdGlvbnMsIGFzdCkgPT4gRXF1YWwuaXNFcXVhbCh1KSA/IFBhcnNlUmVzdWx0Lm1hcChkZWNvZGVVbmtub3duKHUsIG9wdGlvbnMpLCB0b0RhdGEpIDogUGFyc2VSZXN1bHQuZmFpbChuZXcgUGFyc2VSZXN1bHQuVHlwZShhc3QsIHUpKTtcbi8qKlxuICogQGNhdGVnb3J5IERhdGEgdHJhbnNmb3JtYXRpb25zXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IERhdGFGcm9tU2VsZiA9IGl0ZW0gPT4ge1xuICByZXR1cm4gZGVjbGFyZShbaXRlbV0sIHtcbiAgICBkZWNvZGU6IGl0ZW0gPT4gZGF0YVBhcnNlKFBhcnNlUmVzdWx0LmRlY29kZVVua25vd24oaXRlbSkpLFxuICAgIGVuY29kZTogaXRlbSA9PiBkYXRhUGFyc2UoUGFyc2VSZXN1bHQuZW5jb2RlVW5rbm93bihpdGVtKSlcbiAgfSwge1xuICAgIGRlc2NyaXB0aW9uOiBgRGF0YTwke2Zvcm1hdChpdGVtKX0+YCxcbiAgICBwcmV0dHk6IGRhdGFQcmV0dHksXG4gICAgYXJiaXRyYXJ5OiBkYXRhQXJiaXRyYXJ5XG4gIH0pO1xufTtcbi8qKlxuICogQGNhdGVnb3J5IERhdGEgdHJhbnNmb3JtYXRpb25zXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IERhdGEgPSBpdGVtID0+IHRyYW5zZm9ybShpdGVtLCBEYXRhRnJvbVNlbGYodHlwZVNjaGVtYShpdGVtKSksIHtcbiAgc3RyaWN0OiBmYWxzZSxcbiAgZGVjb2RlOiB0b0RhdGEsXG4gIGVuY29kZTogYSA9PiBBcnJheS5pc0FycmF5KGEpID8gQXJyYXkuZnJvbShhKSA6IE9iamVjdC5hc3NpZ24oe30sIGEpXG59KTtcbi8qKlxuICogQGNhdGVnb3J5IGNsYXNzZXNcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5leHBvcnQgY29uc3QgQ2xhc3MgPSBpZGVudGlmaWVyID0+IChmaWVsZHMsIGFubm90YXRpb25zKSA9PiBtYWtlQ2xhc3Moe1xuICBraW5kOiBcIkNsYXNzXCIsXG4gIGlkZW50aWZpZXIsXG4gIGZpZWxkcyxcbiAgQmFzZTogZGF0YV8uQ2xhc3MsXG4gIGFubm90YXRpb25zXG59KTtcbi8qKlxuICogQGNhdGVnb3J5IGNsYXNzZXNcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5leHBvcnQgY29uc3QgVGFnZ2VkQ2xhc3MgPSBpZGVudGlmaWVyID0+ICh0YWcsIGZpZWxkcywgYW5ub3RhdGlvbnMpID0+IG1ha2VDbGFzcyh7XG4gIGtpbmQ6IFwiVGFnZ2VkQ2xhc3NcIixcbiAgaWRlbnRpZmllcjogaWRlbnRpZmllciA/PyB0YWcsXG4gIGZpZWxkczogZXh0ZW5kRmllbGRzKHtcbiAgICBfdGFnOiBMaXRlcmFsKHRhZylcbiAgfSwgZmllbGRzKSxcbiAgQmFzZTogZGF0YV8uQ2xhc3MsXG4gIHRhZzoge1xuICAgIF90YWc6IHRhZ1xuICB9LFxuICBhbm5vdGF0aW9uc1xufSk7XG4vKipcbiAqIEBjYXRlZ29yeSBjbGFzc2VzXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IFRhZ2dlZEVycm9yID0gaWRlbnRpZmllciA9PiAodGFnLCBmaWVsZHMsIGFubm90YXRpb25zKSA9PiB7XG4gIGNsYXNzIEJhc2UgZXh0ZW5kcyBkYXRhXy5FcnJvciB7fVxuICA7XG4gIEJhc2UucHJvdG90eXBlLm5hbWUgPSB0YWc7XG4gIHJldHVybiBtYWtlQ2xhc3Moe1xuICAgIGtpbmQ6IFwiVGFnZ2VkRXJyb3JcIixcbiAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyID8/IHRhZyxcbiAgICBmaWVsZHM6IGV4dGVuZEZpZWxkcyh7XG4gICAgICBfdGFnOiBMaXRlcmFsKHRhZylcbiAgICB9LCBmaWVsZHMpLFxuICAgIEJhc2UsXG4gICAgdGFnOiB7XG4gICAgICBfdGFnOiB0YWdcbiAgICB9LFxuICAgIGFubm90YXRpb25zLFxuICAgIHRvU3RyaW5nT3ZlcnJpZGUoc2VsZikge1xuICAgICAgaWYgKFByZWRpY2F0ZS5pc1N0cmluZyhzZWxmLm1lc3NhZ2UpICYmIHNlbGYubWVzc2FnZS5sZW5ndGggPiAwKSB7XG4gICAgICAgIGxldCBtZXNzYWdlID0gYCR7c2VsZi5fdGFnfTogJHtzZWxmLm1lc3NhZ2V9YDtcbiAgICAgICAgaWYgKFByZWRpY2F0ZS5pc1N0cmluZyhzZWxmLnN0YWNrKSkge1xuICAgICAgICAgIG1lc3NhZ2UgPSBgJHttZXNzYWdlfVxcbiR7c2VsZi5zdGFjay5zcGxpdChcIlxcblwiKS5zbGljZSgxKS5qb2luKFwiXFxuXCIpfWA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn07XG4vKipcbiAqIEBjYXRlZ29yeSBjbGFzc2VzXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IFRhZ2dlZFJlcXVlc3QgPSBpZGVudGlmaWVyID0+ICh0YWcsIEZhaWx1cmUsIFN1Y2Nlc3MsIGZpZWxkcywgYW5ub3RhdGlvbnMpID0+IHtcbiAgY2xhc3MgU2VyaWFsaXphYmxlUmVxdWVzdCBleHRlbmRzIFJlcXVlc3QuQ2xhc3Mge1xuICAgIGdldCBbc2VyaWFsaXphYmxlXy5zeW1ib2xdKCkge1xuICAgICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3I7XG4gICAgfVxuICAgIGdldCBbc2VyaWFsaXphYmxlXy5zeW1ib2xSZXN1bHRdKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgRmFpbHVyZSxcbiAgICAgICAgU3VjY2Vzc1xuICAgICAgfTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG1ha2VDbGFzcyh7XG4gICAga2luZDogXCJUYWdnZWRSZXF1ZXN0XCIsXG4gICAgaWRlbnRpZmllcjogaWRlbnRpZmllciA/PyB0YWcsXG4gICAgZmllbGRzOiBleHRlbmRGaWVsZHMoe1xuICAgICAgX3RhZzogTGl0ZXJhbCh0YWcpXG4gICAgfSwgZmllbGRzKSxcbiAgICBCYXNlOiBTZXJpYWxpemFibGVSZXF1ZXN0LFxuICAgIHRhZzoge1xuICAgICAgX3RhZzogdGFnXG4gICAgfSxcbiAgICBhbm5vdGF0aW9uc1xuICB9KTtcbn07XG5jb25zdCBleHRlbmRGaWVsZHMgPSAoYSwgYikgPT4ge1xuICBjb25zdCBvdXQgPSB7XG4gICAgLi4uYVxuICB9O1xuICBmb3IgKGNvbnN0IG5hbWUgb2YgdXRpbF8ub3duS2V5cyhiKSkge1xuICAgIGlmIChuYW1lIGluIGEpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvcnNfLmdldER1cGxpY2F0ZVByb3BlcnR5U2lnbmF0dXJlRXJyb3JNZXNzYWdlKG5hbWUpKTtcbiAgICB9XG4gICAgb3V0W25hbWVdID0gYltuYW1lXTtcbiAgfVxuICByZXR1cm4gb3V0O1xufTtcbmNvbnN0IG1ha2VDbGFzcyA9ICh7XG4gIEJhc2UsXG4gIGFubm90YXRpb25zLFxuICBmaWVsZHMsXG4gIGZyb21TY2hlbWEsXG4gIGlkZW50aWZpZXIsXG4gIGtpbmQsXG4gIHRhZyxcbiAgdG9TdHJpbmdPdmVycmlkZVxufSkgPT4ge1xuICBjb25zdCBjbGFzc1N5bWJvbCA9IFN5bWJvbC5mb3IoYEBlZmZlY3Qvc2NoZW1hLyR7a2luZH0vJHtpZGVudGlmaWVyfWApO1xuICBjb25zdCBzY2hlbWEgPSBmcm9tU2NoZW1hID8/IFN0cnVjdChmaWVsZHMpO1xuICBjb25zdCBmcm9tID0gb3B0aW9uXy5tYXRjaChBU1QuZ2V0VGl0bGVBbm5vdGF0aW9uKHNjaGVtYS5hc3QpLCB7XG4gICAgb25Ob25lOiAoKSA9PiBzY2hlbWEuYW5ub3RhdGlvbnMoe1xuICAgICAgdGl0bGU6IGAke2lkZW50aWZpZXJ9IChFbmNvZGVkIHNpZGUpYFxuICAgIH0pLFxuICAgIG9uU29tZTogKCkgPT4gc2NoZW1hXG4gIH0pO1xuICByZXR1cm4gY2xhc3MgZXh0ZW5kcyBCYXNlIHtcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcyA9IHt9LCBkaXNhYmxlVmFsaWRhdGlvbiA9IGZhbHNlKSB7XG4gICAgICBpZiAodGFnICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcHJvcHMgPSB7XG4gICAgICAgICAgLi4ucHJvcHMsXG4gICAgICAgICAgLi4udGFnXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICBpZiAoZGlzYWJsZVZhbGlkYXRpb24gIT09IHRydWUpIHtcbiAgICAgICAgcHJvcHMgPSBQYXJzZVJlc3VsdC52YWxpZGF0ZVN5bmMoc2NoZW1hKShwcm9wcyk7XG4gICAgICB9XG4gICAgICBzdXBlcihwcm9wcywgdHJ1ZSk7XG4gICAgfVxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS1cbiAgICAvLyBTY2hlbWEgaW50ZXJmYWNlXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLVxuICAgIHN0YXRpYyBbVHlwZUlkXSA9IHZhcmlhbmNlO1xuICAgIHN0YXRpYyBnZXQgYXN0KCkge1xuICAgICAgY29uc3QgdG9TY2hlbWEgPSB0eXBlU2NoZW1hKHNjaGVtYSk7XG4gICAgICBjb25zdCBndWFyZCA9IFBhcnNlUmVzdWx0LmlzKHRvU2NoZW1hKTtcbiAgICAgIGNvbnN0IGZhbGxiYWNrSW5zdGFuY2VPZiA9IHUgPT4gUHJlZGljYXRlLmhhc1Byb3BlcnR5KHUsIGNsYXNzU3ltYm9sKSAmJiBndWFyZCh1KTtcbiAgICAgIGNvbnN0IGVuY29kZSA9IFBhcnNlUmVzdWx0LmVuY29kZVVua25vd24odG9TY2hlbWEpO1xuICAgICAgY29uc3QgZGVjbGFyYXRpb24gPSBkZWNsYXJlKFt0b1NjaGVtYV0sIHtcbiAgICAgICAgZGVjb2RlOiAoKSA9PiAoaW5wdXQsIF8sIGFzdCkgPT4gaW5wdXQgaW5zdGFuY2VvZiB0aGlzIHx8IGZhbGxiYWNrSW5zdGFuY2VPZihpbnB1dCkgPyBQYXJzZVJlc3VsdC5zdWNjZWVkKGlucHV0KSA6IFBhcnNlUmVzdWx0LmZhaWwobmV3IFBhcnNlUmVzdWx0LlR5cGUoYXN0LCBpbnB1dCkpLFxuICAgICAgICBlbmNvZGU6ICgpID0+IChpbnB1dCwgb3B0aW9ucykgPT4gaW5wdXQgaW5zdGFuY2VvZiB0aGlzID8gUGFyc2VSZXN1bHQuc3VjY2VlZChpbnB1dCkgOiBQYXJzZVJlc3VsdC5tYXAoZW5jb2RlKGlucHV0LCBvcHRpb25zKSwgcHJvcHMgPT4gbmV3IHRoaXMocHJvcHMsIHRydWUpKVxuICAgICAgfSwge1xuICAgICAgICBpZGVudGlmaWVyLFxuICAgICAgICB0aXRsZTogaWRlbnRpZmllcixcbiAgICAgICAgZGVzY3JpcHRpb246IGBhbiBpbnN0YW5jZSBvZiAke2lkZW50aWZpZXJ9YCxcbiAgICAgICAgcHJldHR5OiBwcmV0dHkgPT4gc2VsZiA9PiBgJHtpZGVudGlmaWVyfSgke3ByZXR0eShzZWxmKX0pYCxcbiAgICAgICAgYXJiaXRyYXJ5OiBhcmIgPT4gZmMgPT4gYXJiKGZjKS5tYXAocHJvcHMgPT4gbmV3IHRoaXMocHJvcHMpKSxcbiAgICAgICAgZXF1aXZhbGVuY2U6IGlkZW50aXR5LFxuICAgICAgICBbQVNULlN1cnJvZ2F0ZUFubm90YXRpb25JZF06IHRvU2NoZW1hLmFzdCxcbiAgICAgICAgLi4uYW5ub3RhdGlvbnNcbiAgICAgIH0pO1xuICAgICAgY29uc3QgdHJhbnNmb3JtYXRpb24gPSB0cmFuc2Zvcm0oZnJvbSwgZGVjbGFyYXRpb24sIHtcbiAgICAgICAgZGVjb2RlOiBpbnB1dCA9PiBuZXcgdGhpcyhpbnB1dCwgdHJ1ZSksXG4gICAgICAgIGVuY29kZTogaWRlbnRpdHlcbiAgICAgIH0pLmFubm90YXRpb25zKHtcbiAgICAgICAgW0FTVC5TdXJyb2dhdGVBbm5vdGF0aW9uSWRdOiBzY2hlbWEuYXN0XG4gICAgICB9KTtcbiAgICAgIHJldHVybiB0cmFuc2Zvcm1hdGlvbi5hc3Q7XG4gICAgfVxuICAgIHN0YXRpYyBwaXBlKCkge1xuICAgICAgcmV0dXJuIHBpcGVBcmd1bWVudHModGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG4gICAgc3RhdGljIGFubm90YXRpb25zKGFubm90YXRpb25zKSB7XG4gICAgICByZXR1cm4gbWFrZSh0aGlzLmFzdCkuYW5ub3RhdGlvbnMoYW5ub3RhdGlvbnMpO1xuICAgIH1cbiAgICBzdGF0aWMgdG9TdHJpbmcoKSB7XG4gICAgICByZXR1cm4gYCgke1N0cmluZyhmcm9tKX0gPC0+ICR7aWRlbnRpZmllcn0pYDtcbiAgICB9XG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vIENsYXNzIGludGVyZmFjZVxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS1cbiAgICBzdGF0aWMgZmllbGRzID0ge1xuICAgICAgLi4uZmllbGRzXG4gICAgfTtcbiAgICBzdGF0aWMgaWRlbnRpZmllciA9IGlkZW50aWZpZXI7XG4gICAgc3RhdGljIGV4dGVuZChpZGVudGlmaWVyKSB7XG4gICAgICByZXR1cm4gKG5ld0ZpZWxkcywgYW5ub3RhdGlvbnMpID0+IHtcbiAgICAgICAgY29uc3QgZXh0ZW5kZWRGaWVsZHMgPSBleHRlbmRGaWVsZHMoZmllbGRzLCBuZXdGaWVsZHMpO1xuICAgICAgICByZXR1cm4gbWFrZUNsYXNzKHtcbiAgICAgICAgICBraW5kLFxuICAgICAgICAgIGlkZW50aWZpZXIsXG4gICAgICAgICAgZmllbGRzOiBleHRlbmRlZEZpZWxkcyxcbiAgICAgICAgICBCYXNlOiB0aGlzLFxuICAgICAgICAgIHRhZyxcbiAgICAgICAgICBhbm5vdGF0aW9uc1xuICAgICAgICB9KTtcbiAgICAgIH07XG4gICAgfVxuICAgIHN0YXRpYyB0cmFuc2Zvcm1PckZhaWwoaWRlbnRpZmllcikge1xuICAgICAgcmV0dXJuIChuZXdGaWVsZHMsIG9wdGlvbnMsIGFubm90YXRpb25zKSA9PiB7XG4gICAgICAgIGNvbnN0IHRyYW5zZm9ybWVkRmllbGRzID0gZXh0ZW5kRmllbGRzKGZpZWxkcywgbmV3RmllbGRzKTtcbiAgICAgICAgcmV0dXJuIG1ha2VDbGFzcyh7XG4gICAgICAgICAga2luZCxcbiAgICAgICAgICBpZGVudGlmaWVyLFxuICAgICAgICAgIGZyb21TY2hlbWE6IHRyYW5zZm9ybU9yRmFpbChzY2hlbWEsIHR5cGVTY2hlbWEoU3RydWN0KHRyYW5zZm9ybWVkRmllbGRzKSksIG9wdGlvbnMpLFxuICAgICAgICAgIGZpZWxkczogdHJhbnNmb3JtZWRGaWVsZHMsXG4gICAgICAgICAgQmFzZTogdGhpcyxcbiAgICAgICAgICB0YWcsXG4gICAgICAgICAgYW5ub3RhdGlvbnNcbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgIH1cbiAgICBzdGF0aWMgdHJhbnNmb3JtT3JGYWlsRnJvbShpZGVudGlmaWVyKSB7XG4gICAgICByZXR1cm4gKG5ld0ZpZWxkcywgb3B0aW9ucywgYW5ub3RhdGlvbnMpID0+IHtcbiAgICAgICAgY29uc3QgdHJhbnNmb3JtZWRGaWVsZHMgPSBleHRlbmRGaWVsZHMoZmllbGRzLCBuZXdGaWVsZHMpO1xuICAgICAgICByZXR1cm4gbWFrZUNsYXNzKHtcbiAgICAgICAgICBraW5kLFxuICAgICAgICAgIGlkZW50aWZpZXIsXG4gICAgICAgICAgZnJvbVNjaGVtYTogdHJhbnNmb3JtT3JGYWlsKGVuY29kZWRTY2hlbWEoc2NoZW1hKSwgU3RydWN0KHRyYW5zZm9ybWVkRmllbGRzKSwgb3B0aW9ucyksXG4gICAgICAgICAgZmllbGRzOiB0cmFuc2Zvcm1lZEZpZWxkcyxcbiAgICAgICAgICBCYXNlOiB0aGlzLFxuICAgICAgICAgIHRhZyxcbiAgICAgICAgICBhbm5vdGF0aW9uc1xuICAgICAgICB9KTtcbiAgICAgIH07XG4gICAgfVxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS1cbiAgICAvLyBvdGhlclxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS1cbiAgICBnZXQgW2NsYXNzU3ltYm9sXSgpIHtcbiAgICAgIHJldHVybiBjbGFzc1N5bWJvbDtcbiAgICB9XG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICBpZiAodG9TdHJpbmdPdmVycmlkZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnN0IG91dCA9IHRvU3RyaW5nT3ZlcnJpZGUodGhpcyk7XG4gICAgICAgIGlmIChvdXQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHJldHVybiBvdXQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBgJHtpZGVudGlmaWVyfSh7ICR7dXRpbF8ub3duS2V5cyhmaWVsZHMpLm1hcChwID0+IGAke3V0aWxfLmZvcm1hdFByb3BlcnR5S2V5KHApfTogJHt1dGlsXy5mb3JtYXRVbmtub3duKHRoaXNbcF0pfWApLmpvaW4oXCIsIFwiKX0gfSlgO1xuICAgIH1cbiAgfTtcbn07XG5jb25zdCBGaWJlcklkTm9uZUVuY29kZWQgPSAvKiNfX1BVUkVfXyovU3RydWN0KHtcbiAgX3RhZzogTGl0ZXJhbChcIk5vbmVcIilcbn0pLmFubm90YXRpb25zKHtcbiAgaWRlbnRpZmllcjogXCJGaWJlcklkTm9uZUVuY29kZWRcIlxufSk7XG5jb25zdCBGaWJlcklkUnVudGltZUVuY29kZWQgPSAvKiNfX1BVUkVfXyovU3RydWN0KHtcbiAgX3RhZzogTGl0ZXJhbChcIlJ1bnRpbWVcIiksXG4gIGlkOiBJbnQuYW5ub3RhdGlvbnMoe1xuICAgIHRpdGxlOiBcImlkXCIsXG4gICAgZGVzY3JpcHRpb246IFwiaWRcIlxuICB9KSxcbiAgc3RhcnRUaW1lTWlsbGlzOiBJbnQuYW5ub3RhdGlvbnMoe1xuICAgIHRpdGxlOiBcInN0YXJ0VGltZU1pbGxpc1wiLFxuICAgIGRlc2NyaXB0aW9uOiBcInN0YXJ0VGltZU1pbGxpc1wiXG4gIH0pXG59KS5hbm5vdGF0aW9ucyh7XG4gIGlkZW50aWZpZXI6IFwiRmliZXJJZFJ1bnRpbWVFbmNvZGVkXCJcbn0pO1xuY29uc3QgRmliZXJJZENvbXBvc2l0ZUVuY29kZWQgPSAvKiNfX1BVUkVfXyovU3RydWN0KHtcbiAgX3RhZzogTGl0ZXJhbChcIkNvbXBvc2l0ZVwiKSxcbiAgbGVmdDogc3VzcGVuZCgoKSA9PiBGaWJlcklkRW5jb2RlZCksXG4gIHJpZ2h0OiBzdXNwZW5kKCgpID0+IEZpYmVySWRFbmNvZGVkKVxufSkuYW5ub3RhdGlvbnMoe1xuICBpZGVudGlmaWVyOiBcIkZpYmVySWRDb21wb3NpdGVFbmNvZGVkXCJcbn0pO1xuY29uc3QgRmliZXJJZEVuY29kZWQgPSAvKiNfX1BVUkVfXyovVW5pb24oRmliZXJJZE5vbmVFbmNvZGVkLCBGaWJlcklkUnVudGltZUVuY29kZWQsIEZpYmVySWRDb21wb3NpdGVFbmNvZGVkKS5hbm5vdGF0aW9ucyh7XG4gIGlkZW50aWZpZXI6IFwiRmliZXJJZEVuY29kZWRcIlxufSk7XG5jb25zdCBmaWJlcklkQXJiaXRyYXJ5ID0gZmMgPT4gZmMubGV0cmVjKHRpZSA9PiAoe1xuICBOb25lOiBmYy5yZWNvcmQoe1xuICAgIF90YWc6IGZjLmNvbnN0YW50KFwiTm9uZVwiKVxuICB9KSxcbiAgUnVudGltZTogZmMucmVjb3JkKHtcbiAgICBfdGFnOiBmYy5jb25zdGFudChcIlJ1bnRpbWVcIiksXG4gICAgaWQ6IGZjLmludGVnZXIoKSxcbiAgICBzdGFydFRpbWVNaWxsaXM6IGZjLmludGVnZXIoKVxuICB9KSxcbiAgQ29tcG9zaXRlOiBmYy5yZWNvcmQoe1xuICAgIF90YWc6IGZjLmNvbnN0YW50KFwiQ29tcG9zaXRlXCIpLFxuICAgIGxlZnQ6IHRpZShcIkZpYmVySWRcIiksXG4gICAgcmlnaHQ6IHRpZShcIkZpYmVySWRcIilcbiAgfSksXG4gIEZpYmVySWQ6IGZjLm9uZW9mKHRpZShcIk5vbmVcIiksIHRpZShcIlJ1bnRpbWVcIiksIHRpZShcIkNvbXBvc2l0ZVwiKSlcbn0pKS5GaWJlcklkLm1hcChmaWJlcklkRGVjb2RlKTtcbmNvbnN0IGZpYmVySWRQcmV0dHkgPSBmaWJlcklkID0+IHtcbiAgc3dpdGNoIChmaWJlcklkLl90YWcpIHtcbiAgICBjYXNlIFwiTm9uZVwiOlxuICAgICAgcmV0dXJuIFwiRmliZXJJZC5ub25lXCI7XG4gICAgY2FzZSBcIlJ1bnRpbWVcIjpcbiAgICAgIHJldHVybiBgRmliZXJJZC5ydW50aW1lKCR7ZmliZXJJZC5pZH0sICR7ZmliZXJJZC5zdGFydFRpbWVNaWxsaXN9KWA7XG4gICAgY2FzZSBcIkNvbXBvc2l0ZVwiOlxuICAgICAgcmV0dXJuIGBGaWJlcklkLmNvbXBvc2l0ZSgke2ZpYmVySWRQcmV0dHkoZmliZXJJZC5yaWdodCl9LCAke2ZpYmVySWRQcmV0dHkoZmliZXJJZC5sZWZ0KX0pYDtcbiAgfVxufTtcbi8qKlxuICogQGNhdGVnb3J5IEZpYmVySWQgY29uc3RydWN0b3JzXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IEZpYmVySWRGcm9tU2VsZiA9IC8qI19fUFVSRV9fKi9kZWNsYXJlKGZpYmVySWRfLmlzRmliZXJJZCwge1xuICBpZGVudGlmaWVyOiBcIkZpYmVySWRGcm9tU2VsZlwiLFxuICBwcmV0dHk6ICgpID0+IGZpYmVySWRQcmV0dHksXG4gIGFyYml0cmFyeTogKCkgPT4gZmliZXJJZEFyYml0cmFyeVxufSk7XG5jb25zdCBmaWJlcklkRGVjb2RlID0gaW5wdXQgPT4ge1xuICBzd2l0Y2ggKGlucHV0Ll90YWcpIHtcbiAgICBjYXNlIFwiTm9uZVwiOlxuICAgICAgcmV0dXJuIGZpYmVySWRfLm5vbmU7XG4gICAgY2FzZSBcIlJ1bnRpbWVcIjpcbiAgICAgIHJldHVybiBmaWJlcklkXy5ydW50aW1lKGlucHV0LmlkLCBpbnB1dC5zdGFydFRpbWVNaWxsaXMpO1xuICAgIGNhc2UgXCJDb21wb3NpdGVcIjpcbiAgICAgIHJldHVybiBmaWJlcklkXy5jb21wb3NpdGUoZmliZXJJZERlY29kZShpbnB1dC5sZWZ0KSwgZmliZXJJZERlY29kZShpbnB1dC5yaWdodCkpO1xuICB9XG59O1xuY29uc3QgZmliZXJJZEVuY29kZSA9IGlucHV0ID0+IHtcbiAgc3dpdGNoIChpbnB1dC5fdGFnKSB7XG4gICAgY2FzZSBcIk5vbmVcIjpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIF90YWc6IFwiTm9uZVwiXG4gICAgICB9O1xuICAgIGNhc2UgXCJSdW50aW1lXCI6XG4gICAgICByZXR1cm4ge1xuICAgICAgICBfdGFnOiBcIlJ1bnRpbWVcIixcbiAgICAgICAgaWQ6IGlucHV0LmlkLFxuICAgICAgICBzdGFydFRpbWVNaWxsaXM6IGlucHV0LnN0YXJ0VGltZU1pbGxpc1xuICAgICAgfTtcbiAgICBjYXNlIFwiQ29tcG9zaXRlXCI6XG4gICAgICByZXR1cm4ge1xuICAgICAgICBfdGFnOiBcIkNvbXBvc2l0ZVwiLFxuICAgICAgICBsZWZ0OiBmaWJlcklkRW5jb2RlKGlucHV0LmxlZnQpLFxuICAgICAgICByaWdodDogZmliZXJJZEVuY29kZShpbnB1dC5yaWdodClcbiAgICAgIH07XG4gIH1cbn07XG4vKipcbiAqIEBjYXRlZ29yeSBGaWJlcklkIHRyYW5zZm9ybWF0aW9uc1xuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBGaWJlcklkID0gLyojX19QVVJFX18qL3RyYW5zZm9ybShGaWJlcklkRW5jb2RlZCwgRmliZXJJZEZyb21TZWxmLCB7XG4gIGRlY29kZTogZmliZXJJZERlY29kZSxcbiAgZW5jb2RlOiBmaWJlcklkRW5jb2RlXG59KS5hbm5vdGF0aW9ucyh7XG4gIGlkZW50aWZpZXI6IFwiRmliZXJJZFwiXG59KTtcbmNvbnN0IGNhdXNlRGllRW5jb2RlZCA9IGRlZmVjdCA9PiBTdHJ1Y3Qoe1xuICBfdGFnOiBMaXRlcmFsKFwiRGllXCIpLFxuICBkZWZlY3Rcbn0pO1xuY29uc3QgQ2F1c2VFbXB0eUVuY29kZWQgPSAvKiNfX1BVUkVfXyovU3RydWN0KHtcbiAgX3RhZzogLyojX19QVVJFX18qL0xpdGVyYWwoXCJFbXB0eVwiKVxufSk7XG5jb25zdCBjYXVzZUZhaWxFbmNvZGVkID0gZXJyb3IgPT4gU3RydWN0KHtcbiAgX3RhZzogTGl0ZXJhbChcIkZhaWxcIiksXG4gIGVycm9yXG59KTtcbmNvbnN0IENhdXNlSW50ZXJydXB0RW5jb2RlZCA9IC8qI19fUFVSRV9fKi9TdHJ1Y3Qoe1xuICBfdGFnOiAvKiNfX1BVUkVfXyovTGl0ZXJhbChcIkludGVycnVwdFwiKSxcbiAgZmliZXJJZDogRmliZXJJZEVuY29kZWRcbn0pO1xuY29uc3QgY2F1c2VQYXJhbGxlbEVuY29kZWQgPSBjYXVzZUVuY29kZWQgPT4gU3RydWN0KHtcbiAgX3RhZzogTGl0ZXJhbChcIlBhcmFsbGVsXCIpLFxuICBsZWZ0OiBjYXVzZUVuY29kZWQsXG4gIHJpZ2h0OiBjYXVzZUVuY29kZWRcbn0pO1xuY29uc3QgY2F1c2VTZXF1ZW50aWFsRW5jb2RlZCA9IGNhdXNlRW5jb2RlZCA9PiBTdHJ1Y3Qoe1xuICBfdGFnOiBMaXRlcmFsKFwiU2VxdWVudGlhbFwiKSxcbiAgbGVmdDogY2F1c2VFbmNvZGVkLFxuICByaWdodDogY2F1c2VFbmNvZGVkXG59KTtcbmNvbnN0IGNhdXNlRW5jb2RlZCA9IChlcnJvciwgZGVmZWN0KSA9PiB7XG4gIGNvbnN0IHJlY3VyID0gc3VzcGVuZCgoKSA9PiBvdXQpO1xuICBjb25zdCBvdXQgPSBVbmlvbihDYXVzZUVtcHR5RW5jb2RlZCwgY2F1c2VGYWlsRW5jb2RlZChlcnJvciksIGNhdXNlRGllRW5jb2RlZChkZWZlY3QpLCBDYXVzZUludGVycnVwdEVuY29kZWQsIGNhdXNlU2VxdWVudGlhbEVuY29kZWQocmVjdXIpLCBjYXVzZVBhcmFsbGVsRW5jb2RlZChyZWN1cikpLmFubm90YXRpb25zKHtcbiAgICBkZXNjcmlwdGlvbjogYENhdXNlRW5jb2RlZDwke2Zvcm1hdChlcnJvcil9PmBcbiAgfSk7XG4gIHJldHVybiBvdXQ7XG59O1xuY29uc3QgY2F1c2VBcmJpdHJhcnkgPSAoZXJyb3IsIGRlZmVjdCkgPT4gZmMgPT4gZmMubGV0cmVjKHRpZSA9PiAoe1xuICBFbXB0eTogZmMucmVjb3JkKHtcbiAgICBfdGFnOiBmYy5jb25zdGFudChcIkVtcHR5XCIpXG4gIH0pLFxuICBGYWlsOiBmYy5yZWNvcmQoe1xuICAgIF90YWc6IGZjLmNvbnN0YW50KFwiRmFpbFwiKSxcbiAgICBlcnJvcjogZXJyb3IoZmMpXG4gIH0pLFxuICBEaWU6IGZjLnJlY29yZCh7XG4gICAgX3RhZzogZmMuY29uc3RhbnQoXCJEaWVcIiksXG4gICAgZGVmZWN0OiBkZWZlY3QoZmMpXG4gIH0pLFxuICBJbnRlcnJ1cHQ6IGZjLnJlY29yZCh7XG4gICAgX3RhZzogZmMuY29uc3RhbnQoXCJJbnRlcnJ1cHRcIiksXG4gICAgZmliZXJJZDogZmliZXJJZEFyYml0cmFyeShmYylcbiAgfSksXG4gIFNlcXVlbnRpYWw6IGZjLnJlY29yZCh7XG4gICAgX3RhZzogZmMuY29uc3RhbnQoXCJTZXF1ZW50aWFsXCIpLFxuICAgIGxlZnQ6IHRpZShcIkNhdXNlXCIpLFxuICAgIHJpZ2h0OiB0aWUoXCJDYXVzZVwiKVxuICB9KSxcbiAgUGFyYWxsZWw6IGZjLnJlY29yZCh7XG4gICAgX3RhZzogZmMuY29uc3RhbnQoXCJQYXJhbGxlbFwiKSxcbiAgICBsZWZ0OiB0aWUoXCJDYXVzZVwiKSxcbiAgICByaWdodDogdGllKFwiQ2F1c2VcIilcbiAgfSksXG4gIENhdXNlOiBmYy5vbmVvZih0aWUoXCJFbXB0eVwiKSwgdGllKFwiRmFpbFwiKSwgdGllKFwiRGllXCIpLCB0aWUoXCJJbnRlcnJ1cHRcIiksIHRpZShcIlNlcXVlbnRpYWxcIiksIHRpZShcIlBhcmFsbGVsXCIpKVxufSkpLkNhdXNlLm1hcChjYXVzZURlY29kZSk7XG5jb25zdCBjYXVzZVByZXR0eSA9IGVycm9yID0+IGNhdXNlID0+IHtcbiAgY29uc3QgZiA9IGNhdXNlID0+IHtcbiAgICBzd2l0Y2ggKGNhdXNlLl90YWcpIHtcbiAgICAgIGNhc2UgXCJFbXB0eVwiOlxuICAgICAgICByZXR1cm4gXCJDYXVzZS5lbXB0eVwiO1xuICAgICAgY2FzZSBcIkZhaWxcIjpcbiAgICAgICAgcmV0dXJuIGBDYXVzZS5mYWlsKCR7ZXJyb3IoY2F1c2UuZXJyb3IpfSlgO1xuICAgICAgY2FzZSBcIkRpZVwiOlxuICAgICAgICByZXR1cm4gYENhdXNlLmRpZSgke2NhdXNlXy5wcmV0dHkoY2F1c2UpfSlgO1xuICAgICAgY2FzZSBcIkludGVycnVwdFwiOlxuICAgICAgICByZXR1cm4gYENhdXNlLmludGVycnVwdCgke2ZpYmVySWRQcmV0dHkoY2F1c2UuZmliZXJJZCl9KWA7XG4gICAgICBjYXNlIFwiU2VxdWVudGlhbFwiOlxuICAgICAgICByZXR1cm4gYENhdXNlLnNlcXVlbnRpYWwoJHtmKGNhdXNlLmxlZnQpfSwgJHtmKGNhdXNlLnJpZ2h0KX0pYDtcbiAgICAgIGNhc2UgXCJQYXJhbGxlbFwiOlxuICAgICAgICByZXR1cm4gYENhdXNlLnBhcmFsbGVsKCR7ZihjYXVzZS5sZWZ0KX0sICR7ZihjYXVzZS5yaWdodCl9KWA7XG4gICAgfVxuICB9O1xuICByZXR1cm4gZihjYXVzZSk7XG59O1xuY29uc3QgY2F1c2VQYXJzZSA9IGRlY29kZVVua25vd24gPT4gKHUsIG9wdGlvbnMsIGFzdCkgPT4gY2F1c2VfLmlzQ2F1c2UodSkgPyBQYXJzZVJlc3VsdC5tYXAoZGVjb2RlVW5rbm93bihjYXVzZUVuY29kZSh1KSwgb3B0aW9ucyksIGNhdXNlRGVjb2RlKSA6IFBhcnNlUmVzdWx0LmZhaWwobmV3IFBhcnNlUmVzdWx0LlR5cGUoYXN0LCB1KSk7XG4vKipcbiAqIEBjYXRlZ29yeSBDYXVzZSB0cmFuc2Zvcm1hdGlvbnNcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5leHBvcnQgY29uc3QgQ2F1c2VGcm9tU2VsZiA9ICh7XG4gIGRlZmVjdCA9IFVua25vd24sXG4gIGVycm9yXG59KSA9PiB7XG4gIHJldHVybiBkZWNsYXJlKFtlcnJvciwgZGVmZWN0XSwge1xuICAgIGRlY29kZTogKGVycm9yLCBkZWZlY3QpID0+IGNhdXNlUGFyc2UoUGFyc2VSZXN1bHQuZGVjb2RlVW5rbm93bihjYXVzZUVuY29kZWQoZXJyb3IsIGRlZmVjdCkpKSxcbiAgICBlbmNvZGU6IChlcnJvciwgZGVmZWN0KSA9PiBjYXVzZVBhcnNlKFBhcnNlUmVzdWx0LmVuY29kZVVua25vd24oY2F1c2VFbmNvZGVkKGVycm9yLCBkZWZlY3QpKSlcbiAgfSwge1xuICAgIGRlc2NyaXB0aW9uOiBgQ2F1c2U8JHtmb3JtYXQoZXJyb3IpfT5gLFxuICAgIHByZXR0eTogY2F1c2VQcmV0dHksXG4gICAgYXJiaXRyYXJ5OiBjYXVzZUFyYml0cmFyeVxuICB9KTtcbn07XG5mdW5jdGlvbiBjYXVzZURlY29kZShjYXVzZSkge1xuICBzd2l0Y2ggKGNhdXNlLl90YWcpIHtcbiAgICBjYXNlIFwiRW1wdHlcIjpcbiAgICAgIHJldHVybiBjYXVzZV8uZW1wdHk7XG4gICAgY2FzZSBcIkZhaWxcIjpcbiAgICAgIHJldHVybiBjYXVzZV8uZmFpbChjYXVzZS5lcnJvcik7XG4gICAgY2FzZSBcIkRpZVwiOlxuICAgICAgcmV0dXJuIGNhdXNlXy5kaWUoY2F1c2UuZGVmZWN0KTtcbiAgICBjYXNlIFwiSW50ZXJydXB0XCI6XG4gICAgICByZXR1cm4gY2F1c2VfLmludGVycnVwdChmaWJlcklkRGVjb2RlKGNhdXNlLmZpYmVySWQpKTtcbiAgICBjYXNlIFwiU2VxdWVudGlhbFwiOlxuICAgICAgcmV0dXJuIGNhdXNlXy5zZXF1ZW50aWFsKGNhdXNlRGVjb2RlKGNhdXNlLmxlZnQpLCBjYXVzZURlY29kZShjYXVzZS5yaWdodCkpO1xuICAgIGNhc2UgXCJQYXJhbGxlbFwiOlxuICAgICAgcmV0dXJuIGNhdXNlXy5wYXJhbGxlbChjYXVzZURlY29kZShjYXVzZS5sZWZ0KSwgY2F1c2VEZWNvZGUoY2F1c2UucmlnaHQpKTtcbiAgfVxufVxuZnVuY3Rpb24gY2F1c2VFbmNvZGUoY2F1c2UpIHtcbiAgc3dpdGNoIChjYXVzZS5fdGFnKSB7XG4gICAgY2FzZSBcIkVtcHR5XCI6XG4gICAgICByZXR1cm4ge1xuICAgICAgICBfdGFnOiBcIkVtcHR5XCJcbiAgICAgIH07XG4gICAgY2FzZSBcIkZhaWxcIjpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIF90YWc6IFwiRmFpbFwiLFxuICAgICAgICBlcnJvcjogY2F1c2UuZXJyb3JcbiAgICAgIH07XG4gICAgY2FzZSBcIkRpZVwiOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgX3RhZzogXCJEaWVcIixcbiAgICAgICAgZGVmZWN0OiBjYXVzZS5kZWZlY3RcbiAgICAgIH07XG4gICAgY2FzZSBcIkludGVycnVwdFwiOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgX3RhZzogXCJJbnRlcnJ1cHRcIixcbiAgICAgICAgZmliZXJJZDogY2F1c2UuZmliZXJJZFxuICAgICAgfTtcbiAgICBjYXNlIFwiU2VxdWVudGlhbFwiOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgX3RhZzogXCJTZXF1ZW50aWFsXCIsXG4gICAgICAgIGxlZnQ6IGNhdXNlRW5jb2RlKGNhdXNlLmxlZnQpLFxuICAgICAgICByaWdodDogY2F1c2VFbmNvZGUoY2F1c2UucmlnaHQpXG4gICAgICB9O1xuICAgIGNhc2UgXCJQYXJhbGxlbFwiOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgX3RhZzogXCJQYXJhbGxlbFwiLFxuICAgICAgICBsZWZ0OiBjYXVzZUVuY29kZShjYXVzZS5sZWZ0KSxcbiAgICAgICAgcmlnaHQ6IGNhdXNlRW5jb2RlKGNhdXNlLnJpZ2h0KVxuICAgICAgfTtcbiAgfVxufVxuLyoqXG4gKiBAY2F0ZWdvcnkgQ2F1c2UgdHJhbnNmb3JtYXRpb25zXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IENhdXNlRGVmZWN0VW5rbm93biA9IC8qI19fUFVSRV9fKi90cmFuc2Zvcm0oVW5rbm93biwgVW5rbm93biwge1xuICBkZWNvZGU6IHUgPT4ge1xuICAgIGlmIChQcmVkaWNhdGUuaXNPYmplY3QodSkgJiYgXCJtZXNzYWdlXCIgaW4gdSAmJiB0eXBlb2YgdS5tZXNzYWdlID09PSBcInN0cmluZ1wiKSB7XG4gICAgICBjb25zdCBlcnIgPSBuZXcgRXJyb3IodS5tZXNzYWdlLCB7XG4gICAgICAgIGNhdXNlOiB1XG4gICAgICB9KTtcbiAgICAgIGlmIChcIm5hbWVcIiBpbiB1ICYmIHR5cGVvZiB1Lm5hbWUgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgZXJyLm5hbWUgPSB1Lm5hbWU7XG4gICAgICB9XG4gICAgICBlcnIuc3RhY2sgPSBcInN0YWNrXCIgaW4gdSAmJiB0eXBlb2YgdS5zdGFjayA9PT0gXCJzdHJpbmdcIiA/IHUuc3RhY2sgOiBcIlwiO1xuICAgICAgcmV0dXJuIGVycjtcbiAgICB9XG4gICAgcmV0dXJuIFN0cmluZyh1KTtcbiAgfSxcbiAgZW5jb2RlOiBkZWZlY3QgPT4ge1xuICAgIGlmIChkZWZlY3QgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbmFtZTogZGVmZWN0Lm5hbWUsXG4gICAgICAgIG1lc3NhZ2U6IGRlZmVjdC5tZXNzYWdlXG4gICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gU3RyaW5nKGRlZmVjdCk7XG4gIH1cbn0pO1xuLyoqXG4gKiBAY2F0ZWdvcnkgQ2F1c2UgdHJhbnNmb3JtYXRpb25zXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IENhdXNlID0gKHtcbiAgZGVmZWN0ID0gQ2F1c2VEZWZlY3RVbmtub3duLFxuICBlcnJvclxufSkgPT4ge1xuICBjb25zdCBlcnJvcl8gPSBhc1NjaGVtYShlcnJvcik7XG4gIHJldHVybiB0cmFuc2Zvcm0oY2F1c2VFbmNvZGVkKGVycm9yXywgZGVmZWN0KSwgQ2F1c2VGcm9tU2VsZih7XG4gICAgZXJyb3I6IHR5cGVTY2hlbWEoZXJyb3JfKSxcbiAgICBkZWZlY3Q6IHR5cGVTY2hlbWEoZGVmZWN0KVxuICB9KSwge1xuICAgIGRlY29kZTogY2F1c2VEZWNvZGUsXG4gICAgZW5jb2RlOiBjYXVzZUVuY29kZVxuICB9KTtcbn07XG5jb25zdCBleGl0RmFpbHVyZUVuY29kZWQgPSAoZXJyb3IsIGRlZmVjdCkgPT4gU3RydWN0KHtcbiAgX3RhZzogTGl0ZXJhbChcIkZhaWx1cmVcIiksXG4gIGNhdXNlOiBjYXVzZUVuY29kZWQoZXJyb3IsIGRlZmVjdClcbn0pLmFubm90YXRpb25zKHtcbiAgZGVzY3JpcHRpb246IGBGYWlsdXJlRW5jb2RlZDwke2Zvcm1hdChlcnJvcil9PmBcbn0pO1xuY29uc3QgZXhpdFN1Y2Nlc3NFbmNvZGVkID0gdmFsdWUgPT4gU3RydWN0KHtcbiAgX3RhZzogTGl0ZXJhbChcIlN1Y2Nlc3NcIiksXG4gIHZhbHVlXG59KS5hbm5vdGF0aW9ucyh7XG4gIGRlc2NyaXB0aW9uOiBgU3VjY2Vzc0VuY29kZWQ8JHtmb3JtYXQodmFsdWUpfT5gXG59KTtcbmNvbnN0IGV4aXRFbmNvZGVkID0gKHZhbHVlLCBlcnJvciwgZGVmZWN0KSA9PiBVbmlvbihleGl0RmFpbHVyZUVuY29kZWQoZXJyb3IsIGRlZmVjdCksIGV4aXRTdWNjZXNzRW5jb2RlZCh2YWx1ZSkpLmFubm90YXRpb25zKHtcbiAgZGVzY3JpcHRpb246IGBFeGl0RW5jb2RlZDwke2Zvcm1hdCh2YWx1ZSl9LCAke2Zvcm1hdChlcnJvcil9PmBcbn0pO1xuY29uc3QgZXhpdERlY29kZSA9IGlucHV0ID0+IHtcbiAgc3dpdGNoIChpbnB1dC5fdGFnKSB7XG4gICAgY2FzZSBcIkZhaWx1cmVcIjpcbiAgICAgIHJldHVybiBleGl0Xy5mYWlsQ2F1c2UoY2F1c2VEZWNvZGUoaW5wdXQuY2F1c2UpKTtcbiAgICBjYXNlIFwiU3VjY2Vzc1wiOlxuICAgICAgcmV0dXJuIGV4aXRfLnN1Y2NlZWQoaW5wdXQudmFsdWUpO1xuICB9XG59O1xuY29uc3QgZXhpdEFyYml0cmFyeSA9ICh2YWx1ZSwgZXJyb3IsIGRlZmVjdCkgPT4gZmMgPT4gZmMub25lb2YoZmMucmVjb3JkKHtcbiAgX3RhZzogZmMuY29uc3RhbnQoXCJGYWlsdXJlXCIpLFxuICBjYXVzZTogY2F1c2VBcmJpdHJhcnkoZXJyb3IsIGRlZmVjdCkoZmMpXG59KSwgZmMucmVjb3JkKHtcbiAgX3RhZzogZmMuY29uc3RhbnQoXCJTdWNjZXNzXCIpLFxuICB2YWx1ZTogdmFsdWUoZmMpXG59KSkubWFwKGV4aXREZWNvZGUpO1xuY29uc3QgZXhpdFByZXR0eSA9ICh2YWx1ZSwgZXJyb3IpID0+IGV4aXQgPT4gZXhpdC5fdGFnID09PSBcIkZhaWx1cmVcIiA/IGBFeGl0LmZhaWxDYXVzZSgke2NhdXNlUHJldHR5KGVycm9yKShleGl0LmNhdXNlKX0pYCA6IGBFeGl0LnN1Y2NlZWQoJHt2YWx1ZShleGl0LnZhbHVlKX0pYDtcbmNvbnN0IGV4aXRQYXJzZSA9IChkZWNvZGVVbmtub3duVmFsdWUsIGRlY29kZVVua25vd25DYXVzZSkgPT4gKHUsIG9wdGlvbnMsIGFzdCkgPT4gZXhpdF8uaXNFeGl0KHUpID8gZXhpdF8ubWF0Y2godSwge1xuICBvbkZhaWx1cmU6IGNhdXNlID0+IFBhcnNlUmVzdWx0Lm1hcChkZWNvZGVVbmtub3duQ2F1c2UoY2F1c2UsIG9wdGlvbnMpLCBleGl0Xy5mYWlsQ2F1c2UpLFxuICBvblN1Y2Nlc3M6IHZhbHVlID0+IFBhcnNlUmVzdWx0Lm1hcChkZWNvZGVVbmtub3duVmFsdWUodmFsdWUsIG9wdGlvbnMpLCBleGl0Xy5zdWNjZWVkKVxufSkgOiBQYXJzZVJlc3VsdC5mYWlsKG5ldyBQYXJzZVJlc3VsdC5UeXBlKGFzdCwgdSkpO1xuLyoqXG4gKiBAY2F0ZWdvcnkgRXhpdCB0cmFuc2Zvcm1hdGlvbnNcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5leHBvcnQgY29uc3QgRXhpdEZyb21TZWxmID0gKHtcbiAgZGVmZWN0ID0gVW5rbm93bixcbiAgZmFpbHVyZSxcbiAgc3VjY2Vzc1xufSkgPT4gZGVjbGFyZShbc3VjY2VzcywgZmFpbHVyZSwgZGVmZWN0XSwge1xuICBkZWNvZGU6IChzdWNjZXNzLCBmYWlsdXJlLCBkZWZlY3QpID0+IGV4aXRQYXJzZShQYXJzZVJlc3VsdC5kZWNvZGVVbmtub3duKHN1Y2Nlc3MpLCBQYXJzZVJlc3VsdC5kZWNvZGVVbmtub3duKENhdXNlRnJvbVNlbGYoe1xuICAgIGVycm9yOiBmYWlsdXJlLFxuICAgIGRlZmVjdFxuICB9KSkpLFxuICBlbmNvZGU6IChzdWNjZXNzLCBmYWlsdXJlLCBkZWZlY3QpID0+IGV4aXRQYXJzZShQYXJzZVJlc3VsdC5lbmNvZGVVbmtub3duKHN1Y2Nlc3MpLCBQYXJzZVJlc3VsdC5lbmNvZGVVbmtub3duKENhdXNlRnJvbVNlbGYoe1xuICAgIGVycm9yOiBmYWlsdXJlLFxuICAgIGRlZmVjdFxuICB9KSkpXG59LCB7XG4gIGRlc2NyaXB0aW9uOiBgRXhpdDwke2Zvcm1hdChzdWNjZXNzKX0sICR7Zm9ybWF0KGZhaWx1cmUpfT5gLFxuICBwcmV0dHk6IGV4aXRQcmV0dHksXG4gIGFyYml0cmFyeTogZXhpdEFyYml0cmFyeVxufSk7XG4vKipcbiAqIEBjYXRlZ29yeSBFeGl0IHRyYW5zZm9ybWF0aW9uc1xuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBFeGl0ID0gKHtcbiAgZGVmZWN0ID0gQ2F1c2VEZWZlY3RVbmtub3duLFxuICBmYWlsdXJlLFxuICBzdWNjZXNzXG59KSA9PiB7XG4gIGNvbnN0IHN1Y2Nlc3NfID0gYXNTY2hlbWEoc3VjY2Vzcyk7XG4gIGNvbnN0IGZhaWx1cmVfID0gYXNTY2hlbWEoZmFpbHVyZSk7XG4gIHJldHVybiB0cmFuc2Zvcm0oZXhpdEVuY29kZWQoc3VjY2Vzc18sIGZhaWx1cmVfLCBkZWZlY3QpLCBFeGl0RnJvbVNlbGYoe1xuICAgIGZhaWx1cmU6IHR5cGVTY2hlbWEoZmFpbHVyZV8pLFxuICAgIHN1Y2Nlc3M6IHR5cGVTY2hlbWEoc3VjY2Vzc18pLFxuICAgIGRlZmVjdDogdHlwZVNjaGVtYShkZWZlY3QpXG4gIH0pLCB7XG4gICAgZGVjb2RlOiBleGl0RGVjb2RlLFxuICAgIGVuY29kZTogZXhpdCA9PiBleGl0Ll90YWcgPT09IFwiRmFpbHVyZVwiID8ge1xuICAgICAgX3RhZzogXCJGYWlsdXJlXCIsXG4gICAgICBjYXVzZTogZXhpdC5jYXVzZVxuICAgIH0gOiB7XG4gICAgICBfdGFnOiBcIlN1Y2Nlc3NcIixcbiAgICAgIHZhbHVlOiBleGl0LnZhbHVlXG4gICAgfVxuICB9KTtcbn07XG5jb25zdCBoYXNoU2V0QXJiaXRyYXJ5ID0gaXRlbSA9PiBmYyA9PiBmYy5hcnJheShpdGVtKGZjKSkubWFwKGFzID0+IGhhc2hTZXRfLmZyb21JdGVyYWJsZShhcykpO1xuY29uc3QgaGFzaFNldFByZXR0eSA9IGl0ZW0gPT4gc2V0ID0+IGBIYXNoU2V0KCR7QXJyYXkuZnJvbShzZXQpLm1hcChhID0+IGl0ZW0oYSkpLmpvaW4oXCIsIFwiKX0pYDtcbmNvbnN0IGhhc2hTZXRFcXVpdmFsZW5jZSA9IGl0ZW0gPT4ge1xuICBjb25zdCBhcnJheUVxdWl2YWxlbmNlID0gYXJyYXlfLmdldEVxdWl2YWxlbmNlKGl0ZW0pO1xuICByZXR1cm4gRXF1aXZhbGVuY2UubWFrZSgoYSwgYikgPT4gYXJyYXlFcXVpdmFsZW5jZShBcnJheS5mcm9tKGEpLCBBcnJheS5mcm9tKGIpKSk7XG59O1xuY29uc3QgaGFzaFNldFBhcnNlID0gZGVjb2RlVW5rbm93biA9PiAodSwgb3B0aW9ucywgYXN0KSA9PiBoYXNoU2V0Xy5pc0hhc2hTZXQodSkgPyBQYXJzZVJlc3VsdC5tYXAoZGVjb2RlVW5rbm93bihBcnJheS5mcm9tKHUpLCBvcHRpb25zKSwgYXMgPT4gaGFzaFNldF8uZnJvbUl0ZXJhYmxlKGFzKSkgOiBQYXJzZVJlc3VsdC5mYWlsKG5ldyBQYXJzZVJlc3VsdC5UeXBlKGFzdCwgdSkpO1xuLyoqXG4gKiBAY2F0ZWdvcnkgSGFzaFNldCB0cmFuc2Zvcm1hdGlvbnNcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5leHBvcnQgY29uc3QgSGFzaFNldEZyb21TZWxmID0gdmFsdWUgPT4ge1xuICByZXR1cm4gZGVjbGFyZShbdmFsdWVdLCB7XG4gICAgZGVjb2RlOiBpdGVtID0+IGhhc2hTZXRQYXJzZShQYXJzZVJlc3VsdC5kZWNvZGVVbmtub3duKCRBcnJheShpdGVtKSkpLFxuICAgIGVuY29kZTogaXRlbSA9PiBoYXNoU2V0UGFyc2UoUGFyc2VSZXN1bHQuZW5jb2RlVW5rbm93bigkQXJyYXkoaXRlbSkpKVxuICB9LCB7XG4gICAgZGVzY3JpcHRpb246IGBIYXNoU2V0PCR7Zm9ybWF0KHZhbHVlKX0+YCxcbiAgICBwcmV0dHk6IGhhc2hTZXRQcmV0dHksXG4gICAgYXJiaXRyYXJ5OiBoYXNoU2V0QXJiaXRyYXJ5LFxuICAgIGVxdWl2YWxlbmNlOiBoYXNoU2V0RXF1aXZhbGVuY2VcbiAgfSk7XG59O1xuLyoqXG4gKiBAY2F0ZWdvcnkgSGFzaFNldCB0cmFuc2Zvcm1hdGlvbnNcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5leHBvcnQgY29uc3QgSGFzaFNldCA9IHZhbHVlID0+IHtcbiAgY29uc3QgdmFsdWVfID0gYXNTY2hlbWEodmFsdWUpO1xuICByZXR1cm4gdHJhbnNmb3JtKCRBcnJheSh2YWx1ZV8pLCBIYXNoU2V0RnJvbVNlbGYodHlwZVNjaGVtYSh2YWx1ZV8pKSwge1xuICAgIGRlY29kZTogYXMgPT4gaGFzaFNldF8uZnJvbUl0ZXJhYmxlKGFzKSxcbiAgICBlbmNvZGU6IHNldCA9PiBBcnJheS5mcm9tKHNldClcbiAgfSk7XG59O1xuY29uc3QgaGFzaE1hcEFyYml0cmFyeSA9IChrZXksIHZhbHVlKSA9PiBmYyA9PiBmYy5hcnJheShmYy50dXBsZShrZXkoZmMpLCB2YWx1ZShmYykpKS5tYXAoYXMgPT4gaGFzaE1hcF8uZnJvbUl0ZXJhYmxlKGFzKSk7XG5jb25zdCBoYXNoTWFwUHJldHR5ID0gKGtleSwgdmFsdWUpID0+IG1hcCA9PiBgSGFzaE1hcChbJHtBcnJheS5mcm9tKG1hcCkubWFwKChbaywgdl0pID0+IGBbJHtrZXkoayl9LCAke3ZhbHVlKHYpfV1gKS5qb2luKFwiLCBcIil9XSlgO1xuY29uc3QgaGFzaE1hcEVxdWl2YWxlbmNlID0gKGtleSwgdmFsdWUpID0+IHtcbiAgY29uc3QgYXJyYXlFcXVpdmFsZW5jZSA9IGFycmF5Xy5nZXRFcXVpdmFsZW5jZShFcXVpdmFsZW5jZS5tYWtlKChba2EsIHZhXSwgW2tiLCB2Yl0pID0+IGtleShrYSwga2IpICYmIHZhbHVlKHZhLCB2YikpKTtcbiAgcmV0dXJuIEVxdWl2YWxlbmNlLm1ha2UoKGEsIGIpID0+IGFycmF5RXF1aXZhbGVuY2UoQXJyYXkuZnJvbShhKSwgQXJyYXkuZnJvbShiKSkpO1xufTtcbmNvbnN0IGhhc2hNYXBQYXJzZSA9IGRlY29kZVVua25vd24gPT4gKHUsIG9wdGlvbnMsIGFzdCkgPT4gaGFzaE1hcF8uaXNIYXNoTWFwKHUpID8gUGFyc2VSZXN1bHQubWFwKGRlY29kZVVua25vd24oQXJyYXkuZnJvbSh1KSwgb3B0aW9ucyksIGFzID0+IGhhc2hNYXBfLmZyb21JdGVyYWJsZShhcykpIDogUGFyc2VSZXN1bHQuZmFpbChuZXcgUGFyc2VSZXN1bHQuVHlwZShhc3QsIHUpKTtcbi8qKlxuICogQGNhdGVnb3J5IEhhc2hNYXAgdHJhbnNmb3JtYXRpb25zXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IEhhc2hNYXBGcm9tU2VsZiA9ICh7XG4gIGtleSxcbiAgdmFsdWVcbn0pID0+IHtcbiAgcmV0dXJuIGRlY2xhcmUoW2tleSwgdmFsdWVdLCB7XG4gICAgZGVjb2RlOiAoa2V5LCB2YWx1ZSkgPT4gaGFzaE1hcFBhcnNlKFBhcnNlUmVzdWx0LmRlY29kZVVua25vd24oJEFycmF5KFR1cGxlKGtleSwgdmFsdWUpKSkpLFxuICAgIGVuY29kZTogKGtleSwgdmFsdWUpID0+IGhhc2hNYXBQYXJzZShQYXJzZVJlc3VsdC5lbmNvZGVVbmtub3duKCRBcnJheShUdXBsZShrZXksIHZhbHVlKSkpKVxuICB9LCB7XG4gICAgZGVzY3JpcHRpb246IGBIYXNoTWFwPCR7Zm9ybWF0KGtleSl9LCAke2Zvcm1hdCh2YWx1ZSl9PmAsXG4gICAgcHJldHR5OiBoYXNoTWFwUHJldHR5LFxuICAgIGFyYml0cmFyeTogaGFzaE1hcEFyYml0cmFyeSxcbiAgICBlcXVpdmFsZW5jZTogaGFzaE1hcEVxdWl2YWxlbmNlXG4gIH0pO1xufTtcbi8qKlxuICogQGNhdGVnb3J5IEhhc2hNYXAgdHJhbnNmb3JtYXRpb25zXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IEhhc2hNYXAgPSAoe1xuICBrZXksXG4gIHZhbHVlXG59KSA9PiB7XG4gIGNvbnN0IGtleV8gPSBhc1NjaGVtYShrZXkpO1xuICBjb25zdCB2YWx1ZV8gPSBhc1NjaGVtYSh2YWx1ZSk7XG4gIHJldHVybiB0cmFuc2Zvcm0oJEFycmF5KFR1cGxlKGtleV8sIHZhbHVlXykpLCBIYXNoTWFwRnJvbVNlbGYoe1xuICAgIGtleTogdHlwZVNjaGVtYShrZXlfKSxcbiAgICB2YWx1ZTogdHlwZVNjaGVtYSh2YWx1ZV8pXG4gIH0pLCB7XG4gICAgZGVjb2RlOiBhcyA9PiBoYXNoTWFwXy5mcm9tSXRlcmFibGUoYXMpLFxuICAgIGVuY29kZTogbWFwID0+IEFycmF5LmZyb20obWFwKVxuICB9KTtcbn07XG5jb25zdCBsaXN0QXJiaXRyYXJ5ID0gaXRlbSA9PiBmYyA9PiBmYy5hcnJheShpdGVtKGZjKSkubWFwKGFzID0+IGxpc3RfLmZyb21JdGVyYWJsZShhcykpO1xuY29uc3QgbGlzdFByZXR0eSA9IGl0ZW0gPT4gc2V0ID0+IGBMaXN0KCR7QXJyYXkuZnJvbShzZXQpLm1hcChhID0+IGl0ZW0oYSkpLmpvaW4oXCIsIFwiKX0pYDtcbmNvbnN0IGxpc3RFcXVpdmFsZW5jZSA9IGl0ZW0gPT4ge1xuICBjb25zdCBhcnJheUVxdWl2YWxlbmNlID0gYXJyYXlfLmdldEVxdWl2YWxlbmNlKGl0ZW0pO1xuICByZXR1cm4gRXF1aXZhbGVuY2UubWFrZSgoYSwgYikgPT4gYXJyYXlFcXVpdmFsZW5jZShBcnJheS5mcm9tKGEpLCBBcnJheS5mcm9tKGIpKSk7XG59O1xuY29uc3QgbGlzdFBhcnNlID0gZGVjb2RlVW5rbm93biA9PiAodSwgb3B0aW9ucywgYXN0KSA9PiBsaXN0Xy5pc0xpc3QodSkgPyBQYXJzZVJlc3VsdC5tYXAoZGVjb2RlVW5rbm93bihBcnJheS5mcm9tKHUpLCBvcHRpb25zKSwgYXMgPT4gbGlzdF8uZnJvbUl0ZXJhYmxlKGFzKSkgOiBQYXJzZVJlc3VsdC5mYWlsKG5ldyBQYXJzZVJlc3VsdC5UeXBlKGFzdCwgdSkpO1xuLyoqXG4gKiBAY2F0ZWdvcnkgTGlzdCB0cmFuc2Zvcm1hdGlvbnNcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5leHBvcnQgY29uc3QgTGlzdEZyb21TZWxmID0gdmFsdWUgPT4ge1xuICByZXR1cm4gZGVjbGFyZShbdmFsdWVdLCB7XG4gICAgZGVjb2RlOiBpdGVtID0+IGxpc3RQYXJzZShQYXJzZVJlc3VsdC5kZWNvZGVVbmtub3duKCRBcnJheShpdGVtKSkpLFxuICAgIGVuY29kZTogaXRlbSA9PiBsaXN0UGFyc2UoUGFyc2VSZXN1bHQuZW5jb2RlVW5rbm93bigkQXJyYXkoaXRlbSkpKVxuICB9LCB7XG4gICAgZGVzY3JpcHRpb246IGBMaXN0PCR7Zm9ybWF0KHZhbHVlKX0+YCxcbiAgICBwcmV0dHk6IGxpc3RQcmV0dHksXG4gICAgYXJiaXRyYXJ5OiBsaXN0QXJiaXRyYXJ5LFxuICAgIGVxdWl2YWxlbmNlOiBsaXN0RXF1aXZhbGVuY2VcbiAgfSk7XG59O1xuLyoqXG4gKiBAY2F0ZWdvcnkgTGlzdCB0cmFuc2Zvcm1hdGlvbnNcbiAqIEBzaW5jZSAxLjAuMFxuICovXG5leHBvcnQgY29uc3QgTGlzdCA9IHZhbHVlID0+IHtcbiAgY29uc3QgdmFsdWVfID0gYXNTY2hlbWEodmFsdWUpO1xuICByZXR1cm4gdHJhbnNmb3JtKCRBcnJheSh2YWx1ZV8pLCBMaXN0RnJvbVNlbGYodHlwZVNjaGVtYSh2YWx1ZV8pKSwge1xuICAgIGRlY29kZTogYXMgPT4gbGlzdF8uZnJvbUl0ZXJhYmxlKGFzKSxcbiAgICBlbmNvZGU6IHNldCA9PiBBcnJheS5mcm9tKHNldClcbiAgfSk7XG59O1xuY29uc3Qgc29ydGVkU2V0QXJiaXRyYXJ5ID0gKGl0ZW0sIG9yZCkgPT4gZmMgPT4gZmMuYXJyYXkoaXRlbShmYykpLm1hcChhcyA9PiBzb3J0ZWRTZXRfLmZyb21JdGVyYWJsZShhcywgb3JkKSk7XG5jb25zdCBzb3J0ZWRTZXRQcmV0dHkgPSBpdGVtID0+IHNldCA9PiBgbmV3IFNvcnRlZFNldChbJHtBcnJheS5mcm9tKHNvcnRlZFNldF8udmFsdWVzKHNldCkpLm1hcChhID0+IGl0ZW0oYSkpLmpvaW4oXCIsIFwiKX1dKWA7XG5jb25zdCBzb3J0ZWRTZXRQYXJzZSA9IChkZWNvZGVVbmtub3duLCBvcmQpID0+ICh1LCBvcHRpb25zLCBhc3QpID0+IHNvcnRlZFNldF8uaXNTb3J0ZWRTZXQodSkgPyBQYXJzZVJlc3VsdC5tYXAoZGVjb2RlVW5rbm93bihBcnJheS5mcm9tKHNvcnRlZFNldF8udmFsdWVzKHUpKSwgb3B0aW9ucyksIGFzID0+IHNvcnRlZFNldF8uZnJvbUl0ZXJhYmxlKGFzLCBvcmQpKSA6IFBhcnNlUmVzdWx0LmZhaWwobmV3IFBhcnNlUmVzdWx0LlR5cGUoYXN0LCB1KSk7XG4vKipcbiAqIEBjYXRlZ29yeSBTb3J0ZWRTZXQgdHJhbnNmb3JtYXRpb25zXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IFNvcnRlZFNldEZyb21TZWxmID0gKHZhbHVlLCBvcmRBLCBvcmRJKSA9PiB7XG4gIHJldHVybiBkZWNsYXJlKFt2YWx1ZV0sIHtcbiAgICBkZWNvZGU6IGl0ZW0gPT4gc29ydGVkU2V0UGFyc2UoUGFyc2VSZXN1bHQuZGVjb2RlVW5rbm93bigkQXJyYXkoaXRlbSkpLCBvcmRBKSxcbiAgICBlbmNvZGU6IGl0ZW0gPT4gc29ydGVkU2V0UGFyc2UoUGFyc2VSZXN1bHQuZW5jb2RlVW5rbm93bigkQXJyYXkoaXRlbSkpLCBvcmRJKVxuICB9LCB7XG4gICAgZGVzY3JpcHRpb246IGBTb3J0ZWRTZXQ8JHtmb3JtYXQodmFsdWUpfT5gLFxuICAgIHByZXR0eTogc29ydGVkU2V0UHJldHR5LFxuICAgIGFyYml0cmFyeTogYXJiID0+IHNvcnRlZFNldEFyYml0cmFyeShhcmIsIG9yZEEpLFxuICAgIGVxdWl2YWxlbmNlOiAoKSA9PiBzb3J0ZWRTZXRfLmdldEVxdWl2YWxlbmNlKClcbiAgfSk7XG59O1xuLyoqXG4gKiBAY2F0ZWdvcnkgU29ydGVkU2V0IHRyYW5zZm9ybWF0aW9uc1xuICogQHNpbmNlIDEuMC4wXG4gKi9cbmV4cG9ydCBjb25zdCBTb3J0ZWRTZXQgPSAodmFsdWUsIG9yZEEpID0+IHtcbiAgY29uc3QgdmFsdWVfID0gYXNTY2hlbWEodmFsdWUpO1xuICBjb25zdCB0byA9IHR5cGVTY2hlbWEodmFsdWVfKTtcbiAgcmV0dXJuIHRyYW5zZm9ybSgkQXJyYXkodmFsdWVfKSwgU29ydGVkU2V0RnJvbVNlbGYodG8sIG9yZEEsIG9yZEEpLCB7XG4gICAgZGVjb2RlOiBhcyA9PiBzb3J0ZWRTZXRfLmZyb21JdGVyYWJsZShhcywgb3JkQSksXG4gICAgZW5jb2RlOiBzZXQgPT4gQXJyYXkuZnJvbShzb3J0ZWRTZXRfLnZhbHVlcyhzZXQpKVxuICB9KTtcbn07XG4vKipcbiAqIENvbnZlcnRzIGFuIGFyYml0cmFyeSB2YWx1ZSB0byBhIGBib29sZWFuYCBieSB0ZXN0aW5nIHdoZXRoZXIgaXQgaXMgdHJ1dGh5LlxuICogVXNlcyBgISF2YWxgIHRvIGNvZXJjZSB0aGUgdmFsdWUgdG8gYSBgYm9vbGVhbmAuXG4gKlxuICogQHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL0dsb3NzYXJ5L1RydXRoeVxuICogQGNhdGVnb3J5IGJvb2xlYW4gY29uc3RydWN0b3JzXG4gKiBAc2luY2UgMS4wLjBcbiAqL1xuZXhwb3J0IGNvbnN0IEJvb2xlYW5Gcm9tVW5rbm93biA9IC8qI19fUFVSRV9fKi90cmFuc2Zvcm0oVW5rbm93biwgJEJvb2xlYW4sIHtcbiAgZGVjb2RlOiBQcmVkaWNhdGUuaXNUcnV0aHksXG4gIGVuY29kZTogaWRlbnRpdHlcbn0pLmFubm90YXRpb25zKHtcbiAgaWRlbnRpZmllcjogXCJCb29sZWFuRnJvbVVua25vd25cIlxufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TY2hlbWEuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@effect/schema/dist/esm/Schema.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@effect/schema/dist/esm/TreeFormatter.js":
/*!***************************************************************!*\
  !*** ./node_modules/@effect/schema/dist/esm/TreeFormatter.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   formatError: () => (/* binding */ formatError),\n/* harmony export */   formatErrorSync: () => (/* binding */ formatErrorSync),\n/* harmony export */   formatForbiddenMessage: () => (/* binding */ formatForbiddenMessage),\n/* harmony export */   formatIssue: () => (/* binding */ formatIssue),\n/* harmony export */   formatIssueSync: () => (/* binding */ formatIssueSync),\n/* harmony export */   formatTypeMessage: () => (/* binding */ formatTypeMessage),\n/* harmony export */   getMessage: () => (/* binding */ getMessage)\n/* harmony export */ });\n/* harmony import */ var effect_Effect__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! effect/Effect */ \"(rsc)/./node_modules/effect/dist/esm/Effect.js\");\n/* harmony import */ var effect_Option__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! effect/Option */ \"(rsc)/./node_modules/effect/dist/esm/Option.js\");\n/* harmony import */ var effect_Predicate__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! effect/Predicate */ \"(rsc)/./node_modules/effect/dist/esm/Predicate.js\");\n/* harmony import */ var _AST_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./AST.js */ \"(rsc)/./node_modules/@effect/schema/dist/esm/AST.js\");\n/* harmony import */ var _internal_util_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./internal/util.js */ \"(rsc)/./node_modules/@effect/schema/dist/esm/internal/util.js\");\n/**\n * @since 1.0.0\n */\n\n\n\n\n\nconst make = (value, forest = []) => ({\n  value,\n  forest\n});\n/**\n * @category formatting\n * @since 1.0.0\n */\nconst formatIssue = issue => effect_Effect__WEBPACK_IMPORTED_MODULE_0__.map(go(issue), tree => drawTree(tree));\n/**\n * @category formatting\n * @since 1.0.0\n */\nconst formatIssueSync = issue => effect_Effect__WEBPACK_IMPORTED_MODULE_0__.runSync(formatIssue(issue));\n/**\n * @category formatting\n * @since 1.0.0\n */\nconst formatError = error => formatIssue(error.error);\n/**\n * @category formatting\n * @since 1.0.0\n */\nconst formatErrorSync = error => formatIssueSync(error.error);\nconst drawTree = tree => tree.value + draw(\"\\n\", tree.forest);\nconst draw = (indentation, forest) => {\n  let r = \"\";\n  const len = forest.length;\n  let tree;\n  for (let i = 0; i < len; i++) {\n    tree = forest[i];\n    const isLast = i === len - 1;\n    r += indentation + (isLast ? \"└\" : \"├\") + \"─ \" + tree.value;\n    r += draw(indentation + (len > 1 && !isLast ? \"│  \" : \"   \"), tree.forest);\n  }\n  return r;\n};\nconst formatTransformationKind = kind => {\n  switch (kind) {\n    case \"Encoded\":\n      return \"Encoded side transformation failure\";\n    case \"Transformation\":\n      return \"Transformation process failure\";\n    case \"Type\":\n      return \"Type side transformation failure\";\n  }\n};\nconst formatRefinementKind = kind => {\n  switch (kind) {\n    case \"From\":\n      return \"From side refinement failure\";\n    case \"Predicate\":\n      return \"Predicate refinement failure\";\n  }\n};\nconst getPrevMessage = issue => {\n  switch (issue._tag) {\n    case \"Refinement\":\n      {\n        if (issue.kind === \"From\") {\n          return getMessage(issue.error);\n        }\n        break;\n      }\n    case \"Transformation\":\n      return getMessage(issue.error);\n  }\n  return effect_Option__WEBPACK_IMPORTED_MODULE_1__.none();\n};\nconst getCurrentMessage = issue => _AST_js__WEBPACK_IMPORTED_MODULE_2__.getMessageAnnotation(issue.ast).pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_0__.flatMap(annotation => {\n  const out = annotation(issue);\n  return effect_Predicate__WEBPACK_IMPORTED_MODULE_3__.isString(out) ? effect_Effect__WEBPACK_IMPORTED_MODULE_0__.succeed(out) : out;\n}));\n/** @internal */\nconst getMessage = issue => effect_Effect__WEBPACK_IMPORTED_MODULE_0__.catchAll(getPrevMessage(issue), () => getCurrentMessage(issue));\nconst getParseIssueTitleAnnotation = issue => effect_Option__WEBPACK_IMPORTED_MODULE_1__.filterMap(_AST_js__WEBPACK_IMPORTED_MODULE_2__.getParseIssueTitleAnnotation(issue.ast), annotation => effect_Option__WEBPACK_IMPORTED_MODULE_1__.fromNullable(annotation(issue)));\n/** @internal */\nconst formatTypeMessage = e => getMessage(e).pipe(effect_Effect__WEBPACK_IMPORTED_MODULE_0__.orElse(() => getParseIssueTitleAnnotation(e)), effect_Effect__WEBPACK_IMPORTED_MODULE_0__.orElse(() => e.message), effect_Effect__WEBPACK_IMPORTED_MODULE_0__.catchAll(() => effect_Effect__WEBPACK_IMPORTED_MODULE_0__.succeed(`Expected ${e.ast.toString(true)}, actual ${_internal_util_js__WEBPACK_IMPORTED_MODULE_4__.formatUnknown(e.actual)}`)));\nconst getParseIssueTitle = issue => effect_Option__WEBPACK_IMPORTED_MODULE_1__.getOrElse(getParseIssueTitleAnnotation(issue), () => String(issue.ast));\n/** @internal */\nconst formatForbiddenMessage = e => effect_Option__WEBPACK_IMPORTED_MODULE_1__.getOrElse(e.message, () => \"is forbidden\");\nconst getTree = (issue, onFailure) => effect_Effect__WEBPACK_IMPORTED_MODULE_0__.matchEffect(getMessage(issue), {\n  onFailure,\n  onSuccess: message => effect_Effect__WEBPACK_IMPORTED_MODULE_0__.succeed(make(message))\n});\nconst go = e => {\n  switch (e._tag) {\n    case \"Type\":\n      return effect_Effect__WEBPACK_IMPORTED_MODULE_0__.map(formatTypeMessage(e), make);\n    case \"Forbidden\":\n      return effect_Effect__WEBPACK_IMPORTED_MODULE_0__.succeed(make(getParseIssueTitle(e), [make(formatForbiddenMessage(e))]));\n    case \"Unexpected\":\n      return effect_Effect__WEBPACK_IMPORTED_MODULE_0__.succeed(make(`is unexpected, expected ${e.ast.toString(true)}`));\n    case \"Missing\":\n      return effect_Effect__WEBPACK_IMPORTED_MODULE_0__.succeed(make(\"is missing\"));\n    case \"Union\":\n      return getTree(e, () => effect_Effect__WEBPACK_IMPORTED_MODULE_0__.map(effect_Effect__WEBPACK_IMPORTED_MODULE_0__.forEach(e.errors, e => {\n        switch (e._tag) {\n          case \"Member\":\n            return effect_Effect__WEBPACK_IMPORTED_MODULE_0__.map(go(e.error), tree => make(`Union member`, [tree]));\n          default:\n            return go(e);\n        }\n      }), forest => make(getParseIssueTitle(e), forest)));\n    case \"TupleType\":\n      return getTree(e, () => effect_Effect__WEBPACK_IMPORTED_MODULE_0__.map(effect_Effect__WEBPACK_IMPORTED_MODULE_0__.forEach(e.errors, index => effect_Effect__WEBPACK_IMPORTED_MODULE_0__.map(go(index.error), tree => make(`[${index.index}]`, [tree]))), forest => make(getParseIssueTitle(e), forest)));\n    case \"TypeLiteral\":\n      return getTree(e, () => effect_Effect__WEBPACK_IMPORTED_MODULE_0__.map(effect_Effect__WEBPACK_IMPORTED_MODULE_0__.forEach(e.errors, key => effect_Effect__WEBPACK_IMPORTED_MODULE_0__.map(go(key.error), tree => make(`[${_internal_util_js__WEBPACK_IMPORTED_MODULE_4__.formatUnknown(key.key)}]`, [tree]))), forest => make(getParseIssueTitle(e), forest)));\n    case \"Transformation\":\n      return getTree(e, () => effect_Effect__WEBPACK_IMPORTED_MODULE_0__.map(go(e.error), tree => make(getParseIssueTitle(e), [make(formatTransformationKind(e.kind), [tree])])));\n    case \"Refinement\":\n      return getTree(e, () => effect_Effect__WEBPACK_IMPORTED_MODULE_0__.map(go(e.error), tree => make(getParseIssueTitle(e), [make(formatRefinementKind(e.kind), [tree])])));\n    case \"Declaration\":\n      return getTree(e, () => {\n        const error = e.error;\n        const shouldSkipDefaultMessage = error._tag === \"Type\" && error.ast === e.ast;\n        return shouldSkipDefaultMessage ? go(error) : effect_Effect__WEBPACK_IMPORTED_MODULE_0__.map(go(error), tree => make(getParseIssueTitle(e), [tree]));\n      });\n  }\n};\n//# sourceMappingURL=TreeFormatter.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@effect/schema/dist/esm/TreeFormatter.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@effect/schema/dist/esm/internal/errors.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@effect/schema/dist/esm/internal/errors.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getAPIErrorMessage: () => (/* binding */ getAPIErrorMessage),\n/* harmony export */   getArbitraryErrorMessage: () => (/* binding */ getArbitraryErrorMessage),\n/* harmony export */   getDuplicateIndexSignatureErrorMessage: () => (/* binding */ getDuplicateIndexSignatureErrorMessage),\n/* harmony export */   getDuplicatePropertySignatureErrorMessage: () => (/* binding */ getDuplicatePropertySignatureErrorMessage),\n/* harmony export */   getDuplicatePropertySignatureTransformationErrorMessage: () => (/* binding */ getDuplicatePropertySignatureTransformationErrorMessage),\n/* harmony export */   getEquivalenceErrorMessage: () => (/* binding */ getEquivalenceErrorMessage),\n/* harmony export */   getIndexSignatureParameterErrorMessage: () => (/* binding */ getIndexSignatureParameterErrorMessage),\n/* harmony export */   getPrettyErrorMessage: () => (/* binding */ getPrettyErrorMessage),\n/* harmony export */   getRequiredElementFollowinAnOptionalElementErrorMessage: () => (/* binding */ getRequiredElementFollowinAnOptionalElementErrorMessage)\n/* harmony export */ });\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util.js */ \"(rsc)/./node_modules/@effect/schema/dist/esm/internal/util.js\");\n\n/** @internal */\nconst getDuplicatePropertySignatureErrorMessage = name => `Duplicate property signature ${_util_js__WEBPACK_IMPORTED_MODULE_0__.formatUnknown(name)}`;\n/** @internal */\nconst getDuplicateIndexSignatureErrorMessage = name => `Duplicate index signature for type \\`${name}\\``;\n/** @internal */\nconst getIndexSignatureParameterErrorMessage = \"An index signature parameter type must be `string`, `symbol`, a template literal type or a refinement of the previous types\";\n/** @internal */\nconst getRequiredElementFollowinAnOptionalElementErrorMessage = \"A required element cannot follow an optional element. ts(1257)\";\n/** @internal */\nconst getDuplicatePropertySignatureTransformationErrorMessage = name => `Duplicate property signature transformation ${_util_js__WEBPACK_IMPORTED_MODULE_0__.formatUnknown(name)}`;\n/** @internal */\nconst getArbitraryErrorMessage = message => `cannot build an Arbitrary for ${message}`;\n/** @internal */\nconst getPrettyErrorMessage = message => `cannot build a Pretty for ${message}`;\n/** @internal */\nconst getEquivalenceErrorMessage = message => `cannot build an Equivalence for ${message}`;\n/** @internal */\nconst getAPIErrorMessage = (api, message) => `${api}: ${message}`;\n//# sourceMappingURL=errors.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVmZmVjdC9zY2hlbWEvZGlzdC9lc20vaW50ZXJuYWwvZXJyb3JzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBbUM7QUFDbkM7QUFDTywwRkFBMEYsbURBQW1CLE9BQU87QUFDM0g7QUFDTywrRkFBK0YsS0FBSztBQUMzRztBQUNPO0FBQ1A7QUFDTztBQUNQO0FBQ08sdUhBQXVILG1EQUFtQixPQUFPO0FBQ3hKO0FBQ08sNkVBQTZFLFFBQVE7QUFDNUY7QUFDTyxzRUFBc0UsUUFBUTtBQUNyRjtBQUNPLGlGQUFpRixRQUFRO0FBQ2hHO0FBQ08sZ0RBQWdELElBQUksSUFBSSxRQUFRO0FBQ3ZFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWNhZGVteS8uL25vZGVfbW9kdWxlcy9AZWZmZWN0L3NjaGVtYS9kaXN0L2VzbS9pbnRlcm5hbC9lcnJvcnMuanM/YzQ3ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyB1dGlsXyBmcm9tIFwiLi91dGlsLmpzXCI7XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgZ2V0RHVwbGljYXRlUHJvcGVydHlTaWduYXR1cmVFcnJvck1lc3NhZ2UgPSBuYW1lID0+IGBEdXBsaWNhdGUgcHJvcGVydHkgc2lnbmF0dXJlICR7dXRpbF8uZm9ybWF0VW5rbm93bihuYW1lKX1gO1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNvbnN0IGdldER1cGxpY2F0ZUluZGV4U2lnbmF0dXJlRXJyb3JNZXNzYWdlID0gbmFtZSA9PiBgRHVwbGljYXRlIGluZGV4IHNpZ25hdHVyZSBmb3IgdHlwZSBcXGAke25hbWV9XFxgYDtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBnZXRJbmRleFNpZ25hdHVyZVBhcmFtZXRlckVycm9yTWVzc2FnZSA9IFwiQW4gaW5kZXggc2lnbmF0dXJlIHBhcmFtZXRlciB0eXBlIG11c3QgYmUgYHN0cmluZ2AsIGBzeW1ib2xgLCBhIHRlbXBsYXRlIGxpdGVyYWwgdHlwZSBvciBhIHJlZmluZW1lbnQgb2YgdGhlIHByZXZpb3VzIHR5cGVzXCI7XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgZ2V0UmVxdWlyZWRFbGVtZW50Rm9sbG93aW5Bbk9wdGlvbmFsRWxlbWVudEVycm9yTWVzc2FnZSA9IFwiQSByZXF1aXJlZCBlbGVtZW50IGNhbm5vdCBmb2xsb3cgYW4gb3B0aW9uYWwgZWxlbWVudC4gdHMoMTI1NylcIjtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBnZXREdXBsaWNhdGVQcm9wZXJ0eVNpZ25hdHVyZVRyYW5zZm9ybWF0aW9uRXJyb3JNZXNzYWdlID0gbmFtZSA9PiBgRHVwbGljYXRlIHByb3BlcnR5IHNpZ25hdHVyZSB0cmFuc2Zvcm1hdGlvbiAke3V0aWxfLmZvcm1hdFVua25vd24obmFtZSl9YDtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBnZXRBcmJpdHJhcnlFcnJvck1lc3NhZ2UgPSBtZXNzYWdlID0+IGBjYW5ub3QgYnVpbGQgYW4gQXJiaXRyYXJ5IGZvciAke21lc3NhZ2V9YDtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBnZXRQcmV0dHlFcnJvck1lc3NhZ2UgPSBtZXNzYWdlID0+IGBjYW5ub3QgYnVpbGQgYSBQcmV0dHkgZm9yICR7bWVzc2FnZX1gO1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNvbnN0IGdldEVxdWl2YWxlbmNlRXJyb3JNZXNzYWdlID0gbWVzc2FnZSA9PiBgY2Fubm90IGJ1aWxkIGFuIEVxdWl2YWxlbmNlIGZvciAke21lc3NhZ2V9YDtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBnZXRBUElFcnJvck1lc3NhZ2UgPSAoYXBpLCBtZXNzYWdlKSA9PiBgJHthcGl9OiAke21lc3NhZ2V9YDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVycm9ycy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@effect/schema/dist/esm/internal/errors.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@effect/schema/dist/esm/internal/filters.js":
/*!******************************************************************!*\
  !*** ./node_modules/@effect/schema/dist/esm/internal/filters.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BetweenBigintTypeId: () => (/* binding */ BetweenBigintTypeId),\n/* harmony export */   BetweenTypeId: () => (/* binding */ BetweenTypeId),\n/* harmony export */   GreaterThanBigintTypeId: () => (/* binding */ GreaterThanBigintTypeId),\n/* harmony export */   GreaterThanOrEqualToBigIntTypeId: () => (/* binding */ GreaterThanOrEqualToBigIntTypeId),\n/* harmony export */   GreaterThanOrEqualToTypeId: () => (/* binding */ GreaterThanOrEqualToTypeId),\n/* harmony export */   GreaterThanTypeId: () => (/* binding */ GreaterThanTypeId),\n/* harmony export */   IntTypeId: () => (/* binding */ IntTypeId),\n/* harmony export */   ItemsCountTypeId: () => (/* binding */ ItemsCountTypeId),\n/* harmony export */   LengthTypeId: () => (/* binding */ LengthTypeId),\n/* harmony export */   LessThanBigIntTypeId: () => (/* binding */ LessThanBigIntTypeId),\n/* harmony export */   LessThanOrEqualToBigIntTypeId: () => (/* binding */ LessThanOrEqualToBigIntTypeId),\n/* harmony export */   LessThanOrEqualToTypeId: () => (/* binding */ LessThanOrEqualToTypeId),\n/* harmony export */   LessThanTypeId: () => (/* binding */ LessThanTypeId),\n/* harmony export */   MaxItemsTypeId: () => (/* binding */ MaxItemsTypeId),\n/* harmony export */   MaxLengthTypeId: () => (/* binding */ MaxLengthTypeId),\n/* harmony export */   MinItemsTypeId: () => (/* binding */ MinItemsTypeId),\n/* harmony export */   MinLengthTypeId: () => (/* binding */ MinLengthTypeId)\n/* harmony export */ });\n/** @internal */\nconst GreaterThanTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/GreaterThan\");\n/** @internal */\nconst GreaterThanOrEqualToTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/GreaterThanOrEqualTo\");\n/** @internal */\nconst LessThanTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/LessThan\");\n/** @internal */\nconst LessThanOrEqualToTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/LessThanOrEqualTo\");\n/** @internal */\nconst IntTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/Int\");\n/** @internal */\nconst BetweenTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/Between\");\n/** @internal */\nconst GreaterThanBigintTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/GreaterThanBigint\");\n/** @internal */\nconst GreaterThanOrEqualToBigIntTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/GreaterThanOrEqualToBigint\");\n/** @internal */\nconst LessThanBigIntTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/LessThanBigint\");\n/** @internal */\nconst LessThanOrEqualToBigIntTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/LessThanOrEqualToBigint\");\n/** @internal */\nconst BetweenBigintTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/BetweenBigint\");\n/** @internal */\nconst MinLengthTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/MinLength\");\n/** @internal */\nconst MaxLengthTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/MaxLength\");\n/** @internal */\nconst LengthTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/Length\");\n/** @internal */\nconst MinItemsTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/MinItems\");\n/** @internal */\nconst MaxItemsTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/MaxItems\");\n/** @internal */\nconst ItemsCountTypeId = /*#__PURE__*/Symbol.for(\"@effect/schema/TypeId/ItemsCount\");\n//# sourceMappingURL=filters.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVmZmVjdC9zY2hlbWEvZGlzdC9lc20vaW50ZXJuYWwvZmlsdGVycy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ087QUFDUDtBQUNPO0FBQ1A7QUFDTztBQUNQO0FBQ087QUFDUDtBQUNPO0FBQ1A7QUFDTztBQUNQO0FBQ087QUFDUDtBQUNPO0FBQ1A7QUFDTztBQUNQO0FBQ087QUFDUDtBQUNPO0FBQ1A7QUFDTztBQUNQO0FBQ087QUFDUDtBQUNPO0FBQ1A7QUFDTztBQUNQO0FBQ087QUFDUDtBQUNPO0FBQ1AiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hY2FkZW15Ly4vbm9kZV9tb2R1bGVzL0BlZmZlY3Qvc2NoZW1hL2Rpc3QvZXNtL2ludGVybmFsL2ZpbHRlcnMuanM/ZGFiNyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgR3JlYXRlclRoYW5UeXBlSWQgPSAvKiNfX1BVUkVfXyovU3ltYm9sLmZvcihcIkBlZmZlY3Qvc2NoZW1hL1R5cGVJZC9HcmVhdGVyVGhhblwiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBHcmVhdGVyVGhhbk9yRXF1YWxUb1R5cGVJZCA9IC8qI19fUFVSRV9fKi9TeW1ib2wuZm9yKFwiQGVmZmVjdC9zY2hlbWEvVHlwZUlkL0dyZWF0ZXJUaGFuT3JFcXVhbFRvXCIpO1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNvbnN0IExlc3NUaGFuVHlwZUlkID0gLyojX19QVVJFX18qL1N5bWJvbC5mb3IoXCJAZWZmZWN0L3NjaGVtYS9UeXBlSWQvTGVzc1RoYW5cIik7XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgTGVzc1RoYW5PckVxdWFsVG9UeXBlSWQgPSAvKiNfX1BVUkVfXyovU3ltYm9sLmZvcihcIkBlZmZlY3Qvc2NoZW1hL1R5cGVJZC9MZXNzVGhhbk9yRXF1YWxUb1wiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBJbnRUeXBlSWQgPSAvKiNfX1BVUkVfXyovU3ltYm9sLmZvcihcIkBlZmZlY3Qvc2NoZW1hL1R5cGVJZC9JbnRcIik7XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgQmV0d2VlblR5cGVJZCA9IC8qI19fUFVSRV9fKi9TeW1ib2wuZm9yKFwiQGVmZmVjdC9zY2hlbWEvVHlwZUlkL0JldHdlZW5cIik7XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgR3JlYXRlclRoYW5CaWdpbnRUeXBlSWQgPSAvKiNfX1BVUkVfXyovU3ltYm9sLmZvcihcIkBlZmZlY3Qvc2NoZW1hL1R5cGVJZC9HcmVhdGVyVGhhbkJpZ2ludFwiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBHcmVhdGVyVGhhbk9yRXF1YWxUb0JpZ0ludFR5cGVJZCA9IC8qI19fUFVSRV9fKi9TeW1ib2wuZm9yKFwiQGVmZmVjdC9zY2hlbWEvVHlwZUlkL0dyZWF0ZXJUaGFuT3JFcXVhbFRvQmlnaW50XCIpO1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNvbnN0IExlc3NUaGFuQmlnSW50VHlwZUlkID0gLyojX19QVVJFX18qL1N5bWJvbC5mb3IoXCJAZWZmZWN0L3NjaGVtYS9UeXBlSWQvTGVzc1RoYW5CaWdpbnRcIik7XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgTGVzc1RoYW5PckVxdWFsVG9CaWdJbnRUeXBlSWQgPSAvKiNfX1BVUkVfXyovU3ltYm9sLmZvcihcIkBlZmZlY3Qvc2NoZW1hL1R5cGVJZC9MZXNzVGhhbk9yRXF1YWxUb0JpZ2ludFwiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBCZXR3ZWVuQmlnaW50VHlwZUlkID0gLyojX19QVVJFX18qL1N5bWJvbC5mb3IoXCJAZWZmZWN0L3NjaGVtYS9UeXBlSWQvQmV0d2VlbkJpZ2ludFwiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBNaW5MZW5ndGhUeXBlSWQgPSAvKiNfX1BVUkVfXyovU3ltYm9sLmZvcihcIkBlZmZlY3Qvc2NoZW1hL1R5cGVJZC9NaW5MZW5ndGhcIik7XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgTWF4TGVuZ3RoVHlwZUlkID0gLyojX19QVVJFX18qL1N5bWJvbC5mb3IoXCJAZWZmZWN0L3NjaGVtYS9UeXBlSWQvTWF4TGVuZ3RoXCIpO1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNvbnN0IExlbmd0aFR5cGVJZCA9IC8qI19fUFVSRV9fKi9TeW1ib2wuZm9yKFwiQGVmZmVjdC9zY2hlbWEvVHlwZUlkL0xlbmd0aFwiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBNaW5JdGVtc1R5cGVJZCA9IC8qI19fUFVSRV9fKi9TeW1ib2wuZm9yKFwiQGVmZmVjdC9zY2hlbWEvVHlwZUlkL01pbkl0ZW1zXCIpO1xuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNvbnN0IE1heEl0ZW1zVHlwZUlkID0gLyojX19QVVJFX18qL1N5bWJvbC5mb3IoXCJAZWZmZWN0L3NjaGVtYS9UeXBlSWQvTWF4SXRlbXNcIik7XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgSXRlbXNDb3VudFR5cGVJZCA9IC8qI19fUFVSRV9fKi9TeW1ib2wuZm9yKFwiQGVmZmVjdC9zY2hlbWEvVHlwZUlkL0l0ZW1zQ291bnRcIik7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1maWx0ZXJzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@effect/schema/dist/esm/internal/filters.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@effect/schema/dist/esm/internal/serializable.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@effect/schema/dist/esm/internal/serializable.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   symbol: () => (/* binding */ symbol),\n/* harmony export */   symbolResult: () => (/* binding */ symbolResult)\n/* harmony export */ });\n/** @internal */\nconst symbol = /*#__PURE__*/Symbol.for(\"@effect/schema/Serializable/symbol\");\n/** @internal */\nconst symbolResult = /*#__PURE__*/Symbol.for(\"@effect/schema/Serializable/symbolResult\");\n//# sourceMappingURL=serializable.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVmZmVjdC9zY2hlbWEvZGlzdC9lc20vaW50ZXJuYWwvc2VyaWFsaXphYmxlLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDTztBQUNQO0FBQ087QUFDUCIsInNvdXJjZXMiOlsid2VicGFjazovL2FjYWRlbXkvLi9ub2RlX21vZHVsZXMvQGVmZmVjdC9zY2hlbWEvZGlzdC9lc20vaW50ZXJuYWwvc2VyaWFsaXphYmxlLmpzP2Q2MGIiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGNvbnN0IHN5bWJvbCA9IC8qI19fUFVSRV9fKi9TeW1ib2wuZm9yKFwiQGVmZmVjdC9zY2hlbWEvU2VyaWFsaXphYmxlL3N5bWJvbFwiKTtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBzeW1ib2xSZXN1bHQgPSAvKiNfX1BVUkVfXyovU3ltYm9sLmZvcihcIkBlZmZlY3Qvc2NoZW1hL1NlcmlhbGl6YWJsZS9zeW1ib2xSZXN1bHRcIik7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zZXJpYWxpemFibGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@effect/schema/dist/esm/internal/serializable.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@effect/schema/dist/esm/internal/util.js":
/*!***************************************************************!*\
  !*** ./node_modules/@effect/schema/dist/esm/internal/util.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   formatPropertyKey: () => (/* binding */ formatPropertyKey),\n/* harmony export */   formatUnknown: () => (/* binding */ formatUnknown),\n/* harmony export */   getKeysForIndexSignature: () => (/* binding */ getKeysForIndexSignature),\n/* harmony export */   memoizeThunk: () => (/* binding */ memoizeThunk),\n/* harmony export */   ownKeys: () => (/* binding */ ownKeys)\n/* harmony export */ });\n/* harmony import */ var effect_Predicate__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! effect/Predicate */ \"(rsc)/./node_modules/effect/dist/esm/Predicate.js\");\n\n/** @internal */\nconst getKeysForIndexSignature = (input, parameter) => {\n  switch (parameter._tag) {\n    case \"StringKeyword\":\n    case \"TemplateLiteral\":\n      return Object.keys(input);\n    case \"SymbolKeyword\":\n      return Object.getOwnPropertySymbols(input);\n    case \"Refinement\":\n      return getKeysForIndexSignature(input, parameter.from);\n  }\n};\n/** @internal */\nconst ownKeys = o => Object.keys(o).concat(Object.getOwnPropertySymbols(o));\n/** @internal */\nconst memoizeThunk = f => {\n  let done = false;\n  let a;\n  return () => {\n    if (done) {\n      return a;\n    }\n    a = f();\n    done = true;\n    return a;\n  };\n};\n/** @internal */\nconst formatUnknown = u => {\n  if (effect_Predicate__WEBPACK_IMPORTED_MODULE_0__.isString(u)) {\n    return JSON.stringify(u);\n  } else if (effect_Predicate__WEBPACK_IMPORTED_MODULE_0__.isNumber(u) || u == null || effect_Predicate__WEBPACK_IMPORTED_MODULE_0__.isBoolean(u) || effect_Predicate__WEBPACK_IMPORTED_MODULE_0__.isSymbol(u) || effect_Predicate__WEBPACK_IMPORTED_MODULE_0__.isDate(u)) {\n    return String(u);\n  } else if (effect_Predicate__WEBPACK_IMPORTED_MODULE_0__.isBigInt(u)) {\n    return String(u) + \"n\";\n  } else if (!Array.isArray(u) && effect_Predicate__WEBPACK_IMPORTED_MODULE_0__.hasProperty(u, \"toString\") && effect_Predicate__WEBPACK_IMPORTED_MODULE_0__.isFunction(u[\"toString\"]) && u[\"toString\"] !== Object.prototype.toString) {\n    return u[\"toString\"]();\n  }\n  try {\n    JSON.stringify(u);\n    if (Array.isArray(u)) {\n      return `[${u.map(formatUnknown).join(\",\")}]`;\n    } else {\n      return `{${ownKeys(u).map(k => `${effect_Predicate__WEBPACK_IMPORTED_MODULE_0__.isString(k) ? JSON.stringify(k) : String(k)}:${formatUnknown(u[k])}`).join(\",\")}}`;\n    }\n  } catch (e) {\n    return String(u);\n  }\n};\n/** @internal */\nconst formatPropertyKey = name => typeof name === \"string\" ? JSON.stringify(name) : String(name);\n//# sourceMappingURL=util.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGVmZmVjdC9zY2hlbWEvZGlzdC9lc20vaW50ZXJuYWwvdXRpbC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBOEM7QUFDOUM7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQLE1BQU0sc0RBQWtCO0FBQ3hCO0FBQ0EsSUFBSSxTQUFTLHNEQUFrQixvQkFBb0IsdURBQW1CLE9BQU8sc0RBQWtCLE9BQU8sb0RBQWdCO0FBQ3RIO0FBQ0EsSUFBSSxTQUFTLHNEQUFrQjtBQUMvQjtBQUNBLElBQUksOEJBQThCLHlEQUFxQixtQkFBbUIsd0RBQW9CO0FBQzlGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsK0JBQStCO0FBQ2hELE1BQU07QUFDTixlQUFlLEVBQUUsdUJBQXVCLHNEQUFrQixvQ0FBb0MsR0FBRyxvQkFBb0IsY0FBYztBQUNuSTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hY2FkZW15Ly4vbm9kZV9tb2R1bGVzL0BlZmZlY3Qvc2NoZW1hL2Rpc3QvZXNtL2ludGVybmFsL3V0aWwuanM/MTFjNCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBQcmVkaWNhdGUgZnJvbSBcImVmZmVjdC9QcmVkaWNhdGVcIjtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBnZXRLZXlzRm9ySW5kZXhTaWduYXR1cmUgPSAoaW5wdXQsIHBhcmFtZXRlcikgPT4ge1xuICBzd2l0Y2ggKHBhcmFtZXRlci5fdGFnKSB7XG4gICAgY2FzZSBcIlN0cmluZ0tleXdvcmRcIjpcbiAgICBjYXNlIFwiVGVtcGxhdGVMaXRlcmFsXCI6XG4gICAgICByZXR1cm4gT2JqZWN0LmtleXMoaW5wdXQpO1xuICAgIGNhc2UgXCJTeW1ib2xLZXl3b3JkXCI6XG4gICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhpbnB1dCk7XG4gICAgY2FzZSBcIlJlZmluZW1lbnRcIjpcbiAgICAgIHJldHVybiBnZXRLZXlzRm9ySW5kZXhTaWduYXR1cmUoaW5wdXQsIHBhcmFtZXRlci5mcm9tKTtcbiAgfVxufTtcbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBvd25LZXlzID0gbyA9PiBPYmplY3Qua2V5cyhvKS5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvKSk7XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgbWVtb2l6ZVRodW5rID0gZiA9PiB7XG4gIGxldCBkb25lID0gZmFsc2U7XG4gIGxldCBhO1xuICByZXR1cm4gKCkgPT4ge1xuICAgIGlmIChkb25lKSB7XG4gICAgICByZXR1cm4gYTtcbiAgICB9XG4gICAgYSA9IGYoKTtcbiAgICBkb25lID0gdHJ1ZTtcbiAgICByZXR1cm4gYTtcbiAgfTtcbn07XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgZm9ybWF0VW5rbm93biA9IHUgPT4ge1xuICBpZiAoUHJlZGljYXRlLmlzU3RyaW5nKHUpKSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHUpO1xuICB9IGVsc2UgaWYgKFByZWRpY2F0ZS5pc051bWJlcih1KSB8fCB1ID09IG51bGwgfHwgUHJlZGljYXRlLmlzQm9vbGVhbih1KSB8fCBQcmVkaWNhdGUuaXNTeW1ib2wodSkgfHwgUHJlZGljYXRlLmlzRGF0ZSh1KSkge1xuICAgIHJldHVybiBTdHJpbmcodSk7XG4gIH0gZWxzZSBpZiAoUHJlZGljYXRlLmlzQmlnSW50KHUpKSB7XG4gICAgcmV0dXJuIFN0cmluZyh1KSArIFwiblwiO1xuICB9IGVsc2UgaWYgKCFBcnJheS5pc0FycmF5KHUpICYmIFByZWRpY2F0ZS5oYXNQcm9wZXJ0eSh1LCBcInRvU3RyaW5nXCIpICYmIFByZWRpY2F0ZS5pc0Z1bmN0aW9uKHVbXCJ0b1N0cmluZ1wiXSkgJiYgdVtcInRvU3RyaW5nXCJdICE9PSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKSB7XG4gICAgcmV0dXJuIHVbXCJ0b1N0cmluZ1wiXSgpO1xuICB9XG4gIHRyeSB7XG4gICAgSlNPTi5zdHJpbmdpZnkodSk7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodSkpIHtcbiAgICAgIHJldHVybiBgWyR7dS5tYXAoZm9ybWF0VW5rbm93bikuam9pbihcIixcIil9XWA7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBgeyR7b3duS2V5cyh1KS5tYXAoayA9PiBgJHtQcmVkaWNhdGUuaXNTdHJpbmcoaykgPyBKU09OLnN0cmluZ2lmeShrKSA6IFN0cmluZyhrKX06JHtmb3JtYXRVbmtub3duKHVba10pfWApLmpvaW4oXCIsXCIpfX1gO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBTdHJpbmcodSk7XG4gIH1cbn07XG4vKiogQGludGVybmFsICovXG5leHBvcnQgY29uc3QgZm9ybWF0UHJvcGVydHlLZXkgPSBuYW1lID0+IHR5cGVvZiBuYW1lID09PSBcInN0cmluZ1wiID8gSlNPTi5zdHJpbmdpZnkobmFtZSkgOiBTdHJpbmcobmFtZSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlsLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@effect/schema/dist/esm/internal/util.js\n");

/***/ })

};
;